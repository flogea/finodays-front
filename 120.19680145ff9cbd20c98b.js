/*! For license information please see 120.19680145ff9cbd20c98b.js.LICENSE.txt */
(self.webpackChunkfinodays_front=self.webpackChunkfinodays_front||[]).push([[120],{5987:t=>{"use strict";var e={single_source_shortest_paths:function(t,n,i){var r={},s={};s[n]=0;var o,a,l,c,u,h,d,f=e.PriorityQueue.make();for(f.push(n,0);!f.empty();)for(l in a=(o=f.pop()).value,c=o.cost,u=t[a]||{})u.hasOwnProperty(l)&&(h=c+u[l],d=s[l],(void 0===s[l]||d>h)&&(s[l]=h,f.push(l,h),r[l]=a));if(void 0!==i&&void 0===s[i]){var p=["Could not find a path from ",n," to ",i,"."].join("");throw new Error(p)}return r},extract_shortest_path_from_predecessor_list:function(t,e){for(var n=[],i=e;i;)n.push(i),t[i],i=t[i];return n.reverse(),n},find_path:function(t,n,i){var r=e.single_source_shortest_paths(t,n,i);return e.extract_shortest_path_from_predecessor_list(r,i)},PriorityQueue:{make:function(t){var n,i=e.PriorityQueue,r={};for(n in t=t||{},i)i.hasOwnProperty(n)&&(r[n]=i[n]);return r.queue=[],r.sorter=t.sorter||i.default_sorter,r},default_sorter:function(t,e){return t.cost-e.cost},push:function(t,e){var n={value:t,cost:e};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};t.exports=e},2378:t=>{"use strict";t.exports=function(t){for(var e=[],n=t.length,i=0;i<n;i++){var r=t.charCodeAt(i);if(r>=55296&&r<=56319&&n>i+1){var s=t.charCodeAt(i+1);s>=56320&&s<=57343&&(r=1024*(r-55296)+s-56320+65536,i+=1)}r<128?e.push(r):r<2048?(e.push(r>>6|192),e.push(63&r|128)):r<55296||r>=57344&&r<65536?(e.push(r>>12|224),e.push(r>>6&63|128),e.push(63&r|128)):r>=65536&&r<=1114111?(e.push(r>>18|240),e.push(r>>12&63|128),e.push(r>>6&63|128),e.push(63&r|128)):e.push(239,191,189)}return new Uint8Array(e).buffer}},4213:(t,e,n)=>{"use strict";n.d(e,{j:()=>lt});const i={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},r=t=>1e3*t,s=t=>t/1e3,o=()=>{},a=t=>t;function l(t,e=!0){if(t&&"finished"!==t.playState)try{t.stop?t.stop():(e&&t.commitStyles(),t.cancel())}catch(t){}}const c=t=>t(),u=(t,e,n=i.duration)=>new Proxy({animations:t.map(c).filter(Boolean),duration:n,options:e},h),h={get:(t,e)=>{const n=t.animations[0];switch(e){case"duration":return t.duration;case"currentTime":return s((null==n?void 0:n[e])||0);case"playbackRate":case"playState":return null==n?void 0:n[e];case"finished":return t.finished||(t.finished=Promise.all(t.animations.map(d)).catch(o)),t.finished;case"stop":return()=>{t.animations.forEach((t=>l(t)))};case"forEachNative":return e=>{t.animations.forEach((n=>e(n,t)))};default:return void 0===(null==n?void 0:n[e])?void 0:()=>t.animations.forEach((t=>t[e]()))}},set:(t,e,n)=>{switch(e){case"currentTime":n=r(n);case"currentTime":case"playbackRate":for(let i=0;i<t.animations.length;i++)t.animations[i][e]=n;return!0}return!1}},d=t=>t.finished,f=t=>"object"==typeof t&&Boolean(t.createAnimation),p=t=>"number"==typeof t,g=t=>Array.isArray(t)&&!p(t[0]),m=(t,e,n)=>-n*t+n*e+t,y=(t,e,n)=>e-t==0?1:(n-t)/(e-t);function v(t,e){const n=t[t.length-1];for(let i=1;i<=e;i++){const r=y(0,e,i);t.push(m(n,1,r))}}const A=(t,e,n)=>Math.min(Math.max(n,t),e);const w=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t,E=1e-7,$=12;function _(t,e,n,i){if(t===e&&n===i)return a;return r=>0===r||1===r?r:w(function(t,e,n,i,r){let s,o,a=0;do{o=e+(n-e)/2,s=w(o,i,r)-t,s>0?n=o:e=o}while(Math.abs(s)>E&&++a<$);return o}(r,0,1,t,n),e,i)}const b=t=>"function"==typeof t,C=t=>Array.isArray(t)&&p(t[0]),S={ease:_(.25,.1,.25,1),"ease-in":_(.42,0,1,1),"ease-in-out":_(.42,0,.58,1),"ease-out":_(0,0,.58,1)},T=/\((.*?)\)/;function P(t){if(b(t))return t;if(C(t))return _(...t);if(S[t])return S[t];if(t.startsWith("steps")){const e=T.exec(t);if(e){const t=e[1].split(",");return((t,e="end")=>n=>{const i=(n="end"===e?Math.min(n,.999):Math.max(n,.001))*t,r="end"===e?Math.floor(i):Math.ceil(i);return A(0,1,r/t)})(parseFloat(t[0]),t[1].trim())}}return a}class M{constructor(t,e=[0,1],{easing:n,duration:r=i.duration,delay:s=i.delay,endDelay:o=i.endDelay,repeat:l=i.repeat,offset:c,direction:u="normal"}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=a,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((t,e)=>{this.resolve=t,this.reject=e})),n=n||i.easing,f(n)){const t=n.createAnimation(e);n=t.easing,e=t.keyframes||e,r=t.duration||r}this.repeat=l,this.easing=g(n)?a:P(n),this.updateDuration(r);const h=function(t,e=function(t){const e=[0];return v(e,t-1),e}(t.length),n=a){const i=t.length,r=i-e.length;return r>0&&v(e,r),r=>{let s=0;for(;s<i-2&&!(r<e[s+1]);s++);let o=A(0,1,y(e[s],e[s+1],r));const a=function(t,e){return g(t)?t[((t,e,n)=>{const i=e-t;return((n-t)%i+i)%i+t})(0,t.length,e)]:t}(n,s);return o=a(o),m(t[s],t[s+1],o)}}(e,c,g(n)?n.map(P):a);this.tick=e=>{var n;let i=0;i=void 0!==this.pauseTime?this.pauseTime:(e-this.startTime)*this.rate,this.t=i,i/=1e3,i=Math.max(i-s,0),"finished"===this.playState&&void 0===this.pauseTime&&(i=this.totalDuration);const r=i/this.duration;let a=Math.floor(r),l=r%1;!l&&r>=1&&(l=1),1===l&&a--;const c=a%2;("reverse"===u||"alternate"===u&&c||"alternate-reverse"===u&&!c)&&(l=1-l);const d=i>=this.totalDuration?1:Math.min(l,1),f=h(this.easing(d));t(f),void 0===this.pauseTime&&("finished"===this.playState||i>=this.totalDuration+o)?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,f)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},this.play()}play(){const t=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=t-this.pauseTime:this.startTime||(this.startTime=t),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var t;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(t=this.reject)||void 0===t||t.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(t){this.duration=t,this.totalDuration=t*(this.repeat+1)}get currentTime(){return this.t}set currentTime(t){void 0!==this.pauseTime||0===this.rate?this.pauseTime=t:this.startTime=performance.now()-t/this.rate}get playbackRate(){return this.rate}set playbackRate(t){this.rate=t}}class x{setAnimation(t){this.animation=t,null==t||t.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const N=new WeakMap;function R(t){return N.has(t)||N.set(t,{transforms:[],values:new Map}),N.get(t)}const B=["","X","Y","Z"],U={x:"translateX",y:"translateY",z:"translateZ"},I={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:t=>t+"deg"},k={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:t=>t+"px"},rotate:I,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:a},skew:I},L=new Map,H=t=>`--motion-${t}`,O=["x","y","z"];["translate","scale","rotate","skew"].forEach((t=>{B.forEach((e=>{O.push(t+e),L.set(H(t+e),k[t])}))}));const D=(t,e)=>O.indexOf(t)-O.indexOf(e),z=new Set(O),j=t=>z.has(t),V=t=>t.sort(D).reduce(F,"").trim(),F=(t,e)=>`${t} ${e}(var(${H(e)}))`,Y=t=>t.startsWith("--"),J=new Set,K=(t,e)=>document.createElement("div").animate(t,e),q={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{K({opacity:[1]})}catch(t){return!1}return!0},finished:()=>Boolean(K({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{K({opacity:0},{easing:"linear(0, 1)"})}catch(t){return!1}return!0}},W={},Q={};for(const t in q)Q[t]=()=>(void 0===W[t]&&(W[t]=q[t]()),W[t]);const Z=(t,e)=>b(t)?Q.linearEasing()?`linear(${((t,e)=>{let n="";const i=Math.round(e/.015);for(let e=0;e<i;e++)n+=t(y(0,i-1,e))+", ";return n.substring(0,n.length-2)})(t,e)})`:i.easing:C(t)?X(t):t,X=([t,e,n,i])=>`cubic-bezier(${t}, ${e}, ${n}, ${i})`;function G(t){return U[t]&&(t=U[t]),j(t)?H(t):t}const tt=(t,e)=>{e=G(e);let n=Y(e)?t.style.getPropertyValue(e):getComputedStyle(t)[e];if(!n&&0!==n){const t=L.get(e);t&&(n=t.initialValue)}return n},et=(t,e,n)=>{e=G(e),Y(e)?t.style.setProperty(e,n):t.style[e]=n};function nt(t,e,n,s={},c){const u=window.__MOTION_DEV_TOOLS_RECORD,h=!1!==s.record&&u;let d,{duration:m=i.duration,delay:y=i.delay,endDelay:v=i.endDelay,repeat:A=i.repeat,easing:w=i.easing,persist:E=!1,direction:$,offset:_,allowWebkitAcceleration:C=!1}=s;const S=R(t),T=j(e);let P=Q.waapi();T&&((t,e)=>{U[e]&&(e=U[e]);const{transforms:n}=R(t);var i,r;r=e,-1===(i=n).indexOf(r)&&i.push(r),t.style.transform=V(n)})(t,e);const M=G(e),N=function(t,e){return t.has(e)||t.set(e,new x),t.get(e)}(S.values,M),B=L.get(M);return l(N.animation,!(f(w)&&N.generator)&&!1!==s.record),()=>{const i=()=>{var e,n;return null!==(n=null!==(e=tt(t,M))&&void 0!==e?e:null==B?void 0:B.initialValue)&&void 0!==n?n:0};let l=function(t,e){for(let n=0;n<t.length;n++)null===t[n]&&(t[n]=n?t[n-1]:e());return t}((t=>Array.isArray(t)?t:[t])(n),i);const S=function(t,e){var n;let i=(null==e?void 0:e.toDefaultUnit)||a;const r=t[t.length-1];if("string"==typeof r){const t=(null===(n=r.match(/(-?[\d.]+)([a-z%]*)/))||void 0===n?void 0:n[2])||"";t&&(i=e=>e+t)}return i}(l,B);if(f(w)){const t=w.createAnimation(l,"opacity"!==e,i,M,N);w=t.easing,l=t.keyframes||l,m=t.duration||m}if(Y(M)&&(Q.cssRegisterProperty()?function(t){if(!J.has(t)){J.add(t);try{const{syntax:e,initialValue:n}=L.has(t)?L.get(t):{};CSS.registerProperty({name:t,inherits:!1,syntax:e,initialValue:n})}catch(t){}}}(M):P=!1),T&&!Q.linearEasing()&&(b(w)||g(w)&&w.some(b))&&(P=!1),P){B&&(l=l.map((t=>p(t)?B.toDefaultUnit(t):t))),1!==l.length||Q.partialKeyframes()&&!h||l.unshift(i());const e={delay:r(y),duration:r(m),endDelay:r(v),easing:g(w)?void 0:Z(w,m),direction:$,iterations:A+1,fill:"both"};d=t.animate({[M]:l,offset:_,easing:g(w)?w.map((t=>Z(t,m))):void 0},e),d.finished||(d.finished=new Promise(((t,e)=>{d.onfinish=t,d.oncancel=e})));const n=l[l.length-1];d.finished.then((()=>{E||(et(t,M,n),d.cancel())})).catch(o),C||(d.playbackRate=1.000001)}else if(c&&T)l=l.map((t=>"string"==typeof t?parseFloat(t):t)),1===l.length&&l.unshift(parseFloat(i())),d=new c((e=>{et(t,M,S?S(e):e)}),l,Object.assign(Object.assign({},s),{duration:m,easing:w}));else{const e=l[l.length-1];et(t,M,B&&p(e)?B.toDefaultUnit(e):e)}return h&&u(t,e,l,{duration:m,delay:y,easing:w,repeat:A,offset:_},"motion-one"),N.setAnimation(d),d}}const it=(t,e)=>t[e]?Object.assign(Object.assign({},t),t[e]):Object.assign({},t);function rt(t,e,n){return b(t)?t(e,n):t}const st=(ot=M,function(t,e,n={}){const i=(t=function(t,e){return"string"==typeof t?t=document.querySelectorAll(t):t instanceof Element&&(t=[t]),Array.from(t||[])}(t)).length;Boolean(i),Boolean(e);const r=[];for(let s=0;s<i;s++){const o=t[s];for(const t in e){const a=it(n,t);a.delay=rt(a.delay,s,i);const l=nt(o,t,e[t],a,ot);r.push(l)}}return u(r,n,n.duration)});var ot;function at(t,e={}){return u([()=>{const n=new M(t,[0,1],e);return n.finished.catch((()=>{})),n}],e,e.duration)}function lt(t,e,n){return(b(t)?at:st)(t,e,n)}},2592:(t,e,n)=>{const i=n(7138),r=n(5115),s=n(6907),o=n(3776);function a(t,e,n,s,o){const a=[].slice.call(arguments,1),l=a.length,c="function"==typeof a[l-1];if(!c&&!i())throw new Error("Callback required as last argument");if(!c){if(l<1)throw new Error("Too few arguments provided");return 1===l?(n=e,e=s=void 0):2!==l||e.getContext||(s=n,n=e,e=void 0),new Promise((function(i,o){try{const o=r.create(n,s);i(t(o,e,s))}catch(t){o(t)}}))}if(l<2)throw new Error("Too few arguments provided");2===l?(o=n,n=e,e=s=void 0):3===l&&(e.getContext&&void 0===o?(o=s,s=void 0):(o=s,s=n,n=e,e=void 0));try{const i=r.create(n,s);o(null,t(i,e,s))}catch(t){o(t)}}e.create=r.create,e.toCanvas=a.bind(null,s.render),e.toDataURL=a.bind(null,s.renderToDataURL),e.toString=a.bind(null,(function(t,e,n){return o.render(t,n)}))},7138:t=>{t.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},1845:(t,e,n)=>{const i=n(242).getSymbolSize;e.getRowColCoords=function(t){if(1===t)return[];const e=Math.floor(t/7)+2,n=i(t),r=145===n?26:2*Math.ceil((n-13)/(2*e-2)),s=[n-7];for(let t=1;t<e-1;t++)s[t]=s[t-1]-r;return s.push(6),s.reverse()},e.getPositions=function(t){const n=[],i=e.getRowColCoords(t),r=i.length;for(let t=0;t<r;t++)for(let e=0;e<r;e++)0===t&&0===e||0===t&&e===r-1||t===r-1&&0===e||n.push([i[t],i[e]]);return n}},8260:(t,e,n)=>{const i=n(6910),r=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function s(t){this.mode=i.ALPHANUMERIC,this.data=t}s.getBitsLength=function(t){return 11*Math.floor(t/2)+t%2*6},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(t){let e;for(e=0;e+2<=this.data.length;e+=2){let n=45*r.indexOf(this.data[e]);n+=r.indexOf(this.data[e+1]),t.put(n,11)}this.data.length%2&&t.put(r.indexOf(this.data[e]),6)},t.exports=s},7245:t=>{function e(){this.buffer=[],this.length=0}e.prototype={get:function(t){const e=Math.floor(t/8);return 1==(this.buffer[e]>>>7-t%8&1)},put:function(t,e){for(let n=0;n<e;n++)this.putBit(1==(t>>>e-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(t){const e=Math.floor(this.length/8);this.buffer.length<=e&&this.buffer.push(0),t&&(this.buffer[e]|=128>>>this.length%8),this.length++}},t.exports=e},3280:t=>{function e(t){if(!t||t<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=t,this.data=new Uint8Array(t*t),this.reservedBit=new Uint8Array(t*t)}e.prototype.set=function(t,e,n,i){const r=t*this.size+e;this.data[r]=n,i&&(this.reservedBit[r]=!0)},e.prototype.get=function(t,e){return this.data[t*this.size+e]},e.prototype.xor=function(t,e,n){this.data[t*this.size+e]^=n},e.prototype.isReserved=function(t,e){return this.reservedBit[t*this.size+e]},t.exports=e},3424:(t,e,n)=>{const i=n(2378),r=n(6910);function s(t){this.mode=r.BYTE,"string"==typeof t&&(t=i(t)),this.data=new Uint8Array(t)}s.getBitsLength=function(t){return 8*t},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(t){for(let e=0,n=this.data.length;e<n;e++)t.put(this.data[e],8)},t.exports=s},5393:(t,e,n)=>{const i=n(4908),r=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],s=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];e.getBlocksCount=function(t,e){switch(e){case i.L:return r[4*(t-1)+0];case i.M:return r[4*(t-1)+1];case i.Q:return r[4*(t-1)+2];case i.H:return r[4*(t-1)+3];default:return}},e.getTotalCodewordsCount=function(t,e){switch(e){case i.L:return s[4*(t-1)+0];case i.M:return s[4*(t-1)+1];case i.Q:return s[4*(t-1)+2];case i.H:return s[4*(t-1)+3];default:return}}},4908:(t,e)=>{e.L={bit:1},e.M={bit:0},e.Q={bit:3},e.H={bit:2},e.isValid=function(t){return t&&void 0!==t.bit&&t.bit>=0&&t.bit<4},e.from=function(t,n){if(e.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"l":case"low":return e.L;case"m":case"medium":return e.M;case"q":case"quartile":return e.Q;case"h":case"high":return e.H;default:throw new Error("Unknown EC Level: "+t)}}(t)}catch(t){return n}}},6526:(t,e,n)=>{const i=n(242).getSymbolSize;e.getPositions=function(t){const e=i(t);return[[0,0],[e-7,0],[0,e-7]]}},1642:(t,e,n)=>{const i=n(242),r=i.getBCHDigit(1335);e.getEncodedBits=function(t,e){const n=t.bit<<3|e;let s=n<<10;for(;i.getBCHDigit(s)-r>=0;)s^=1335<<i.getBCHDigit(s)-r;return 21522^(n<<10|s)}},9729:(t,e)=>{const n=new Uint8Array(512),i=new Uint8Array(256);!function(){let t=1;for(let e=0;e<255;e++)n[e]=t,i[t]=e,t<<=1,256&t&&(t^=285);for(let t=255;t<512;t++)n[t]=n[t-255]}(),e.log=function(t){if(t<1)throw new Error("log("+t+")");return i[t]},e.exp=function(t){return n[t]},e.mul=function(t,e){return 0===t||0===e?0:n[i[t]+i[e]]}},5442:(t,e,n)=>{const i=n(6910),r=n(242);function s(t){this.mode=i.KANJI,this.data=t}s.getBitsLength=function(t){return 13*t},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(t){let e;for(e=0;e<this.data.length;e++){let n=r.toSJIS(this.data[e]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[e]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),t.put(n,13)}},t.exports=s},7126:(t,e)=>{e.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};function n(t,n,i){switch(t){case e.Patterns.PATTERN000:return(n+i)%2==0;case e.Patterns.PATTERN001:return n%2==0;case e.Patterns.PATTERN010:return i%3==0;case e.Patterns.PATTERN011:return(n+i)%3==0;case e.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(i/3))%2==0;case e.Patterns.PATTERN101:return n*i%2+n*i%3==0;case e.Patterns.PATTERN110:return(n*i%2+n*i%3)%2==0;case e.Patterns.PATTERN111:return(n*i%3+(n+i)%2)%2==0;default:throw new Error("bad maskPattern:"+t)}}e.isValid=function(t){return null!=t&&""!==t&&!isNaN(t)&&t>=0&&t<=7},e.from=function(t){return e.isValid(t)?parseInt(t,10):void 0},e.getPenaltyN1=function(t){const e=t.size;let n=0,i=0,r=0,s=null,o=null;for(let a=0;a<e;a++){i=r=0,s=o=null;for(let l=0;l<e;l++){let e=t.get(a,l);e===s?i++:(i>=5&&(n+=i-5+3),s=e,i=1),e=t.get(l,a),e===o?r++:(r>=5&&(n+=r-5+3),o=e,r=1)}i>=5&&(n+=i-5+3),r>=5&&(n+=r-5+3)}return n},e.getPenaltyN2=function(t){const e=t.size;let n=0;for(let i=0;i<e-1;i++)for(let r=0;r<e-1;r++){const e=t.get(i,r)+t.get(i,r+1)+t.get(i+1,r)+t.get(i+1,r+1);4!==e&&0!==e||n++}return 3*n},e.getPenaltyN3=function(t){const e=t.size;let n=0,i=0,r=0;for(let s=0;s<e;s++){i=r=0;for(let o=0;o<e;o++)i=i<<1&2047|t.get(s,o),o>=10&&(1488===i||93===i)&&n++,r=r<<1&2047|t.get(o,s),o>=10&&(1488===r||93===r)&&n++}return 40*n},e.getPenaltyN4=function(t){let e=0;const n=t.data.length;for(let i=0;i<n;i++)e+=t.data[i];return 10*Math.abs(Math.ceil(100*e/n/5)-10)},e.applyMask=function(t,e){const i=e.size;for(let r=0;r<i;r++)for(let s=0;s<i;s++)e.isReserved(s,r)||e.xor(s,r,n(t,s,r))},e.getBestMask=function(t,n){const i=Object.keys(e.Patterns).length;let r=0,s=1/0;for(let o=0;o<i;o++){n(o),e.applyMask(o,t);const i=e.getPenaltyN1(t)+e.getPenaltyN2(t)+e.getPenaltyN3(t)+e.getPenaltyN4(t);e.applyMask(o,t),i<s&&(s=i,r=o)}return r}},6910:(t,e,n)=>{const i=n(3114),r=n(7007);e.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},e.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},e.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},e.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},e.MIXED={bit:-1},e.getCharCountIndicator=function(t,e){if(!t.ccBits)throw new Error("Invalid mode: "+t);if(!i.isValid(e))throw new Error("Invalid version: "+e);return e>=1&&e<10?t.ccBits[0]:e<27?t.ccBits[1]:t.ccBits[2]},e.getBestModeForData=function(t){return r.testNumeric(t)?e.NUMERIC:r.testAlphanumeric(t)?e.ALPHANUMERIC:r.testKanji(t)?e.KANJI:e.BYTE},e.toString=function(t){if(t&&t.id)return t.id;throw new Error("Invalid mode")},e.isValid=function(t){return t&&t.bit&&t.ccBits},e.from=function(t,n){if(e.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"numeric":return e.NUMERIC;case"alphanumeric":return e.ALPHANUMERIC;case"kanji":return e.KANJI;case"byte":return e.BYTE;default:throw new Error("Unknown mode: "+t)}}(t)}catch(t){return n}}},1085:(t,e,n)=>{const i=n(6910);function r(t){this.mode=i.NUMERIC,this.data=t.toString()}r.getBitsLength=function(t){return 10*Math.floor(t/3)+(t%3?t%3*3+1:0)},r.prototype.getLength=function(){return this.data.length},r.prototype.getBitsLength=function(){return r.getBitsLength(this.data.length)},r.prototype.write=function(t){let e,n,i;for(e=0;e+3<=this.data.length;e+=3)n=this.data.substr(e,3),i=parseInt(n,10),t.put(i,10);const r=this.data.length-e;r>0&&(n=this.data.substr(e),i=parseInt(n,10),t.put(i,3*r+1))},t.exports=r},6143:(t,e,n)=>{const i=n(9729);e.mul=function(t,e){const n=new Uint8Array(t.length+e.length-1);for(let r=0;r<t.length;r++)for(let s=0;s<e.length;s++)n[r+s]^=i.mul(t[r],e[s]);return n},e.mod=function(t,e){let n=new Uint8Array(t);for(;n.length-e.length>=0;){const t=n[0];for(let r=0;r<e.length;r++)n[r]^=i.mul(e[r],t);let r=0;for(;r<n.length&&0===n[r];)r++;n=n.slice(r)}return n},e.generateECPolynomial=function(t){let n=new Uint8Array([1]);for(let r=0;r<t;r++)n=e.mul(n,new Uint8Array([1,i.exp(r)]));return n}},5115:(t,e,n)=>{const i=n(242),r=n(4908),s=n(7245),o=n(3280),a=n(1845),l=n(6526),c=n(7126),u=n(5393),h=n(6291),d=n(3103),f=n(1642),p=n(6910),g=n(6130);function m(t,e,n){const i=t.size,r=f.getEncodedBits(e,n);let s,o;for(s=0;s<15;s++)o=1==(r>>s&1),s<6?t.set(s,8,o,!0):s<8?t.set(s+1,8,o,!0):t.set(i-15+s,8,o,!0),s<8?t.set(8,i-s-1,o,!0):s<9?t.set(8,15-s-1+1,o,!0):t.set(8,15-s-1,o,!0);t.set(i-8,8,1,!0)}function y(t,e,n,r){let f;if(Array.isArray(t))f=g.fromArray(t);else{if("string"!=typeof t)throw new Error("Invalid data");{let i=e;if(!i){const e=g.rawSplit(t);i=d.getBestVersionForData(e,n)}f=g.fromString(t,i||40)}}const y=d.getBestVersionForData(f,n);if(!y)throw new Error("The amount of data is too big to be stored in a QR Code");if(e){if(e<y)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+y+".\n")}else e=y;const v=function(t,e,n){const r=new s;n.forEach((function(e){r.put(e.mode.bit,4),r.put(e.getLength(),p.getCharCountIndicator(e.mode,t)),e.write(r)}));const o=8*(i.getSymbolTotalCodewords(t)-u.getTotalCodewordsCount(t,e));for(r.getLengthInBits()+4<=o&&r.put(0,4);r.getLengthInBits()%8!=0;)r.putBit(0);const a=(o-r.getLengthInBits())/8;for(let t=0;t<a;t++)r.put(t%2?17:236,8);return function(t,e,n){const r=i.getSymbolTotalCodewords(e),s=r-u.getTotalCodewordsCount(e,n),o=u.getBlocksCount(e,n),a=o-r%o,l=Math.floor(r/o),c=Math.floor(s/o),d=c+1,f=l-c,p=new h(f);let g=0;const m=new Array(o),y=new Array(o);let v=0;const A=new Uint8Array(t.buffer);for(let t=0;t<o;t++){const e=t<a?c:d;m[t]=A.slice(g,g+e),y[t]=p.encode(m[t]),g+=e,v=Math.max(v,e)}const w=new Uint8Array(r);let E,$,_=0;for(E=0;E<v;E++)for($=0;$<o;$++)E<m[$].length&&(w[_++]=m[$][E]);for(E=0;E<f;E++)for($=0;$<o;$++)w[_++]=y[$][E];return w}(r,t,e)}(e,n,f),A=i.getSymbolSize(e),w=new o(A);return function(t,e){const n=t.size,i=l.getPositions(e);for(let e=0;e<i.length;e++){const r=i[e][0],s=i[e][1];for(let e=-1;e<=7;e++)if(!(r+e<=-1||n<=r+e))for(let i=-1;i<=7;i++)s+i<=-1||n<=s+i||(e>=0&&e<=6&&(0===i||6===i)||i>=0&&i<=6&&(0===e||6===e)||e>=2&&e<=4&&i>=2&&i<=4?t.set(r+e,s+i,!0,!0):t.set(r+e,s+i,!1,!0))}}(w,e),function(t){const e=t.size;for(let n=8;n<e-8;n++){const e=n%2==0;t.set(n,6,e,!0),t.set(6,n,e,!0)}}(w),function(t,e){const n=a.getPositions(e);for(let e=0;e<n.length;e++){const i=n[e][0],r=n[e][1];for(let e=-2;e<=2;e++)for(let n=-2;n<=2;n++)-2===e||2===e||-2===n||2===n||0===e&&0===n?t.set(i+e,r+n,!0,!0):t.set(i+e,r+n,!1,!0)}}(w,e),m(w,n,0),e>=7&&function(t,e){const n=t.size,i=d.getEncodedBits(e);let r,s,o;for(let e=0;e<18;e++)r=Math.floor(e/3),s=e%3+n-8-3,o=1==(i>>e&1),t.set(r,s,o,!0),t.set(s,r,o,!0)}(w,e),function(t,e){const n=t.size;let i=-1,r=n-1,s=7,o=0;for(let a=n-1;a>0;a-=2)for(6===a&&a--;;){for(let n=0;n<2;n++)if(!t.isReserved(r,a-n)){let i=!1;o<e.length&&(i=1==(e[o]>>>s&1)),t.set(r,a-n,i),s--,-1===s&&(o++,s=7)}if(r+=i,r<0||n<=r){r-=i,i=-i;break}}}(w,v),isNaN(r)&&(r=c.getBestMask(w,m.bind(null,w,n))),c.applyMask(r,w),m(w,n,r),{modules:w,version:e,errorCorrectionLevel:n,maskPattern:r,segments:f}}e.create=function(t,e){if(void 0===t||""===t)throw new Error("No input text");let n,s,o=r.M;return void 0!==e&&(o=r.from(e.errorCorrectionLevel,r.M),n=d.from(e.version),s=c.from(e.maskPattern),e.toSJISFunc&&i.setToSJISFunction(e.toSJISFunc)),y(t,n,o,s)}},6291:(t,e,n)=>{const i=n(6143);function r(t){this.genPoly=void 0,this.degree=t,this.degree&&this.initialize(this.degree)}r.prototype.initialize=function(t){this.degree=t,this.genPoly=i.generateECPolynomial(this.degree)},r.prototype.encode=function(t){if(!this.genPoly)throw new Error("Encoder not initialized");const e=new Uint8Array(t.length+this.degree);e.set(t);const n=i.mod(e,this.genPoly),r=this.degree-n.length;if(r>0){const t=new Uint8Array(this.degree);return t.set(n,r),t}return n},t.exports=r},7007:(t,e)=>{const n="[0-9]+";let i="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";i=i.replace(/u/g,"\\u");const r="(?:(?![A-Z0-9 $%*+\\-./:]|"+i+")(?:.|[\r\n]))+";e.KANJI=new RegExp(i,"g"),e.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),e.BYTE=new RegExp(r,"g"),e.NUMERIC=new RegExp(n,"g"),e.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const s=new RegExp("^"+i+"$"),o=new RegExp("^"+n+"$"),a=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");e.testKanji=function(t){return s.test(t)},e.testNumeric=function(t){return o.test(t)},e.testAlphanumeric=function(t){return a.test(t)}},6130:(t,e,n)=>{const i=n(6910),r=n(1085),s=n(8260),o=n(3424),a=n(5442),l=n(7007),c=n(242),u=n(5987);function h(t){return unescape(encodeURIComponent(t)).length}function d(t,e,n){const i=[];let r;for(;null!==(r=t.exec(n));)i.push({data:r[0],index:r.index,mode:e,length:r[0].length});return i}function f(t){const e=d(l.NUMERIC,i.NUMERIC,t),n=d(l.ALPHANUMERIC,i.ALPHANUMERIC,t);let r,s;return c.isKanjiModeEnabled()?(r=d(l.BYTE,i.BYTE,t),s=d(l.KANJI,i.KANJI,t)):(r=d(l.BYTE_KANJI,i.BYTE,t),s=[]),e.concat(n,r,s).sort((function(t,e){return t.index-e.index})).map((function(t){return{data:t.data,mode:t.mode,length:t.length}}))}function p(t,e){switch(e){case i.NUMERIC:return r.getBitsLength(t);case i.ALPHANUMERIC:return s.getBitsLength(t);case i.KANJI:return a.getBitsLength(t);case i.BYTE:return o.getBitsLength(t)}}function g(t,e){let n;const l=i.getBestModeForData(t);if(n=i.from(e,l),n!==i.BYTE&&n.bit<l.bit)throw new Error('"'+t+'" cannot be encoded with mode '+i.toString(n)+".\n Suggested mode is: "+i.toString(l));switch(n!==i.KANJI||c.isKanjiModeEnabled()||(n=i.BYTE),n){case i.NUMERIC:return new r(t);case i.ALPHANUMERIC:return new s(t);case i.KANJI:return new a(t);case i.BYTE:return new o(t)}}e.fromArray=function(t){return t.reduce((function(t,e){return"string"==typeof e?t.push(g(e,null)):e.data&&t.push(g(e.data,e.mode)),t}),[])},e.fromString=function(t,n){const r=function(t){const e=[];for(let n=0;n<t.length;n++){const r=t[n];switch(r.mode){case i.NUMERIC:e.push([r,{data:r.data,mode:i.ALPHANUMERIC,length:r.length},{data:r.data,mode:i.BYTE,length:r.length}]);break;case i.ALPHANUMERIC:e.push([r,{data:r.data,mode:i.BYTE,length:r.length}]);break;case i.KANJI:e.push([r,{data:r.data,mode:i.BYTE,length:h(r.data)}]);break;case i.BYTE:e.push([{data:r.data,mode:i.BYTE,length:h(r.data)}])}}return e}(f(t,c.isKanjiModeEnabled())),s=function(t,e){const n={},r={start:{}};let s=["start"];for(let o=0;o<t.length;o++){const a=t[o],l=[];for(let t=0;t<a.length;t++){const c=a[t],u=""+o+t;l.push(u),n[u]={node:c,lastCount:0},r[u]={};for(let t=0;t<s.length;t++){const o=s[t];n[o]&&n[o].node.mode===c.mode?(r[o][u]=p(n[o].lastCount+c.length,c.mode)-p(n[o].lastCount,c.mode),n[o].lastCount+=c.length):(n[o]&&(n[o].lastCount=c.length),r[o][u]=p(c.length,c.mode)+4+i.getCharCountIndicator(c.mode,e))}}s=l}for(let t=0;t<s.length;t++)r[s[t]].end=0;return{map:r,table:n}}(r,n),o=u.find_path(s.map,"start","end"),a=[];for(let t=1;t<o.length-1;t++)a.push(s.table[o[t]].node);return e.fromArray(a.reduce((function(t,e){const n=t.length-1>=0?t[t.length-1]:null;return n&&n.mode===e.mode?(t[t.length-1].data+=e.data,t):(t.push(e),t)}),[]))},e.rawSplit=function(t){return e.fromArray(f(t,c.isKanjiModeEnabled()))}},242:(t,e)=>{let n;const i=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];e.getSymbolSize=function(t){if(!t)throw new Error('"version" cannot be null or undefined');if(t<1||t>40)throw new Error('"version" should be in range from 1 to 40');return 4*t+17},e.getSymbolTotalCodewords=function(t){return i[t]},e.getBCHDigit=function(t){let e=0;for(;0!==t;)e++,t>>>=1;return e},e.setToSJISFunction=function(t){if("function"!=typeof t)throw new Error('"toSJISFunc" is not a valid function.');n=t},e.isKanjiModeEnabled=function(){return void 0!==n},e.toSJIS=function(t){return n(t)}},3114:(t,e)=>{e.isValid=function(t){return!isNaN(t)&&t>=1&&t<=40}},3103:(t,e,n)=>{const i=n(242),r=n(5393),s=n(4908),o=n(6910),a=n(3114),l=i.getBCHDigit(7973);function c(t,e){return o.getCharCountIndicator(t,e)+4}function u(t,e){let n=0;return t.forEach((function(t){const i=c(t.mode,e);n+=i+t.getBitsLength()})),n}e.from=function(t,e){return a.isValid(t)?parseInt(t,10):e},e.getCapacity=function(t,e,n){if(!a.isValid(t))throw new Error("Invalid QR Code version");void 0===n&&(n=o.BYTE);const s=8*(i.getSymbolTotalCodewords(t)-r.getTotalCodewordsCount(t,e));if(n===o.MIXED)return s;const l=s-c(n,t);switch(n){case o.NUMERIC:return Math.floor(l/10*3);case o.ALPHANUMERIC:return Math.floor(l/11*2);case o.KANJI:return Math.floor(l/13);case o.BYTE:default:return Math.floor(l/8)}},e.getBestVersionForData=function(t,n){let i;const r=s.from(n,s.M);if(Array.isArray(t)){if(t.length>1)return function(t,n){for(let i=1;i<=40;i++)if(u(t,i)<=e.getCapacity(i,n,o.MIXED))return i}(t,r);if(0===t.length)return 1;i=t[0]}else i=t;return function(t,n,i){for(let r=1;r<=40;r++)if(n<=e.getCapacity(r,i,t))return r}(i.mode,i.getLength(),r)},e.getEncodedBits=function(t){if(!a.isValid(t)||t<7)throw new Error("Invalid QR Code version");let e=t<<12;for(;i.getBCHDigit(e)-l>=0;)e^=7973<<i.getBCHDigit(e)-l;return t<<12|e}},6907:(t,e,n)=>{const i=n(5169);e.render=function(t,e,n){let r=n,s=e;void 0!==r||e&&e.getContext||(r=e,e=void 0),e||(s=function(){try{return document.createElement("canvas")}catch(t){throw new Error("You need to specify a canvas element")}}()),r=i.getOptions(r);const o=i.getImageWidth(t.modules.size,r),a=s.getContext("2d"),l=a.createImageData(o,o);return i.qrToImageData(l.data,t,r),function(t,e,n){t.clearRect(0,0,e.width,e.height),e.style||(e.style={}),e.height=n,e.width=n,e.style.height=n+"px",e.style.width=n+"px"}(a,s,o),a.putImageData(l,0,0),s},e.renderToDataURL=function(t,n,i){let r=i;void 0!==r||n&&n.getContext||(r=n,n=void 0),r||(r={});const s=e.render(t,n,r),o=r.type||"image/png",a=r.rendererOpts||{};return s.toDataURL(o,a.quality)}},3776:(t,e,n)=>{const i=n(5169);function r(t,e){const n=t.a/255,i=e+'="'+t.hex+'"';return n<1?i+" "+e+'-opacity="'+n.toFixed(2).slice(1)+'"':i}function s(t,e,n){let i=t+e;return void 0!==n&&(i+=" "+n),i}e.render=function(t,e,n){const o=i.getOptions(e),a=t.modules.size,l=t.modules.data,c=a+2*o.margin,u=o.color.light.a?"<path "+r(o.color.light,"fill")+' d="M0 0h'+c+"v"+c+'H0z"/>':"",h="<path "+r(o.color.dark,"stroke")+' d="'+function(t,e,n){let i="",r=0,o=!1,a=0;for(let l=0;l<t.length;l++){const c=Math.floor(l%e),u=Math.floor(l/e);c||o||(o=!0),t[l]?(a++,l>0&&c>0&&t[l-1]||(i+=o?s("M",c+n,.5+u+n):s("m",r,0),r=0,o=!1),c+1<e&&t[l+1]||(i+=s("h",a),a=0)):r++}return i}(l,a,o.margin)+'"/>',d='viewBox="0 0 '+c+" "+c+'"',f='<svg xmlns="http://www.w3.org/2000/svg" '+(o.width?'width="'+o.width+'" height="'+o.width+'" ':"")+d+' shape-rendering="crispEdges">'+u+h+"</svg>\n";return"function"==typeof n&&n(null,f),f}},5169:(t,e)=>{function n(t){if("number"==typeof t&&(t=t.toString()),"string"!=typeof t)throw new Error("Color should be defined as hex string");let e=t.slice().replace("#","").split("");if(e.length<3||5===e.length||e.length>8)throw new Error("Invalid hex color: "+t);3!==e.length&&4!==e.length||(e=Array.prototype.concat.apply([],e.map((function(t){return[t,t]})))),6===e.length&&e.push("F","F");const n=parseInt(e.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+e.slice(0,6).join("")}}e.getOptions=function(t){t||(t={}),t.color||(t.color={});const e=void 0===t.margin||null===t.margin||t.margin<0?4:t.margin,i=t.width&&t.width>=21?t.width:void 0,r=t.scale||4;return{width:i,scale:i?4:r,margin:e,color:{dark:n(t.color.dark||"#000000ff"),light:n(t.color.light||"#ffffffff")},type:t.type,rendererOpts:t.rendererOpts||{}}},e.getScale=function(t,e){return e.width&&e.width>=t+2*e.margin?e.width/(t+2*e.margin):e.scale},e.getImageWidth=function(t,n){const i=e.getScale(t,n);return Math.floor((t+2*n.margin)*i)},e.qrToImageData=function(t,n,i){const r=n.modules.size,s=n.modules.data,o=e.getScale(r,i),a=Math.floor((r+2*i.margin)*o),l=i.margin*o,c=[i.color.light,i.color.dark];for(let e=0;e<a;e++)for(let n=0;n<a;n++){let u=4*(e*a+n),h=i.color.light;e>=l&&n>=l&&e<a-l&&n<a-l&&(h=c[s[Math.floor((e-l)/o)*r+Math.floor((n-l)/o)]?1:0]),t[u++]=h.r,t[u++]=h.g,t[u++]=h.b,t[u]=h.a}}},3692:(t,e,n)=>{"use strict";var i;n.d(e,{Jb:()=>S,Ld:()=>T,YP:()=>C,dy:()=>b,sY:()=>V});const r=window,s=r.trustedTypes,o=s?s.createPolicy("lit-html",{createHTML:t=>t}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,u=`<${c}>`,h=document,d=()=>h.createComment(""),f=t=>null===t||"object"!=typeof t&&"function"!=typeof t,p=Array.isArray,g="[ \t\n\f\r]",m=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,y=/-->/g,v=/>/g,A=RegExp(`>|${g}(?:([^\\s"'>=/]+)(${g}*=${g}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),w=/'/g,E=/"/g,$=/^(?:script|style|textarea|title)$/i,_=t=>(e,...n)=>({_$litType$:t,strings:e,values:n}),b=_(1),C=_(2),S=Symbol.for("lit-noChange"),T=Symbol.for("lit-nothing"),P=new WeakMap,M=h.createTreeWalker(h,129,null,!1);function x(t,e){if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==o?o.createHTML(e):e}const N=(t,e)=>{const n=t.length-1,i=[];let r,s=2===e?"<svg>":"",o=m;for(let e=0;e<n;e++){const n=t[e];let c,h,d=-1,f=0;for(;f<n.length&&(o.lastIndex=f,h=o.exec(n),null!==h);)f=o.lastIndex,o===m?"!--"===h[1]?o=y:void 0!==h[1]?o=v:void 0!==h[2]?($.test(h[2])&&(r=RegExp("</"+h[2],"g")),o=A):void 0!==h[3]&&(o=A):o===A?">"===h[0]?(o=null!=r?r:m,d=-1):void 0===h[1]?d=-2:(d=o.lastIndex-h[2].length,c=h[1],o=void 0===h[3]?A:'"'===h[3]?E:w):o===E||o===w?o=A:o===y||o===v?o=m:(o=A,r=void 0);const p=o===A&&t[e+1].startsWith("/>")?" ":"";s+=o===m?n+u:d>=0?(i.push(c),n.slice(0,d)+a+n.slice(d)+l+p):n+l+(-2===d?(i.push(void 0),e):p)}return[x(t,s+(t[n]||"<?>")+(2===e?"</svg>":"")),i]};class R{constructor({strings:t,_$litType$:e},n){let i;this.parts=[];let r=0,o=0;const u=t.length-1,h=this.parts,[f,p]=N(t,e);if(this.el=R.createElement(f,n),M.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=M.nextNode())&&h.length<u;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith(a)||e.startsWith(l)){const n=p[o++];if(t.push(e),void 0!==n){const t=i.getAttribute(n.toLowerCase()+a).split(l),e=/([.?@])?(.*)/.exec(n);h.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?L:"?"===e[1]?O:"@"===e[1]?D:k})}else h.push({type:6,index:r})}for(const e of t)i.removeAttribute(e)}if($.test(i.tagName)){const t=i.textContent.split(l),e=t.length-1;if(e>0){i.textContent=s?s.emptyScript:"";for(let n=0;n<e;n++)i.append(t[n],d()),M.nextNode(),h.push({type:2,index:++r});i.append(t[e],d())}}}else if(8===i.nodeType)if(i.data===c)h.push({type:2,index:r});else{let t=-1;for(;-1!==(t=i.data.indexOf(l,t+1));)h.push({type:7,index:r}),t+=l.length-1}r++}}static createElement(t,e){const n=h.createElement("template");return n.innerHTML=t,n}}function B(t,e,n=t,i){var r,s,o,a;if(e===S)return e;let l=void 0!==i?null===(r=n._$Co)||void 0===r?void 0:r[i]:n._$Cl;const c=f(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(s=null==l?void 0:l._$AO)||void 0===s||s.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,n,i)),void 0!==i?(null!==(o=(a=n)._$Co)&&void 0!==o?o:a._$Co=[])[i]=l:n._$Cl=l),void 0!==l&&(e=B(t,l._$AS(t,e.values),l,i)),e}class U{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:n},parts:i}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:h).importNode(n,!0);M.currentNode=r;let s=M.nextNode(),o=0,a=0,l=i[0];for(;void 0!==l;){if(o===l.index){let e;2===l.type?e=new I(s,s.nextSibling,this,t):1===l.type?e=new l.ctor(s,l.name,l.strings,this,t):6===l.type&&(e=new z(s,this,t)),this._$AV.push(e),l=i[++a]}o!==(null==l?void 0:l.index)&&(s=M.nextNode(),o++)}return M.currentNode=h,r}v(t){let e=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(t,n,e),e+=n.strings.length-2):n._$AI(t[e])),e++}}class I{constructor(t,e,n,i){var r;this.type=2,this._$AH=T,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=n,this.options=i,this._$Cp=null===(r=null==i?void 0:i.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=B(this,t,e),f(t)?t===T||null==t||""===t?(this._$AH!==T&&this._$AR(),this._$AH=T):t!==this._$AH&&t!==S&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>p(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==T&&f(this._$AH)?this._$AA.nextSibling.data=t:this.$(h.createTextNode(t)),this._$AH=t}g(t){var e;const{values:n,_$litType$:i}=t,r="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=R.createElement(x(i.h,i.h[0]),this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.v(n);else{const t=new U(r,this),e=t.u(this.options);t.v(n),this.$(e),this._$AH=t}}_$AC(t){let e=P.get(t.strings);return void 0===e&&P.set(t.strings,e=new R(t)),e}T(t){p(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let n,i=0;for(const r of t)i===e.length?e.push(n=new I(this.k(d()),this.k(d()),this,this.options)):n=e[i],n._$AI(r),i++;i<e.length&&(this._$AR(n&&n._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class k{constructor(t,e,n,i,r){this.type=1,this._$AH=T,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=r,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=T}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,n,i){const r=this.strings;let s=!1;if(void 0===r)t=B(this,t,e,0),s=!f(t)||t!==this._$AH&&t!==S,s&&(this._$AH=t);else{const i=t;let o,a;for(t=r[0],o=0;o<r.length-1;o++)a=B(this,i[n+o],e,o),a===S&&(a=this._$AH[o]),s||(s=!f(a)||a!==this._$AH[o]),a===T?t=T:t!==T&&(t+=(null!=a?a:"")+r[o+1]),this._$AH[o]=a}s&&!i&&this.j(t)}j(t){t===T?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class L extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===T?void 0:t}}const H=s?s.emptyScript:"";class O extends k{constructor(){super(...arguments),this.type=4}j(t){t&&t!==T?this.element.setAttribute(this.name,H):this.element.removeAttribute(this.name)}}class D extends k{constructor(t,e,n,i,r){super(t,e,n,i,r),this.type=5}_$AI(t,e=this){var n;if((t=null!==(n=B(this,t,e,0))&&void 0!==n?n:T)===S)return;const i=this._$AH,r=t===T&&i!==T||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==T&&(i===T||r);r&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==n?n:this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,e,n){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(t){B(this,t)}}const j=r.litHtmlPolyfillSupport;null==j||j(R,I),(null!==(i=r.litHtmlVersions)&&void 0!==i?i:r.litHtmlVersions=[]).push("2.8.0");const V=(t,e,n)=>{var i,r;const s=null!==(i=null==n?void 0:n.renderBefore)&&void 0!==i?i:e;let o=s._$litPart$;if(void 0===o){const t=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:null;s._$litPart$=o=new I(e.insertBefore(d(),t),t,void 0,null!=n?n:{})}return o._$AI(t),o}},7408:(t,e,n)=>{"use strict";n.d(e,{Mo:()=>i,Cb:()=>o,SB:()=>a});const i=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:n,elements:i}=e;return{kind:n,elements:i,finisher(e){customElements.define(t,e)}}})(t,e),r=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,t)}},s=(t,e,n)=>{e.constructor.createProperty(n,t)};function o(t){return(e,n)=>void 0!==n?s(t,e,n):r(t,e)}function a(t){return o({...t,state:!0})}var l;null===(l=window.HTMLSlotElement)||void 0===l||l.prototype.assignedElements},623:(t,e,n)=>{"use strict";n.d(e,{$:()=>s});var i=n(3692);class r{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,n){this._$Ct=t,this._$AM=e,this._$Ci=n}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}const s=(o=class extends r{constructor(t){var e;if(super(t),1!==t.type||"class"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(t){return" "+Object.keys(t).filter((e=>t[e])).join(" ")+" "}update(t,[e]){var n,r;if(void 0===this.it){this.it=new Set,void 0!==t.strings&&(this.nt=new Set(t.strings.join(" ").split(/\s/).filter((t=>""!==t))));for(const t in e)e[t]&&!(null===(n=this.nt)||void 0===n?void 0:n.has(t))&&this.it.add(t);return this.render(e)}const s=t.element.classList;this.it.forEach((t=>{t in e||(s.remove(t),this.it.delete(t))}));for(const t in e){const n=!!e[t];n===this.it.has(t)||(null===(r=this.nt)||void 0===r?void 0:r.has(t))||(n?(s.add(t),this.it.add(t)):(s.remove(t),this.it.delete(t)))}return i.Jb}},(...t)=>({_$litDirective$:o,values:t}));var o},796:(t,e,n)=>{"use strict";n.d(e,{o:()=>r});var i=n(3692);const r=t=>null!=t?t:i.Ld},9392:(t,e,n)=>{"use strict";n.d(e,{oi:()=>_,iv:()=>l,dy:()=>$.dy,YP:()=>$.YP});const i=window,r=i.ShadowRoot&&(void 0===i.ShadyCSS||i.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class a{constructor(t,e,n){if(this._$cssResult$=!0,n!==s)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(r&&void 0===t){const n=void 0!==e&&1===e.length;n&&(t=o.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),n&&o.set(e,t))}return t}toString(){return this.cssText}}const l=(t,...e)=>{const n=1===t.length?t[0]:e.reduce(((e,n,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+t[i+1]),t[0]);return new a(n,t,s)},c=r?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const n of t.cssRules)e+=n.cssText;return(t=>new a("string"==typeof t?t:t+"",void 0,s))(e)})(t):t;var u;const h=window,d=h.trustedTypes,f=d?d.emptyScript:"",p=h.reactiveElementPolyfillSupport,g={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let n=t;switch(e){case Boolean:n=null!==t;break;case Number:n=null===t?null:Number(t);break;case Object:case Array:try{n=JSON.parse(t)}catch(t){n=null}}return n}},m=(t,e)=>e!==t&&(e==e||t==t),y={attribute:!0,type:String,converter:g,reflect:!1,hasChanged:m},v="finalized";class A extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,n)=>{const i=this._$Ep(n,e);void 0!==i&&(this._$Ev.set(i,n),t.push(i))})),t}static createProperty(t,e=y){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const n="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,n,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,n){return{get(){return this[e]},set(i){const r=this[t];this[e]=i,this.requestUpdate(t,r,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||y}static finalize(){if(this.hasOwnProperty(v))return!1;this[v]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const n of e)this.createProperty(n,t[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const n=new Set(t.flat(1/0).reverse());for(const t of n)e.unshift(c(t))}else void 0!==t&&e.push(c(t));return e}static _$Ep(t,e){const n=e.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof t?t.toLowerCase():void 0}_$Eu(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,n;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(n=t.hostConnected)||void 0===n||n.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{r?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const n=document.createElement("style"),r=i.litNonce;void 0!==r&&n.setAttribute("nonce",r),n.textContent=e.cssText,t.appendChild(n)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,n){this._$AK(t,n)}_$EO(t,e,n=y){var i;const r=this.constructor._$Ep(t,n);if(void 0!==r&&!0===n.reflect){const s=(void 0!==(null===(i=n.converter)||void 0===i?void 0:i.toAttribute)?n.converter:g).toAttribute(e,n.type);this._$El=t,null==s?this.removeAttribute(r):this.setAttribute(r,s),this._$El=null}}_$AK(t,e){var n;const i=this.constructor,r=i._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=i.getPropertyOptions(r),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(n=t.converter)||void 0===n?void 0:n.fromAttribute)?t.converter:g;this._$El=r,this[r]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,n){let i=!0;void 0!==t&&(((n=n||this.constructor.getPropertyOptions(t)).hasChanged||m)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===n.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,n))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const n=this._$AL;try{e=this.shouldUpdate(n),e?(this.willUpdate(n),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(n)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(n)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}A[v]=!0,A.elementProperties=new Map,A.elementStyles=[],A.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:A}),(null!==(u=h.reactiveElementVersions)&&void 0!==u?u:h.reactiveElementVersions=[]).push("1.6.3");var w,E,$=n(3692);class _ extends A{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const n=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=n.firstChild),n}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=(0,$.sY)(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return $.Jb}}_.finalized=!0,_._$litElement$=!0,null===(w=globalThis.litElementHydrateSupport)||void 0===w||w.call(globalThis,{LitElement:_});const b=globalThis.litElementPolyfillSupport;null==b||b({LitElement:_}),(null!==(E=globalThis.litElementVersions)&&void 0!==E?E:globalThis.litElementVersions=[]).push("3.3.3")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,