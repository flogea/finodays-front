/*! For license information please see 979.19680145ff9cbd20c98b.js.LICENSE.txt */
(self.webpackChunkfinodays_front=self.webpackChunkfinodays_front||[]).push([[979],{1050:(t,e,r)=>{"use strict";e.Xx=e._w=e.aP=e.KS=e.jQ=void 0;r(1416);const n=r(3350);r(7309);function i(t){const e=new Float64Array(16);if(t)for(let r=0;r<t.length;r++)e[r]=t[r];return e}e.jQ=64,e.KS=64,e.aP=32,new Uint8Array(32)[0]=9;const s=i(),o=i([1]),a=(i([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),i([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222])),c=i([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),u=i([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]);i([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(t,e){for(let r=0;r<16;r++)t[r]=0|e[r]}function l(t){let e=1;for(let r=0;r<16;r++){let n=t[r]+e+65535;e=Math.floor(n/65536),t[r]=n-65536*e}t[0]+=e-1+37*(e-1)}function p(t,e,r){const n=~(r-1);for(let r=0;r<16;r++){const i=n&(t[r]^e[r]);t[r]^=i,e[r]^=i}}function f(t,e){const r=i(),n=i();for(let t=0;t<16;t++)n[t]=e[t];l(n),l(n),l(n);for(let t=0;t<2;t++){r[0]=n[0]-65517;for(let t=1;t<15;t++)r[t]=n[t]-65535-(r[t-1]>>16&1),r[t-1]&=65535;r[15]=n[15]-32767-(r[14]>>16&1);const t=r[15]>>16&1;r[14]&=65535,p(n,r,1-t)}for(let e=0;e<16;e++)t[2*e]=255&n[e],t[2*e+1]=n[e]>>8}function d(t){const e=new Uint8Array(32);return f(e,t),1&e[0]}function g(t,e,r){for(let n=0;n<16;n++)t[n]=e[n]+r[n]}function y(t,e,r){for(let n=0;n<16;n++)t[n]=e[n]-r[n]}function v(t,e,r){let n,i,s=0,o=0,a=0,c=0,u=0,h=0,l=0,p=0,f=0,d=0,g=0,y=0,v=0,m=0,_=0,w=0,b=0,E=0,I=0,P=0,S=0,O=0,x=0,C=0,R=0,j=0,A=0,N=0,T=0,L=0,M=0,z=r[0],D=r[1],q=r[2],k=r[3],$=r[4],U=r[5],H=r[6],V=r[7],K=r[8],B=r[9],Z=r[10],F=r[11],W=r[12],G=r[13],J=r[14],Y=r[15];n=e[0],s+=n*z,o+=n*D,a+=n*q,c+=n*k,u+=n*$,h+=n*U,l+=n*H,p+=n*V,f+=n*K,d+=n*B,g+=n*Z,y+=n*F,v+=n*W,m+=n*G,_+=n*J,w+=n*Y,n=e[1],o+=n*z,a+=n*D,c+=n*q,u+=n*k,h+=n*$,l+=n*U,p+=n*H,f+=n*V,d+=n*K,g+=n*B,y+=n*Z,v+=n*F,m+=n*W,_+=n*G,w+=n*J,b+=n*Y,n=e[2],a+=n*z,c+=n*D,u+=n*q,h+=n*k,l+=n*$,p+=n*U,f+=n*H,d+=n*V,g+=n*K,y+=n*B,v+=n*Z,m+=n*F,_+=n*W,w+=n*G,b+=n*J,E+=n*Y,n=e[3],c+=n*z,u+=n*D,h+=n*q,l+=n*k,p+=n*$,f+=n*U,d+=n*H,g+=n*V,y+=n*K,v+=n*B,m+=n*Z,_+=n*F,w+=n*W,b+=n*G,E+=n*J,I+=n*Y,n=e[4],u+=n*z,h+=n*D,l+=n*q,p+=n*k,f+=n*$,d+=n*U,g+=n*H,y+=n*V,v+=n*K,m+=n*B,_+=n*Z,w+=n*F,b+=n*W,E+=n*G,I+=n*J,P+=n*Y,n=e[5],h+=n*z,l+=n*D,p+=n*q,f+=n*k,d+=n*$,g+=n*U,y+=n*H,v+=n*V,m+=n*K,_+=n*B,w+=n*Z,b+=n*F,E+=n*W,I+=n*G,P+=n*J,S+=n*Y,n=e[6],l+=n*z,p+=n*D,f+=n*q,d+=n*k,g+=n*$,y+=n*U,v+=n*H,m+=n*V,_+=n*K,w+=n*B,b+=n*Z,E+=n*F,I+=n*W,P+=n*G,S+=n*J,O+=n*Y,n=e[7],p+=n*z,f+=n*D,d+=n*q,g+=n*k,y+=n*$,v+=n*U,m+=n*H,_+=n*V,w+=n*K,b+=n*B,E+=n*Z,I+=n*F,P+=n*W,S+=n*G,O+=n*J,x+=n*Y,n=e[8],f+=n*z,d+=n*D,g+=n*q,y+=n*k,v+=n*$,m+=n*U,_+=n*H,w+=n*V,b+=n*K,E+=n*B,I+=n*Z,P+=n*F,S+=n*W,O+=n*G,x+=n*J,C+=n*Y,n=e[9],d+=n*z,g+=n*D,y+=n*q,v+=n*k,m+=n*$,_+=n*U,w+=n*H,b+=n*V,E+=n*K,I+=n*B,P+=n*Z,S+=n*F,O+=n*W,x+=n*G,C+=n*J,R+=n*Y,n=e[10],g+=n*z,y+=n*D,v+=n*q,m+=n*k,_+=n*$,w+=n*U,b+=n*H,E+=n*V,I+=n*K,P+=n*B,S+=n*Z,O+=n*F,x+=n*W,C+=n*G,R+=n*J,j+=n*Y,n=e[11],y+=n*z,v+=n*D,m+=n*q,_+=n*k,w+=n*$,b+=n*U,E+=n*H,I+=n*V,P+=n*K,S+=n*B,O+=n*Z,x+=n*F,C+=n*W,R+=n*G,j+=n*J,A+=n*Y,n=e[12],v+=n*z,m+=n*D,_+=n*q,w+=n*k,b+=n*$,E+=n*U,I+=n*H,P+=n*V,S+=n*K,O+=n*B,x+=n*Z,C+=n*F,R+=n*W,j+=n*G,A+=n*J,N+=n*Y,n=e[13],m+=n*z,_+=n*D,w+=n*q,b+=n*k,E+=n*$,I+=n*U,P+=n*H,S+=n*V,O+=n*K,x+=n*B,C+=n*Z,R+=n*F,j+=n*W,A+=n*G,N+=n*J,T+=n*Y,n=e[14],_+=n*z,w+=n*D,b+=n*q,E+=n*k,I+=n*$,P+=n*U,S+=n*H,O+=n*V,x+=n*K,C+=n*B,R+=n*Z,j+=n*F,A+=n*W,N+=n*G,T+=n*J,L+=n*Y,n=e[15],w+=n*z,b+=n*D,E+=n*q,I+=n*k,P+=n*$,S+=n*U,O+=n*H,x+=n*V,C+=n*K,R+=n*B,j+=n*Z,A+=n*F,N+=n*W,T+=n*G,L+=n*J,M+=n*Y,s+=38*b,o+=38*E,a+=38*I,c+=38*P,u+=38*S,h+=38*O,l+=38*x,p+=38*C,f+=38*R,d+=38*j,g+=38*A,y+=38*N,v+=38*T,m+=38*L,_+=38*M,i=1,n=s+i+65535,i=Math.floor(n/65536),s=n-65536*i,n=o+i+65535,i=Math.floor(n/65536),o=n-65536*i,n=a+i+65535,i=Math.floor(n/65536),a=n-65536*i,n=c+i+65535,i=Math.floor(n/65536),c=n-65536*i,n=u+i+65535,i=Math.floor(n/65536),u=n-65536*i,n=h+i+65535,i=Math.floor(n/65536),h=n-65536*i,n=l+i+65535,i=Math.floor(n/65536),l=n-65536*i,n=p+i+65535,i=Math.floor(n/65536),p=n-65536*i,n=f+i+65535,i=Math.floor(n/65536),f=n-65536*i,n=d+i+65535,i=Math.floor(n/65536),d=n-65536*i,n=g+i+65535,i=Math.floor(n/65536),g=n-65536*i,n=y+i+65535,i=Math.floor(n/65536),y=n-65536*i,n=v+i+65535,i=Math.floor(n/65536),v=n-65536*i,n=m+i+65535,i=Math.floor(n/65536),m=n-65536*i,n=_+i+65535,i=Math.floor(n/65536),_=n-65536*i,n=w+i+65535,i=Math.floor(n/65536),w=n-65536*i,s+=i-1+37*(i-1),i=1,n=s+i+65535,i=Math.floor(n/65536),s=n-65536*i,n=o+i+65535,i=Math.floor(n/65536),o=n-65536*i,n=a+i+65535,i=Math.floor(n/65536),a=n-65536*i,n=c+i+65535,i=Math.floor(n/65536),c=n-65536*i,n=u+i+65535,i=Math.floor(n/65536),u=n-65536*i,n=h+i+65535,i=Math.floor(n/65536),h=n-65536*i,n=l+i+65535,i=Math.floor(n/65536),l=n-65536*i,n=p+i+65535,i=Math.floor(n/65536),p=n-65536*i,n=f+i+65535,i=Math.floor(n/65536),f=n-65536*i,n=d+i+65535,i=Math.floor(n/65536),d=n-65536*i,n=g+i+65535,i=Math.floor(n/65536),g=n-65536*i,n=y+i+65535,i=Math.floor(n/65536),y=n-65536*i,n=v+i+65535,i=Math.floor(n/65536),v=n-65536*i,n=m+i+65535,i=Math.floor(n/65536),m=n-65536*i,n=_+i+65535,i=Math.floor(n/65536),_=n-65536*i,n=w+i+65535,i=Math.floor(n/65536),w=n-65536*i,s+=i-1+37*(i-1),t[0]=s,t[1]=o,t[2]=a,t[3]=c,t[4]=u,t[5]=h,t[6]=l,t[7]=p,t[8]=f,t[9]=d,t[10]=g,t[11]=y,t[12]=v,t[13]=m,t[14]=_,t[15]=w}function m(t,e){v(t,e,e)}function _(t,e){const r=i(),n=i(),s=i(),o=i(),c=i(),u=i(),h=i(),l=i(),p=i();y(r,t[1],t[0]),y(p,e[1],e[0]),v(r,r,p),g(n,t[0],t[1]),g(p,e[0],e[1]),v(n,n,p),v(s,t[3],e[3]),v(s,s,a),v(o,t[2],e[2]),g(o,o,o),y(c,n,r),y(u,o,s),g(h,o,s),g(l,n,r),v(t[0],c,u),v(t[1],l,h),v(t[2],h,u),v(t[3],c,l)}function w(t,e,r){for(let n=0;n<4;n++)p(t[n],e[n],r)}function b(t,e){const r=i(),n=i(),s=i();(function(t,e){const r=i();let n;for(n=0;n<16;n++)r[n]=e[n];for(n=253;n>=0;n--)m(r,r),2!==n&&4!==n&&v(r,r,e);for(n=0;n<16;n++)t[n]=r[n]})(s,e[2]),v(r,e[0],s),v(n,e[1],s),f(t,n),t[31]^=d(r)<<7}function E(t,e){const r=[i(),i(),i(),i()];h(r[0],c),h(r[1],u),h(r[2],o),v(r[3],c,u),function(t,e,r){h(t[0],s),h(t[1],o),h(t[2],o),h(t[3],s);for(let n=255;n>=0;--n){const i=r[n/8|0]>>(7&n)&1;w(t,e,i),_(e,t),_(t,t),w(t,e,i)}}(t,r,e)}e._w=function(t){if(t.length!==e.aP)throw new Error(`ed25519: seed must be ${e.aP} bytes`);const r=(0,n.hash)(t);r[0]&=248,r[31]&=127,r[31]|=64;const s=new Uint8Array(32),o=[i(),i(),i(),i()];E(o,r),b(s,o);const a=new Uint8Array(64);return a.set(t),a.set(s,32),{publicKey:s,secretKey:a}};const I=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function P(t,e){let r,n,i,s;for(n=63;n>=32;--n){for(r=0,i=n-32,s=n-12;i<s;++i)e[i]+=r-16*e[n]*I[i-(n-32)],r=Math.floor((e[i]+128)/256),e[i]-=256*r;e[i]+=r,e[n]=0}for(r=0,i=0;i<32;i++)e[i]+=r-(e[31]>>4)*I[i],r=e[i]>>8,e[i]&=255;for(i=0;i<32;i++)e[i]-=r*I[i];for(n=0;n<32;n++)e[n+1]+=e[n]>>8,t[n]=255&e[n]}function S(t){const e=new Float64Array(64);for(let r=0;r<64;r++)e[r]=t[r];for(let e=0;e<64;e++)t[e]=0;P(t,e)}e.Xx=function(t,e){const r=new Float64Array(64),s=[i(),i(),i(),i()],o=(0,n.hash)(t.subarray(0,32));o[0]&=248,o[31]&=127,o[31]|=64;const a=new Uint8Array(64);a.set(o.subarray(32),32);const c=new n.SHA512;c.update(a.subarray(32)),c.update(e);const u=c.digest();c.clean(),S(u),E(s,u),b(a,s),c.reset(),c.update(a.subarray(0,32)),c.update(t.subarray(32)),c.update(e);const h=c.digest();S(h);for(let t=0;t<32;t++)r[t]=u[t];for(let t=0;t<32;t++)for(let e=0;e<32;e++)r[t+e]+=h[t]*o[e];return P(a.subarray(32),r),a}},3350:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(8099),i=r(7309);e.DIGEST_LENGTH=64,e.BLOCK_SIZE=128;var s=function(){function t(){this.digestLength=e.DIGEST_LENGTH,this.blockSize=e.BLOCK_SIZE,this._stateHi=new Int32Array(8),this._stateLo=new Int32Array(8),this._tempHi=new Int32Array(16),this._tempLo=new Int32Array(16),this._buffer=new Uint8Array(256),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this.reset()}return t.prototype._initState=function(){this._stateHi[0]=1779033703,this._stateHi[1]=3144134277,this._stateHi[2]=1013904242,this._stateHi[3]=2773480762,this._stateHi[4]=1359893119,this._stateHi[5]=2600822924,this._stateHi[6]=528734635,this._stateHi[7]=1541459225,this._stateLo[0]=4089235720,this._stateLo[1]=2227873595,this._stateLo[2]=4271175723,this._stateLo[3]=1595750129,this._stateLo[4]=2917565137,this._stateLo[5]=725511199,this._stateLo[6]=4215389547,this._stateLo[7]=327033209},t.prototype.reset=function(){return this._initState(),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this},t.prototype.clean=function(){i.wipe(this._buffer),i.wipe(this._tempHi),i.wipe(this._tempLo),this.reset()},t.prototype.update=function(t,r){if(void 0===r&&(r=t.length),this._finished)throw new Error("SHA512: can't update because hash was finished.");var n=0;if(this._bytesHashed+=r,this._bufferLength>0){for(;this._bufferLength<e.BLOCK_SIZE&&r>0;)this._buffer[this._bufferLength++]=t[n++],r--;this._bufferLength===this.blockSize&&(a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,this.blockSize),this._bufferLength=0)}for(r>=this.blockSize&&(n=a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,t,n,r),r%=this.blockSize);r>0;)this._buffer[this._bufferLength++]=t[n++],r--;return this},t.prototype.finish=function(t){if(!this._finished){var e=this._bytesHashed,r=this._bufferLength,i=e/536870912|0,s=e<<3,o=e%128<112?128:256;this._buffer[r]=128;for(var c=r+1;c<o-8;c++)this._buffer[c]=0;n.writeUint32BE(i,this._buffer,o-8),n.writeUint32BE(s,this._buffer,o-4),a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,o),this._finished=!0}for(c=0;c<this.digestLength/8;c++)n.writeUint32BE(this._stateHi[c],t,8*c),n.writeUint32BE(this._stateLo[c],t,8*c+4);return this},t.prototype.digest=function(){var t=new Uint8Array(this.digestLength);return this.finish(t),t},t.prototype.saveState=function(){if(this._finished)throw new Error("SHA256: cannot save finished state");return{stateHi:new Int32Array(this._stateHi),stateLo:new Int32Array(this._stateLo),buffer:this._bufferLength>0?new Uint8Array(this._buffer):void 0,bufferLength:this._bufferLength,bytesHashed:this._bytesHashed}},t.prototype.restoreState=function(t){return this._stateHi.set(t.stateHi),this._stateLo.set(t.stateLo),this._bufferLength=t.bufferLength,t.buffer&&this._buffer.set(t.buffer),this._bytesHashed=t.bytesHashed,this._finished=!1,this},t.prototype.cleanSavedState=function(t){i.wipe(t.stateHi),i.wipe(t.stateLo),t.buffer&&i.wipe(t.buffer),t.bufferLength=0,t.bytesHashed=0},t}();e.SHA512=s;var o=new Int32Array([1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591]);function a(t,e,r,i,s,a,c){for(var u,h,l,p,f,d,g,y,v=r[0],m=r[1],_=r[2],w=r[3],b=r[4],E=r[5],I=r[6],P=r[7],S=i[0],O=i[1],x=i[2],C=i[3],R=i[4],j=i[5],A=i[6],N=i[7];c>=128;){for(var T=0;T<16;T++){var L=8*T+a;t[T]=n.readUint32BE(s,L),e[T]=n.readUint32BE(s,L+4)}for(T=0;T<80;T++){var M,z,D=v,q=m,k=_,$=w,U=b,H=E,V=I,K=S,B=O,Z=x,F=C,W=R,G=j,J=A;if(f=65535&(h=N),d=h>>>16,g=65535&(u=P),y=u>>>16,f+=65535&(h=(R>>>14|b<<18)^(R>>>18|b<<14)^(b>>>9|R<<23)),d+=h>>>16,g+=65535&(u=(b>>>14|R<<18)^(b>>>18|R<<14)^(R>>>9|b<<23)),y+=u>>>16,f+=65535&(h=R&j^~R&A),d+=h>>>16,g+=65535&(u=b&E^~b&I),y+=u>>>16,u=o[2*T],f+=65535&(h=o[2*T+1]),d+=h>>>16,g+=65535&u,y+=u>>>16,u=t[T%16],d+=(h=e[T%16])>>>16,g+=65535&u,y+=u>>>16,g+=(d+=(f+=65535&h)>>>16)>>>16,f=65535&(h=p=65535&f|d<<16),d=h>>>16,g=65535&(u=l=65535&g|(y+=g>>>16)<<16),y=u>>>16,f+=65535&(h=(S>>>28|v<<4)^(v>>>2|S<<30)^(v>>>7|S<<25)),d+=h>>>16,g+=65535&(u=(v>>>28|S<<4)^(S>>>2|v<<30)^(S>>>7|v<<25)),y+=u>>>16,d+=(h=S&O^S&x^O&x)>>>16,g+=65535&(u=v&m^v&_^m&_),y+=u>>>16,M=65535&(g+=(d+=(f+=65535&h)>>>16)>>>16)|(y+=g>>>16)<<16,z=65535&f|d<<16,f=65535&(h=F),d=h>>>16,g=65535&(u=$),y=u>>>16,d+=(h=p)>>>16,g+=65535&(u=l),y+=u>>>16,m=D,_=q,w=k,b=$=65535&(g+=(d+=(f+=65535&h)>>>16)>>>16)|(y+=g>>>16)<<16,E=U,I=H,P=V,v=M,O=K,x=B,C=Z,R=F=65535&f|d<<16,j=W,A=G,N=J,S=z,T%16==15)for(L=0;L<16;L++)u=t[L],f=65535&(h=e[L]),d=h>>>16,g=65535&u,y=u>>>16,u=t[(L+9)%16],f+=65535&(h=e[(L+9)%16]),d+=h>>>16,g+=65535&u,y+=u>>>16,l=t[(L+1)%16],f+=65535&(h=((p=e[(L+1)%16])>>>1|l<<31)^(p>>>8|l<<24)^(p>>>7|l<<25)),d+=h>>>16,g+=65535&(u=(l>>>1|p<<31)^(l>>>8|p<<24)^l>>>7),y+=u>>>16,l=t[(L+14)%16],d+=(h=((p=e[(L+14)%16])>>>19|l<<13)^(l>>>29|p<<3)^(p>>>6|l<<26))>>>16,g+=65535&(u=(l>>>19|p<<13)^(p>>>29|l<<3)^l>>>6),y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,t[L]=65535&g|y<<16,e[L]=65535&f|d<<16}f=65535&(h=S),d=h>>>16,g=65535&(u=v),y=u>>>16,u=r[0],d+=(h=i[0])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[0]=v=65535&g|y<<16,i[0]=S=65535&f|d<<16,f=65535&(h=O),d=h>>>16,g=65535&(u=m),y=u>>>16,u=r[1],d+=(h=i[1])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[1]=m=65535&g|y<<16,i[1]=O=65535&f|d<<16,f=65535&(h=x),d=h>>>16,g=65535&(u=_),y=u>>>16,u=r[2],d+=(h=i[2])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[2]=_=65535&g|y<<16,i[2]=x=65535&f|d<<16,f=65535&(h=C),d=h>>>16,g=65535&(u=w),y=u>>>16,u=r[3],d+=(h=i[3])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[3]=w=65535&g|y<<16,i[3]=C=65535&f|d<<16,f=65535&(h=R),d=h>>>16,g=65535&(u=b),y=u>>>16,u=r[4],d+=(h=i[4])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[4]=b=65535&g|y<<16,i[4]=R=65535&f|d<<16,f=65535&(h=j),d=h>>>16,g=65535&(u=E),y=u>>>16,u=r[5],d+=(h=i[5])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[5]=E=65535&g|y<<16,i[5]=j=65535&f|d<<16,f=65535&(h=A),d=h>>>16,g=65535&(u=I),y=u>>>16,u=r[6],d+=(h=i[6])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[6]=I=65535&g|y<<16,i[6]=A=65535&f|d<<16,f=65535&(h=N),d=h>>>16,g=65535&(u=P),y=u>>>16,u=r[7],d+=(h=i[7])>>>16,g+=65535&u,y+=u>>>16,y+=(g+=(d+=(f+=65535&h)>>>16)>>>16)>>>16,r[7]=P=65535&g|y<<16,i[7]=N=65535&f|d<<16,a+=128,c-=128}return a}e.hash=function(t){var e=new s;e.update(t);var r=e.digest();return e.clean(),r}},926:(t,e,r)=>{"use strict";function n(){return(null===r.g||void 0===r.g?void 0:r.g.crypto)||(null===r.g||void 0===r.g?void 0:r.g.msCrypto)||{}}function i(){const t=n();return t.subtle||t.webkitSubtle}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowserCryptoAvailable=e.getSubtleCrypto=e.getBrowerCrypto=void 0,e.getBrowerCrypto=n,e.getSubtleCrypto=i,e.isBrowserCryptoAvailable=function(){return!!n()&&!!i()}},8618:(t,e)=>{"use strict";function r(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function n(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowser=e.isNode=e.isReactNative=void 0,e.isReactNative=r,e.isNode=n,e.isBrowser=function(){return!r()&&!n()}},1468:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(4308);n.__exportStar(r(926),e),n.__exportStar(r(8618),e)},4308:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__assign:()=>s,__asyncDelegator:()=>w,__asyncGenerator:()=>_,__asyncValues:()=>b,__await:()=>m,__awaiter:()=>h,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>O,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>f,__extends:()=>i,__generator:()=>l,__importDefault:()=>P,__importStar:()=>I,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>g,__rest:()=>o,__spread:()=>y,__spreadArrays:()=>v,__values:()=>d});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var s=function(){return s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};function o(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function a(t,e,r,n){var i,s=arguments.length,o=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,r,o):i(e,r))||o);return s>3&&o&&Object.defineProperty(e,r,o),o}function c(t,e){return function(r,n){e(r,n,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,r,n){return new(r||(r=Promise))((function(i,s){function o(t){try{c(n.next(t))}catch(t){s(t)}}function a(t){try{c(n.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}c((n=n.apply(t,e||[])).next())}))}function l(t,e){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function p(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function f(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(g(arguments[e]));return t}function v(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function _(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){s.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=i[t](e)).value instanceof m?Promise.resolve(r.value.v).then(c,u):h(s[0][2],r)}catch(t){h(s[0][3],t)}var r}function c(t){a("next",t)}function u(t){a("throw",t)}function h(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function w(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,i){e[n]=t[n]?function(e){return(r=!r)?{value:m(t[n](e)),done:"return"===n}:i?i(e):e}:i}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=d(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function I(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function P(t){return t&&t.__esModule?t:{default:t}}function S(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function O(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}},7979:(t,e,r)=>{"use strict";r.d(e,{EthereumProvider:()=>ki,OPTIONAL_EVENTS:()=>Oi,OPTIONAL_METHODS:()=>Pi});var n=r(7187),i=r.n(n),s=r(9795),o=r(5150),a=r(159),c=r(9107),u=r(8200);class h extends u.q{constructor(t){super(),this.opts=t,this.protocol="wc",this.version=2}}class l extends u.q{constructor(t,e){super(),this.core=t,this.logger=e,this.records=new Map}}class p{constructor(t,e){this.logger=t,this.core=e}}class f extends u.q{constructor(t,e){super(),this.relayer=t,this.logger=e}}class d extends u.q{constructor(t){super()}}class g{constructor(t,e,r,n){this.core=t,this.logger=e,this.name=r}}class y extends u.q{constructor(t,e){super(),this.relayer=t,this.logger=e}}class v extends u.q{constructor(t,e){super(),this.core=t,this.logger=e}}class m{constructor(t,e){this.projectId=t,this.logger=e}}class _{constructor(t){this.opts=t,this.protocol="wc",this.version=2}}class w{constructor(t){this.client=t}}const b=t=>JSON.stringify(t,((t,e)=>"bigint"==typeof e?e.toString()+"n":e));function E(t){if("string"!=typeof t)throw new Error("Cannot safe json parse value of type "+typeof t);try{return(t=>{const e=t.replace(/([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g,'$1"$2n"$3');return JSON.parse(e,((t,e)=>"string"==typeof e&&e.match(/^\d+n$/)?BigInt(e.substring(0,e.length-1)):e))})(t)}catch(e){return t}}function I(t){return"string"==typeof t?t:b(t)||""}var P=r(1050),S=r(1416),O=r(6736);const x="base64url",C="utf8",R=":",j="did",A="key",N="base58btc",T="z",L="K36";var M=r(605),z=r(2263),D=r(2217);function q(t){return(0,z.B)((0,D.m)(I(t),C),x)}function k(t){const e=(0,D.m)(L,N),r=T+(0,z.B)((0,M.z)([e,t]),N);return[j,A,r].join(R)}function $(t=(0,S.randomBytes)(32)){return P._w(t)}r(3014);var U=r(7466);const H="INTERNAL_ERROR",V="SERVER_ERROR",K=[-32700,-32600,-32601,-32602,-32603],B={PARSE_ERROR:{code:-32700,message:"Parse error"},INVALID_REQUEST:{code:-32600,message:"Invalid Request"},METHOD_NOT_FOUND:{code:-32601,message:"Method not found"},INVALID_PARAMS:{code:-32602,message:"Invalid params"},[H]:{code:-32603,message:"Internal error"},[V]:{code:-32e3,message:"Server error"}},Z=V;function F(t){return Object.keys(B).includes(t)?B[t]:B[Z]}function W(t,e,r){return t.message.includes("getaddrinfo ENOTFOUND")||t.message.includes("connect ECONNREFUSED")?new Error(`Unavailable ${r} RPC url at ${e}`):t}var G=r(1468);function J(t=3){return Date.now()*Math.pow(10,t)+Math.floor(Math.random()*Math.pow(10,t))}function Y(t=6){return BigInt(J(t))}function Q(t,e,r){return{id:r||J(),jsonrpc:"2.0",method:t,params:e}}function X(t,e){return{id:t,jsonrpc:"2.0",result:e}}function tt(t,e,r){return{id:t,jsonrpc:"2.0",error:et(e,r)}}function et(t,e){return void 0===t?F(H):("string"==typeof t&&(t=Object.assign(Object.assign({},F(V)),{message:t})),void 0!==e&&(t.data=e),r=t.code,K.includes(r)&&(t=function(t){return Object.values(B).find((e=>e.code===t))||B[Z]}(t.code)),t);var r}class rt{}class nt extends rt{constructor(){super()}}class it extends nt{constructor(t){super()}}function st(t,e){const r=function(t){const e=t.match(new RegExp(/^\w+:/,"gi"));if(e&&e.length)return e[0]}(t);return void 0!==r&&new RegExp(e).test(r)}function ot(t){return st(t,"^https?:")}function at(t){return st(t,"^wss?:")}function ct(t){return new RegExp("wss?://localhost(:d{2,5})?").test(t)}function ut(t){return"object"==typeof t&&"id"in t&&"jsonrpc"in t&&"2.0"===t.jsonrpc}function ht(t){return ut(t)&&"method"in t}function lt(t){return ut(t)&&(pt(t)||ft(t))}function pt(t){return"result"in t}function ft(t){return"error"in t}class dt extends it{constructor(t){super(t),this.events=new n.EventEmitter,this.hasRegisteredEventListeners=!1,this.connection=this.setConnection(t),this.connection.connected&&this.registerEventListeners()}async connect(t=this.connection){await this.open(t)}async disconnect(){await this.close()}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}async request(t,e){return this.requestStrict(Q(t.method,t.params||[],t.id||Y().toString()),e)}async requestStrict(t,e){return new Promise((async(r,n)=>{if(!this.connection.connected)try{await this.open()}catch(t){n(t)}this.events.on(`${t.id}`,(t=>{ft(t)?n(t.error):r(t.result)}));try{await this.connection.send(t,e)}catch(t){n(t)}}))}setConnection(t=this.connection){return t}onPayload(t){this.events.emit("payload",t),lt(t)?this.events.emit(`${t.id}`,t):this.events.emit("message",{type:t.method,data:t.params})}onClose(t){t&&3e3===t.code&&this.events.emit("error",new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason?`(${t.reason})`:""}`)),this.events.emit("disconnect")}async open(t=this.connection){this.connection===t&&this.connection.connected||(this.connection.connected&&this.close(),"string"==typeof t&&(await this.connection.open(t),t=this.connection),this.connection=this.setConnection(t),await this.connection.open(),this.registerEventListeners(),this.events.emit("connect"))}async close(){await this.connection.close()}registerEventListeners(){this.hasRegisteredEventListeners||(this.connection.on("payload",(t=>this.onPayload(t))),this.connection.on("close",(t=>this.onClose(t))),this.connection.on("error",(t=>this.events.emit("error",t))),this.connection.on("register_error",(t=>this.onClose())),this.hasRegisteredEventListeners=!0)}}const gt=t=>t.split("?")[0],yt="undefined"!=typeof WebSocket?WebSocket:void 0!==r.g&&void 0!==r.g.WebSocket?r.g.WebSocket:"undefined"!=typeof window&&void 0!==window.WebSocket?window.WebSocket:"undefined"!=typeof self&&void 0!==self.WebSocket?self.WebSocket:r(2030);var vt=r(2307),mt=r.n(vt),_t=function(t,e){if(t.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),n=0;n<r.length;n++)r[n]=255;for(var i=0;i<t.length;i++){var s=t.charAt(i),o=s.charCodeAt(0);if(255!==r[o])throw new TypeError(s+" is ambiguous");r[o]=i}var a=t.length,c=t.charAt(0),u=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function l(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return new Uint8Array;var e=0;if(" "!==t[e]){for(var n=0,i=0;t[e]===c;)n++,e++;for(var s=(t.length-e)*u+1>>>0,o=new Uint8Array(s);t[e];){var h=r[t.charCodeAt(e)];if(255===h)return;for(var l=0,p=s-1;(0!==h||l<i)&&-1!==p;p--,l++)h+=a*o[p]>>>0,o[p]=h%256>>>0,h=h/256>>>0;if(0!==h)throw new Error("Non-zero carry");i=l,e++}if(" "!==t[e]){for(var f=s-i;f!==s&&0===o[f];)f++;for(var d=new Uint8Array(n+(s-f)),g=n;f!==s;)d[g++]=o[f++];return d}}}return{encode:function(e){if(e instanceof Uint8Array||(ArrayBuffer.isView(e)?e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength):Array.isArray(e)&&(e=Uint8Array.from(e))),!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===e.length)return"";for(var r=0,n=0,i=0,s=e.length;i!==s&&0===e[i];)i++,r++;for(var o=(s-i)*h+1>>>0,u=new Uint8Array(o);i!==s;){for(var l=e[i],p=0,f=o-1;(0!==l||p<n)&&-1!==f;f--,p++)l+=256*u[f]>>>0,u[f]=l%a>>>0,l=l/a>>>0;if(0!==l)throw new Error("Non-zero carry");n=p,i++}for(var d=o-n;d!==o&&0===u[d];)d++;for(var g=c.repeat(r);d<o;++d)g+=t.charAt(u[d]);return g},decodeUnsafe:l,decode:function(t){var r=l(t);if(r)return r;throw new Error(`Non-${e} character`)}}};const wt=t=>{if(t instanceof Uint8Array&&"Uint8Array"===t.constructor.name)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);if(ArrayBuffer.isView(t))return new Uint8Array(t.buffer,t.byteOffset,t.byteLength);throw new Error("Unknown type, must be binary type")};class bt{constructor(t,e,r){this.name=t,this.prefix=e,this.baseEncode=r}encode(t){if(t instanceof Uint8Array)return`${this.prefix}${this.baseEncode(t)}`;throw Error("Unknown type, must be binary type")}}class Et{constructor(t,e,r){if(this.name=t,this.prefix=e,void 0===e.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=e.codePointAt(0),this.baseDecode=r}decode(t){if("string"==typeof t){if(t.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(t.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(t){return Pt(this,t)}}class It{constructor(t){this.decoders=t}or(t){return Pt(this,t)}decode(t){const e=t[0],r=this.decoders[e];if(r)return r.decode(t);throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const Pt=(t,e)=>new It({...t.decoders||{[t.prefix]:t},...e.decoders||{[e.prefix]:e}});class St{constructor(t,e,r,n){this.name=t,this.prefix=e,this.baseEncode=r,this.baseDecode=n,this.encoder=new bt(t,e,r),this.decoder=new Et(t,e,n)}encode(t){return this.encoder.encode(t)}decode(t){return this.decoder.decode(t)}}const Ot=({name:t,prefix:e,encode:r,decode:n})=>new St(t,e,r,n),xt=({prefix:t,name:e,alphabet:r})=>{const{encode:n,decode:i}=_t(r,e);return Ot({prefix:t,name:e,encode:n,decode:t=>wt(i(t))})},Ct=({name:t,prefix:e,bitsPerChar:r,alphabet:n})=>Ot({prefix:e,name:t,encode:t=>((t,e,r)=>{const n="="===e[e.length-1],i=(1<<r)-1;let s="",o=0,a=0;for(let n=0;n<t.length;++n)for(a=a<<8|t[n],o+=8;o>r;)o-=r,s+=e[i&a>>o];if(o&&(s+=e[i&a<<r-o]),n)for(;s.length*r&7;)s+="=";return s})(t,n,r),decode:e=>((t,e,r,n)=>{const i={};for(let t=0;t<e.length;++t)i[e[t]]=t;let s=t.length;for(;"="===t[s-1];)--s;const o=new Uint8Array(s*r/8|0);let a=0,c=0,u=0;for(let e=0;e<s;++e){const s=i[t[e]];if(void 0===s)throw new SyntaxError(`Non-${n} character`);c=c<<r|s,a+=r,a>=8&&(a-=8,o[u++]=255&c>>a)}if(a>=r||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o})(e,n,r,t)}),Rt=Ot({prefix:"\0",name:"identity",encode:t=>(t=>(new TextDecoder).decode(t))(t),decode:t=>(t=>(new TextEncoder).encode(t))(t)});var jt=Object.freeze({__proto__:null,identity:Rt});const At=Ct({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var Nt=Object.freeze({__proto__:null,base2:At});const Tt=Ct({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Lt=Object.freeze({__proto__:null,base8:Tt});const Mt=xt({prefix:"9",name:"base10",alphabet:"0123456789"});var zt=Object.freeze({__proto__:null,base10:Mt});const Dt=Ct({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),qt=Ct({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var kt=Object.freeze({__proto__:null,base16:Dt,base16upper:qt});const $t=Ct({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),Ut=Ct({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),Ht=Ct({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),Vt=Ct({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),Kt=Ct({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),Bt=Ct({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),Zt=Ct({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),Ft=Ct({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),Wt=Ct({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Gt=Object.freeze({__proto__:null,base32:$t,base32upper:Ut,base32pad:Ht,base32padupper:Vt,base32hex:Kt,base32hexupper:Bt,base32hexpad:Zt,base32hexpadupper:Ft,base32z:Wt});const Jt=xt({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Yt=xt({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Qt=Object.freeze({__proto__:null,base36:Jt,base36upper:Yt});const Xt=xt({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),te=xt({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var ee=Object.freeze({__proto__:null,base58btc:Xt,base58flickr:te});const re=Ct({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),ne=Ct({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),ie=Ct({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),se=Ct({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var oe=Object.freeze({__proto__:null,base64:re,base64pad:ne,base64url:ie,base64urlpad:se});const ae=Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"),ce=ae.reduce(((t,e,r)=>(t[r]=e,t)),[]),ue=ae.reduce(((t,e,r)=>(t[e.codePointAt(0)]=r,t)),[]),he=Ot({prefix:"🚀",name:"base256emoji",encode:function(t){return t.reduce(((t,e)=>t+ce[e]),"")},decode:function(t){const e=[];for(const r of t){const t=ue[r.codePointAt(0)];if(void 0===t)throw new Error(`Non-base256emoji character: ${r}`);e.push(t)}return new Uint8Array(e)}});var le=Object.freeze({__proto__:null,base256emoji:he}),pe=128,fe=-128,de=Math.pow(2,31),ge=Math.pow(2,7),ye=Math.pow(2,14),ve=Math.pow(2,21),me=Math.pow(2,28),_e=Math.pow(2,35),we=Math.pow(2,42),be=Math.pow(2,49),Ee=Math.pow(2,56),Ie=Math.pow(2,63),Pe=function t(e,r,n){r=r||[];for(var i=n=n||0;e>=de;)r[n++]=255&e|pe,e/=128;for(;e&fe;)r[n++]=255&e|pe,e>>>=7;return r[n]=0|e,t.bytes=n-i+1,r},Se=function(t){return t<ge?1:t<ye?2:t<ve?3:t<me?4:t<_e?5:t<we?6:t<be?7:t<Ee?8:t<Ie?9:10};const Oe=(t,e,r=0)=>(Pe(t,e,r),e),xe=t=>Se(t),Ce=(t,e)=>{const r=e.byteLength,n=xe(t),i=n+xe(r),s=new Uint8Array(i+r);return Oe(t,s,0),Oe(r,s,n),s.set(e,i),new Re(t,r,e,s)};class Re{constructor(t,e,r,n){this.code=t,this.size=e,this.digest=r,this.bytes=n}}const je=({name:t,code:e,encode:r})=>new Ae(t,e,r);class Ae{constructor(t,e,r){this.name=t,this.code=e,this.encode=r}digest(t){if(t instanceof Uint8Array){const e=this.encode(t);return e instanceof Uint8Array?Ce(this.code,e):e.then((t=>Ce(this.code,t)))}throw Error("Unknown type, must be binary type")}}const Ne=t=>async e=>new Uint8Array(await crypto.subtle.digest(t,e)),Te=je({name:"sha2-256",code:18,encode:Ne("SHA-256")}),Le=je({name:"sha2-512",code:19,encode:Ne("SHA-512")});Object.freeze({__proto__:null,sha256:Te,sha512:Le});const Me=wt,ze={code:0,name:"identity",encode:Me,digest:t=>Ce(0,Me(t))};Object.freeze({__proto__:null,identity:ze}),new TextEncoder,new TextDecoder;const De={...jt,...Nt,...Lt,...zt,...kt,...Gt,...Qt,...ee,...oe,...le};function qe(t){return null!=globalThis.Buffer?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):t}function ke(t,e,r,n){return{name:t,prefix:e,encoder:{name:t,prefix:e,encode:r},decoder:{decode:n}}}const $e=ke("utf8","u",(t=>"u"+new TextDecoder("utf8").decode(t)),(t=>(new TextEncoder).encode(t.substring(1)))),Ue=ke("ascii","a",(t=>{let e="a";for(let r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}),(t=>{const e=function(t=0){return null!=globalThis.Buffer&&null!=globalThis.Buffer.allocUnsafe?qe(globalThis.Buffer.allocUnsafe(t)):new Uint8Array(t)}((t=t.substring(1)).length);for(let r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e})),He={utf8:$e,"utf-8":$e,hex:De.base16,latin1:Ue,ascii:Ue,binary:Ue,...De},Ve="core",Ke=`wc@2:${Ve}:`,Be={database:":memory:"},Ze="client_ed25519_seed",Fe=O.ONE_DAY,We=O.SIX_HOURS,Ge="wss://relay.walletconnect.com",Je="wss://relay.walletconnect.org",Ye="relayer_message",Qe="relayer_message_ack",Xe="relayer_connect",tr="relayer_disconnect",er="relayer_connection_stalled",rr="relayer_transport_closed",nr="relayer_publish",ir="disconnect",sr=O.ONE_SECOND/2,or="subscription_created",ar="subscription_deleted",cr="subscription_resubscribed",ur=1e3*O.FIVE_SECONDS,hr={wc_pairingDelete:{req:{ttl:O.ONE_DAY,prompt:!1,tag:1e3},res:{ttl:O.ONE_DAY,prompt:!1,tag:1001}},wc_pairingPing:{req:{ttl:O.THIRTY_SECONDS,prompt:!1,tag:1002},res:{ttl:O.THIRTY_SECONDS,prompt:!1,tag:1003}},unregistered_method:{req:{ttl:O.ONE_DAY,prompt:!1,tag:0},res:{ttl:O.ONE_DAY,prompt:!1,tag:0}}},lr="history_created",pr="history_updated",fr="history_deleted",dr="expirer_created",gr="expirer_deleted",yr="expirer_expired",vr="verify-api",mr="https://verify.walletconnect.com";class _r{constructor(t,e){this.core=t,this.logger=e,this.keychain=new Map,this.name="keychain",this.version="0.3",this.initialized=!1,this.storagePrefix=Ke,this.init=async()=>{if(!this.initialized){const t=await this.getKeyChain();typeof t<"u"&&(this.keychain=t),this.initialized=!0}},this.has=t=>(this.isInitialized(),this.keychain.has(t)),this.set=async(t,e)=>{this.isInitialized(),this.keychain.set(t,e),await this.persist()},this.get=t=>{this.isInitialized();const e=this.keychain.get(t);if(typeof e>"u"){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`${this.name}: ${t}`);throw new Error(e)}return e},this.del=async t=>{this.isInitialized(),this.keychain.delete(t),await this.persist()},this.core=t,this.logger=(0,c.generateChildLogger)(e,this.name)}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setKeyChain(t){await this.core.storage.setItem(this.storageKey,(0,s.KC)(t))}async getKeyChain(){const t=await this.core.storage.getItem(this.storageKey);return typeof t<"u"?(0,s.IP)(t):void 0}async persist(){await this.setKeyChain(this.keychain)}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class wr{constructor(t,e,r){this.core=t,this.logger=e,this.name="crypto",this.initialized=!1,this.init=async()=>{this.initialized||(await this.keychain.init(),this.initialized=!0)},this.hasKeys=t=>(this.isInitialized(),this.keychain.has(t)),this.getClientId=async()=>(this.isInitialized(),k($(await this.getClientSeed()).publicKey)),this.generateKeyPair=()=>{this.isInitialized();const t=(0,s.Au)();return this.setPrivateKey(t.publicKey,t.privateKey)},this.signJWT=async t=>{this.isInitialized();const e=$(await this.getClientSeed()),r=(0,s.jd)(),n=Fe;return await async function(t,e,r,n,i=(0,O.fromMiliseconds)(Date.now())){const s={alg:"EdDSA",typ:"JWT"},o={iss:k(n.publicKey),sub:t,aud:e,iat:i,exp:i+r},a=(c={header:s,payload:o},(0,D.m)([q(c.header),q(c.payload)].join("."),"utf8"));var c;return function(t){return[q(t.header),q(t.payload),(e=t.signature,(0,z.B)(e,x))].join(".");var e}({header:s,payload:o,signature:P.Xx(n.secretKey,a)})}(r,t,n,e)},this.generateSharedKey=(t,e,r)=>{this.isInitialized();const n=this.getPrivateKey(t),i=(0,s.m$)(n,e);return this.setSymKey(i,r)},this.setSymKey=async(t,e)=>{this.isInitialized();const r=e||(0,s.Ym)(t);return await this.keychain.set(r,t),r},this.deleteKeyPair=async t=>{this.isInitialized(),await this.keychain.del(t)},this.deleteSymKey=async t=>{this.isInitialized(),await this.keychain.del(t)},this.encode=async(t,e,r)=>{this.isInitialized();const n=(0,s.EN)(r),i=I(e);if((0,s.Q8)(n)){const e=n.senderPublicKey,r=n.receiverPublicKey;t=await this.generateSharedKey(e,r)}const o=this.getSymKey(t),{type:a,senderPublicKey:c}=n;return(0,s.HI)({type:a,symKey:o,message:i,senderPublicKey:c})},this.decode=async(t,e,r)=>{this.isInitialized();const n=(0,s.Ll)(e,r);if((0,s.Q8)(n)){const e=n.receiverPublicKey,r=n.senderPublicKey;t=await this.generateSharedKey(e,r)}try{const r=this.getSymKey(t);return E((0,s.pe)({symKey:r,encoded:e}))}catch(e){this.logger.error(`Failed to decode message from topic: '${t}', clientId: '${await this.getClientId()}'`),this.logger.error(e)}},this.getPayloadType=t=>{const e=(0,s.vB)(t);return(0,s.WG)(e.type)},this.getPayloadSenderPublicKey=t=>{const e=(0,s.vB)(t);return e.senderPublicKey?(0,U.BB)(e.senderPublicKey,s.AW):void 0},this.core=t,this.logger=(0,c.generateChildLogger)(e,this.name),this.keychain=r||new _r(this.core,this.logger)}get context(){return(0,c.getLoggerContext)(this.logger)}async setPrivateKey(t,e){return await this.keychain.set(t,e),t}getPrivateKey(t){return this.keychain.get(t)}async getClientSeed(){let t="";try{t=this.keychain.get(Ze)}catch{t=(0,s.jd)(),await this.keychain.set(Ze,t)}return function(t,e="utf8"){const r=He[e];if(!r)throw new Error(`Unsupported encoding "${e}"`);return"utf8"!==e&&"utf-8"!==e||null==globalThis.Buffer||null==globalThis.Buffer.from?r.decoder.decode(`${r.prefix}${t}`):qe(globalThis.Buffer.from(t,"utf-8"))}(t,"base16")}getSymKey(t){return this.keychain.get(t)}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class br extends p{constructor(t,e){super(t,e),this.logger=t,this.core=e,this.messages=new Map,this.name="messages",this.version="0.3",this.initialized=!1,this.storagePrefix=Ke,this.init=async()=>{if(!this.initialized){this.logger.trace("Initialized");try{const t=await this.getRelayerMessages();typeof t<"u"&&(this.messages=t),this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",size:this.messages.size})}catch(t){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(t)}finally{this.initialized=!0}}},this.set=async(t,e)=>{this.isInitialized();const r=(0,s.rj)(e);let n=this.messages.get(t);return typeof n>"u"&&(n={}),typeof n[r]<"u"||(n[r]=e,this.messages.set(t,n),await this.persist()),r},this.get=t=>{this.isInitialized();let e=this.messages.get(t);return typeof e>"u"&&(e={}),e},this.has=(t,e)=>(this.isInitialized(),typeof this.get(t)[(0,s.rj)(e)]<"u"),this.del=async t=>{this.isInitialized(),this.messages.delete(t),await this.persist()},this.logger=(0,c.generateChildLogger)(t,this.name),this.core=e}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setRelayerMessages(t){await this.core.storage.setItem(this.storageKey,(0,s.KC)(t))}async getRelayerMessages(){const t=await this.core.storage.getItem(this.storageKey);return typeof t<"u"?(0,s.IP)(t):void 0}async persist(){await this.setRelayerMessages(this.messages)}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class Er extends f{constructor(t,e){super(t,e),this.relayer=t,this.logger=e,this.events=new n.EventEmitter,this.name="publisher",this.queue=new Map,this.publishTimeout=(0,O.toMiliseconds)(O.TEN_SECONDS),this.queueTimeout=(0,O.toMiliseconds)(O.FIVE_SECONDS),this.needsTransportRestart=!1,this.publish=async(t,e,r)=>{this.logger.debug("Publishing Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:t,message:e,opts:r}});try{const n=r?.ttl||We,i=(0,s._H)(r),o=r?.prompt||!1,a=r?.tag||0,c=r?.id||Y().toString(),u={topic:t,message:e,opts:{ttl:n,relay:i,prompt:o,tag:a,id:c}},h=setTimeout((()=>this.queue.set(c,u)),this.queueTimeout);try{await await(0,s.hF)(this.rpcPublish(t,e,n,i,o,a,c),this.publishTimeout),clearTimeout(h),this.relayer.events.emit(nr,u)}catch{return this.logger.debug("Publishing Payload stalled"),void(this.needsTransportRestart=!0)}this.logger.debug("Successfully Published Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:t,message:e,opts:r}})}catch(t){throw this.logger.debug("Failed to Publish Payload"),this.logger.error(t),t}},this.on=(t,e)=>{this.events.on(t,e)},this.once=(t,e)=>{this.events.once(t,e)},this.off=(t,e)=>{this.events.off(t,e)},this.removeListener=(t,e)=>{this.events.removeListener(t,e)},this.relayer=t,this.logger=(0,c.generateChildLogger)(e,this.name),this.registerEventListeners()}get context(){return(0,c.getLoggerContext)(this.logger)}rpcPublish(t,e,r,n,i,o,a){var c,u,h,l;const p={method:(0,s.cO)(n.protocol).publish,params:{topic:t,message:e,ttl:r,prompt:i,tag:o},id:a};return(0,s.o8)(null==(c=p.params)?void 0:c.prompt)&&(null==(u=p.params)||delete u.prompt),(0,s.o8)(null==(h=p.params)?void 0:h.tag)&&(null==(l=p.params)||delete l.tag),this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"message",direction:"outgoing",request:p}),this.relayer.request(p)}onPublish(t){this.queue.delete(t)}checkQueue(){this.queue.forEach((async t=>{const{topic:e,message:r,opts:n}=t;await this.publish(e,r,n)}))}registerEventListeners(){this.relayer.core.heartbeat.on(a.HEARTBEAT_EVENTS.pulse,(()=>{if(this.needsTransportRestart)return this.needsTransportRestart=!1,void this.relayer.events.emit(er);this.checkQueue()})),this.relayer.on(Qe,(t=>{this.onPublish(t.id.toString())}))}}class Ir{constructor(){this.map=new Map,this.set=(t,e)=>{const r=this.get(t);this.exists(t,e)||this.map.set(t,[...r,e])},this.get=t=>this.map.get(t)||[],this.exists=(t,e)=>this.get(t).includes(e),this.delete=(t,e)=>{if(typeof e>"u")return void this.map.delete(t);if(!this.map.has(t))return;const r=this.get(t);if(!this.exists(t,e))return;const n=r.filter((t=>t!==e));n.length?this.map.set(t,n):this.map.delete(t)},this.clear=()=>{this.map.clear()}}get topics(){return Array.from(this.map.keys())}}var Pr=Object.defineProperty,Sr=Object.defineProperties,Or=Object.getOwnPropertyDescriptors,xr=Object.getOwnPropertySymbols,Cr=Object.prototype.hasOwnProperty,Rr=Object.prototype.propertyIsEnumerable,jr=(t,e,r)=>e in t?Pr(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Ar=(t,e)=>{for(var r in e||(e={}))Cr.call(e,r)&&jr(t,r,e[r]);if(xr)for(var r of xr(e))Rr.call(e,r)&&jr(t,r,e[r]);return t},Nr=(t,e)=>Sr(t,Or(e));class Tr extends y{constructor(t,e){super(t,e),this.relayer=t,this.logger=e,this.subscriptions=new Map,this.topicMap=new Ir,this.events=new n.EventEmitter,this.name="subscription",this.version="0.3",this.pending=new Map,this.cached=[],this.initialized=!1,this.pendingSubscriptionWatchLabel="pending_sub_watch_label",this.pollingInterval=20,this.storagePrefix=Ke,this.subscribeTimeout=1e4,this.restartInProgress=!1,this.batchSubscribeTopicsLimit=500,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restart(),this.registerEventListeners(),this.onEnable(),this.clientId=await this.relayer.core.crypto.getClientId())},this.subscribe=async(t,e)=>{await this.restartToComplete(),this.isInitialized(),this.logger.debug("Subscribing Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:t,opts:e}});try{const r=(0,s._H)(e),n={topic:t,relay:r};this.pending.set(t,n);const i=await this.rpcSubscribe(t,r);return this.onSubscribe(i,n),this.logger.debug("Successfully Subscribed Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:t,opts:e}}),i}catch(t){throw this.logger.debug("Failed to Subscribe Topic"),this.logger.error(t),t}},this.unsubscribe=async(t,e)=>{await this.restartToComplete(),this.isInitialized(),typeof e?.id<"u"?await this.unsubscribeById(t,e.id,e):await this.unsubscribeByTopic(t,e)},this.isSubscribed=async t=>!!this.topics.includes(t)||await new Promise(((e,r)=>{const n=new O.Watch;n.start(this.pendingSubscriptionWatchLabel);const i=setInterval((()=>{!this.pending.has(t)&&this.topics.includes(t)&&(clearInterval(i),n.stop(this.pendingSubscriptionWatchLabel),e(!0)),n.elapsed(this.pendingSubscriptionWatchLabel)>=ur&&(clearInterval(i),n.stop(this.pendingSubscriptionWatchLabel),r(new Error("Subscription resolution timeout")))}),this.pollingInterval)})).catch((()=>!1)),this.on=(t,e)=>{this.events.on(t,e)},this.once=(t,e)=>{this.events.once(t,e)},this.off=(t,e)=>{this.events.off(t,e)},this.removeListener=(t,e)=>{this.events.removeListener(t,e)},this.restart=async()=>{this.restartInProgress=!0,await this.restore(),await this.reset(),this.restartInProgress=!1},this.relayer=t,this.logger=(0,c.generateChildLogger)(e,this.name),this.clientId=""}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.subscriptions.size}get ids(){return Array.from(this.subscriptions.keys())}get values(){return Array.from(this.subscriptions.values())}get topics(){return this.topicMap.topics}hasSubscription(t,e){let r=!1;try{r=this.getSubscription(t).topic===e}catch{}return r}onEnable(){this.cached=[],this.initialized=!0}onDisable(){this.cached=this.values,this.subscriptions.clear(),this.topicMap.clear()}async unsubscribeByTopic(t,e){const r=this.topicMap.get(t);await Promise.all(r.map((async r=>await this.unsubscribeById(t,r,e))))}async unsubscribeById(t,e,r){this.logger.debug("Unsubscribing Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:t,id:e,opts:r}});try{const n=(0,s._H)(r);await this.rpcUnsubscribe(t,e,n);const i=(0,s.D6)("USER_DISCONNECTED",`${this.name}, ${t}`);await this.onUnsubscribe(t,e,i),this.logger.debug("Successfully Unsubscribed Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:t,id:e,opts:r}})}catch(t){throw this.logger.debug("Failed to Unsubscribe Topic"),this.logger.error(t),t}}async rpcSubscribe(t,e){const r={method:(0,s.cO)(e.protocol).subscribe,params:{topic:t}};this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:r});try{await await(0,s.hF)(this.relayer.request(r),this.subscribeTimeout)}catch{this.logger.debug("Outgoing Relay Subscribe Payload stalled"),this.relayer.events.emit(er)}return(0,s.rj)(t+this.clientId)}async rpcBatchSubscribe(t){if(!t.length)return;const e=t[0].relay,r={method:(0,s.cO)(e.protocol).batchSubscribe,params:{topics:t.map((t=>t.topic))}};this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:r});try{return await await(0,s.hF)(this.relayer.request(r),this.subscribeTimeout)}catch{this.logger.debug("Outgoing Relay Payload stalled"),this.relayer.events.emit(er)}}rpcUnsubscribe(t,e,r){const n={method:(0,s.cO)(r.protocol).unsubscribe,params:{topic:t,id:e}};return this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:n}),this.relayer.request(n)}onSubscribe(t,e){this.setSubscription(t,Nr(Ar({},e),{id:t})),this.pending.delete(e.topic)}onBatchSubscribe(t){t.length&&t.forEach((t=>{this.setSubscription(t.id,Ar({},t)),this.pending.delete(t.topic)}))}async onUnsubscribe(t,e,r){this.events.removeAllListeners(e),this.hasSubscription(e,t)&&this.deleteSubscription(e,r),await this.relayer.messages.del(t)}async setRelayerSubscriptions(t){await this.relayer.core.storage.setItem(this.storageKey,t)}async getRelayerSubscriptions(){return await this.relayer.core.storage.getItem(this.storageKey)}setSubscription(t,e){this.subscriptions.has(t)||(this.logger.debug("Setting subscription"),this.logger.trace({type:"method",method:"setSubscription",id:t,subscription:e}),this.addSubscription(t,e))}addSubscription(t,e){this.subscriptions.set(t,Ar({},e)),this.topicMap.set(e.topic,t),this.events.emit(or,e)}getSubscription(t){this.logger.debug("Getting subscription"),this.logger.trace({type:"method",method:"getSubscription",id:t});const e=this.subscriptions.get(t);if(!e){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`${this.name}: ${t}`);throw new Error(e)}return e}deleteSubscription(t,e){this.logger.debug("Deleting subscription"),this.logger.trace({type:"method",method:"deleteSubscription",id:t,reason:e});const r=this.getSubscription(t);this.subscriptions.delete(t),this.topicMap.delete(r.topic,t),this.events.emit(ar,Nr(Ar({},r),{reason:e}))}async persist(){await this.setRelayerSubscriptions(this.values),this.events.emit("subscription_sync")}async reset(){if(this.cached.length){const t=Math.ceil(this.cached.length/this.batchSubscribeTopicsLimit);for(let e=0;e<t;e++){const t=this.cached.splice(0,this.batchSubscribeTopicsLimit);await this.batchSubscribe(t)}}this.events.emit(cr)}async restore(){try{const t=await this.getRelayerSubscriptions();if(typeof t>"u"||!t.length)return;if(this.subscriptions.size){const{message:t}=(0,s.Z7)("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`),new Error(t)}this.cached=t,this.logger.debug(`Successfully Restored subscriptions for ${this.name}`),this.logger.trace({type:"method",method:"restore",subscriptions:this.values})}catch(t){this.logger.debug(`Failed to Restore subscriptions for ${this.name}`),this.logger.error(t)}}async batchSubscribe(t){if(!t.length)return;const e=await this.rpcBatchSubscribe(t);(0,s.qt)(e)&&this.onBatchSubscribe(e.map(((e,r)=>Nr(Ar({},t[r]),{id:e}))))}async onConnect(){this.restartInProgress||(await this.restart(),this.onEnable())}onDisconnect(){this.onDisable()}async checkPending(){if(this.relayer.transportExplicitlyClosed)return;const t=[];this.pending.forEach((e=>{t.push(e)})),await this.batchSubscribe(t)}registerEventListeners(){this.relayer.core.heartbeat.on(a.HEARTBEAT_EVENTS.pulse,(async()=>{await this.checkPending()})),this.relayer.on(Xe,(async()=>{await this.onConnect()})),this.relayer.on(tr,(()=>{this.onDisconnect()})),this.events.on(or,(async t=>{const e=or;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,data:t}),await this.persist()})),this.events.on(ar,(async t=>{const e=ar;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,data:t}),await this.persist()}))}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}async restartToComplete(){this.restartInProgress&&await new Promise((t=>{const e=setInterval((()=>{this.restartInProgress||(clearInterval(e),t())}),this.pollingInterval)}))}}var Lr=Object.defineProperty,Mr=Object.getOwnPropertySymbols,zr=Object.prototype.hasOwnProperty,Dr=Object.prototype.propertyIsEnumerable,qr=(t,e,r)=>e in t?Lr(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r;class kr extends d{constructor(t){super(t),this.protocol="wc",this.version=2,this.events=new n.EventEmitter,this.name="relayer",this.transportExplicitlyClosed=!1,this.initialized=!1,this.reconnecting=!1,this.connectionStatusPollingInterval=20,this.staleConnectionErrors=["socket hang up","socket stalled"],this.request=async t=>{this.logger.debug("Publishing Request Payload");try{return await this.toEstablishConnection(),await this.provider.request(t)}catch(t){throw this.logger.debug("Failed to Publish Request"),this.logger.error(t),t}},this.core=t.core,this.logger=typeof t.logger<"u"&&"string"!=typeof t.logger?(0,c.generateChildLogger)(t.logger,this.name):(0,c.pino)((0,c.getDefaultLoggerOptions)({level:t.logger||"error"})),this.messages=new br(this.logger,t.core),this.subscriber=new Tr(this,this.logger),this.publisher=new Er(this,this.logger),this.relayUrl=t?.relayUrl||Ge,this.projectId=t.projectId,this.provider={}}async init(){this.logger.trace("Initialized"),await this.createProvider(),await Promise.all([this.messages.init(),this.subscriber.init()]);try{await this.transportOpen()}catch{this.logger.warn(`Connection via ${this.relayUrl} failed, attempting to connect via failover domain ${Je}...`),await this.restartTransport(Je)}this.registerEventListeners(),this.initialized=!0,setTimeout((async()=>{0===this.subscriber.topics.length&&(this.logger.info("No topics subscribed to after init, closing transport"),await this.transportClose(),this.transportExplicitlyClosed=!1)}),1e4)}get context(){return(0,c.getLoggerContext)(this.logger)}get connected(){return this.provider.connection.connected}get connecting(){return this.provider.connection.connecting}async publish(t,e,r){this.isInitialized(),await this.publisher.publish(t,e,r),await this.recordMessageEvent({topic:t,message:e,publishedAt:Date.now()})}async subscribe(t,e){var r;this.isInitialized();let n=(null==(r=this.subscriber.topicMap.get(t))?void 0:r[0])||"";return n||(await Promise.all([new Promise((e=>{this.subscriber.once(or,(r=>{r.topic===t&&e()}))})),new Promise((async r=>{n=await this.subscriber.subscribe(t,e),r()}))]),n)}async unsubscribe(t,e){this.isInitialized(),await this.subscriber.unsubscribe(t,e)}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}async transportClose(){this.transportExplicitlyClosed=!0,this.connected&&(await this.provider.disconnect(),this.events.emit(rr))}async transportOpen(t){if(this.transportExplicitlyClosed=!1,!this.reconnecting){this.relayUrl=t||this.relayUrl,this.reconnecting=!0;try{await Promise.all([new Promise((t=>{this.initialized||t(),this.subscriber.once(cr,(()=>{t()}))})),await Promise.race([new Promise((async(t,e)=>{await(0,s.hF)(this.provider.connect(),1e4,`Socket stalled when trying to connect to ${this.relayUrl}`).catch((t=>e(t))).then((()=>t())).finally((()=>this.removeListener(rr,this.rejectTransportOpen)))})),new Promise((t=>this.once(rr,this.rejectTransportOpen)))])])}catch(t){this.logger.error(t);const e=t;if(!this.isConnectionStalled(e.message))throw t;this.events.emit(rr)}finally{this.reconnecting=!1}}}async restartTransport(t){this.transportExplicitlyClosed||this.reconnecting||(this.relayUrl=t||this.relayUrl,this.connected&&await Promise.all([new Promise((t=>{this.provider.once(ir,(()=>{t()}))})),this.transportClose()]),await this.createProvider(),await this.transportOpen())}isConnectionStalled(t){return this.staleConnectionErrors.some((e=>t.includes(e)))}rejectTransportOpen(){throw new Error("Attempt to connect to relay via `transportOpen` has stalled. Retrying...")}async createProvider(){const t=await this.core.crypto.signJWT(this.relayUrl);this.provider=new dt(new class{constructor(t){if(this.url=t,this.events=new n.EventEmitter,this.registering=!1,!at(t))throw new Error(`Provided URL is not compatible with WebSocket connection: ${t}`);this.url=t}get connected(){return void 0!==this.socket}get connecting(){return this.registering}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}async open(t=this.url){await this.register(t)}async close(){return new Promise(((t,e)=>{void 0!==this.socket?(this.socket.onclose=e=>{this.onClose(e),t()},this.socket.close()):e(new Error("Connection already closed"))}))}async send(t,e){void 0===this.socket&&(this.socket=await this.register());try{this.socket.send(I(t))}catch(e){this.onError(t.id,e)}}register(t=this.url){if(!at(t))throw new Error(`Provided URL is not compatible with WebSocket connection: ${t}`);if(this.registering){const t=this.events.getMaxListeners();return(this.events.listenerCount("register_error")>=t||this.events.listenerCount("open")>=t)&&this.events.setMaxListeners(t+1),new Promise(((t,e)=>{this.events.once("register_error",(t=>{this.resetMaxListeners(),e(t)})),this.events.once("open",(()=>{if(this.resetMaxListeners(),void 0===this.socket)return e(new Error("WebSocket connection is missing or invalid"));t(this.socket)}))}))}return this.url=t,this.registering=!0,new Promise(((e,n)=>{const i=(0,G.isReactNative)()?void 0:{rejectUnauthorized:!ct(t)},s=new yt(t,[],i);"undefined"!=typeof WebSocket||void 0!==r.g&&void 0!==r.g.WebSocket||"undefined"!=typeof window&&void 0!==window.WebSocket||"undefined"!=typeof self&&void 0!==self.WebSocket?s.onerror=t=>{const e=t;n(this.emitError(e.error))}:s.on("error",(t=>{n(this.emitError(t))})),s.onopen=()=>{this.onOpen(s),e(s)}}))}onOpen(t){t.onmessage=t=>this.onPayload(t),t.onclose=t=>this.onClose(t),this.socket=t,this.registering=!1,this.events.emit("open")}onClose(t){this.socket=void 0,this.registering=!1,this.events.emit("close",t)}onPayload(t){if(void 0===t.data)return;const e="string"==typeof t.data?E(t.data):t.data;this.events.emit("payload",e)}onError(t,e){const r=this.parseError(e),n=tt(t,r.message||r.toString());this.events.emit("payload",n)}parseError(t,e=this.url){return W(t,gt(e),"WS")}resetMaxListeners(){this.events.getMaxListeners()>10&&this.events.setMaxListeners(10)}emitError(t){const e=this.parseError(new Error((null==t?void 0:t.message)||`WebSocket connection failed for host: ${gt(this.url)}`));return this.events.emit("register_error",e),e}}((0,s.$0)({sdkVersion:"2.9.2",protocol:this.protocol,version:this.version,relayUrl:this.relayUrl,projectId:this.projectId,auth:t,useOnCloseEvent:!0}))),this.registerProviderListeners()}async recordMessageEvent(t){const{topic:e,message:r}=t;await this.messages.set(e,r)}async shouldIgnoreMessageEvent(t){const{topic:e,message:r}=t;if(!r||0===r.length)return this.logger.debug(`Ignoring invalid/empty message: ${r}`),!0;if(!await this.subscriber.isSubscribed(e))return this.logger.debug(`Ignoring message for non-subscribed topic ${e}`),!0;const n=this.messages.has(e,r);return n&&this.logger.debug(`Ignoring duplicate message: ${r}`),n}async onProviderPayload(t){if(this.logger.debug("Incoming Relay Payload"),this.logger.trace({type:"payload",direction:"incoming",payload:t}),ht(t)){if(!t.method.endsWith("_subscription"))return;const e=t.params,{topic:r,message:n,publishedAt:i}=e.data,s={topic:r,message:n,publishedAt:i};this.logger.debug("Emitting Relayer Payload"),this.logger.trace(((t,e)=>{for(var r in e||(e={}))zr.call(e,r)&&qr(t,r,e[r]);if(Mr)for(var r of Mr(e))Dr.call(e,r)&&qr(t,r,e[r]);return t})({type:"event",event:e.id},s)),this.events.emit(e.id,s),await this.acknowledgePayload(t),await this.onMessageEvent(s)}else lt(t)&&this.events.emit(Qe,t)}async onMessageEvent(t){await this.shouldIgnoreMessageEvent(t)||(this.events.emit(Ye,t),await this.recordMessageEvent(t))}async acknowledgePayload(t){const e=X(t.id,!0);await this.provider.connection.send(e)}registerProviderListeners(){this.provider.on("payload",(t=>this.onProviderPayload(t))),this.provider.on("connect",(()=>{this.events.emit(Xe)})),this.provider.on(ir,(()=>{this.onProviderDisconnect()})),this.provider.on("error",(t=>{this.logger.error(t),this.events.emit("relayer_error",t)}))}registerEventListeners(){this.events.on(er,(async()=>{await this.restartTransport()}))}onProviderDisconnect(){this.events.emit(tr),this.attemptToReconnect()}attemptToReconnect(){this.transportExplicitlyClosed||setTimeout((async()=>{await this.restartTransport()}),(0,O.toMiliseconds)(sr))}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}async toEstablishConnection(){if(!this.connected){if(this.connecting)return await new Promise((t=>{const e=setInterval((()=>{this.connected&&(clearInterval(e),t())}),this.connectionStatusPollingInterval)}));await this.restartTransport()}}}var $r=Object.defineProperty,Ur=Object.getOwnPropertySymbols,Hr=Object.prototype.hasOwnProperty,Vr=Object.prototype.propertyIsEnumerable,Kr=(t,e,r)=>e in t?$r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Br=(t,e)=>{for(var r in e||(e={}))Hr.call(e,r)&&Kr(t,r,e[r]);if(Ur)for(var r of Ur(e))Vr.call(e,r)&&Kr(t,r,e[r]);return t};class Zr extends g{constructor(t,e,r,n=Ke,i=void 0){super(t,e,r,n),this.core=t,this.logger=e,this.name=r,this.map=new Map,this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=Ke,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((t=>{this.getKey&&null!==t&&!(0,s.o8)(t)?this.map.set(this.getKey(t),t):(0,s.xW)(t)?this.map.set(t.id,t):(0,s.h1)(t)&&this.map.set(t.topic,t)})),this.cached=[],this.initialized=!0)},this.set=async(t,e)=>{this.isInitialized(),this.map.has(t)?await this.update(t,e):(this.logger.debug("Setting value"),this.logger.trace({type:"method",method:"set",key:t,value:e}),this.map.set(t,e),await this.persist())},this.get=t=>(this.isInitialized(),this.logger.debug("Getting value"),this.logger.trace({type:"method",method:"get",key:t}),this.getData(t)),this.getAll=t=>(this.isInitialized(),t?this.values.filter((e=>Object.keys(t).every((r=>mt()(e[r],t[r]))))):this.values),this.update=async(t,e)=>{this.isInitialized(),this.logger.debug("Updating value"),this.logger.trace({type:"method",method:"update",key:t,update:e});const r=Br(Br({},this.getData(t)),e);this.map.set(t,r),await this.persist()},this.delete=async(t,e)=>{this.isInitialized(),this.map.has(t)&&(this.logger.debug("Deleting value"),this.logger.trace({type:"method",method:"delete",key:t,reason:e}),this.map.delete(t),await this.persist())},this.logger=(0,c.generateChildLogger)(e,this.name),this.storagePrefix=n,this.getKey=i}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.map.size}get keys(){return Array.from(this.map.keys())}get values(){return Array.from(this.map.values())}async setDataStore(t){await this.core.storage.setItem(this.storageKey,t)}async getDataStore(){return await this.core.storage.getItem(this.storageKey)}getData(t){const e=this.map.get(t);if(!e){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`${this.name}: ${t}`);throw this.logger.error(e),new Error(e)}return e}async persist(){await this.setDataStore(this.values)}async restore(){try{const t=await this.getDataStore();if(typeof t>"u"||!t.length)return;if(this.map.size){const{message:t}=(0,s.Z7)("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=t,this.logger.debug(`Successfully Restored value for ${this.name}`),this.logger.trace({type:"method",method:"restore",value:this.values})}catch(t){this.logger.debug(`Failed to Restore value for ${this.name}`),this.logger.error(t)}}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class Fr{constructor(t,e){this.core=t,this.logger=e,this.name="pairing",this.version="0.3",this.events=new(i()),this.initialized=!1,this.storagePrefix=Ke,this.ignoredPayloadTypes=[s.rV],this.registeredMethods=[],this.init=async()=>{this.initialized||(await this.pairings.init(),await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.initialized=!0,this.logger.trace("Initialized"))},this.register=({methods:t})=>{this.isInitialized(),this.registeredMethods=[...new Set([...this.registeredMethods,...t])]},this.create=async()=>{this.isInitialized();const t=(0,s.jd)(),e=await this.core.crypto.setSymKey(t),r=(0,s.gn)(O.FIVE_MINUTES),n={protocol:"irn"},i={topic:e,expiry:r,relay:n,active:!1},o=(0,s.Bv)({protocol:this.core.protocol,version:this.core.version,topic:e,symKey:t,relay:n});return await this.pairings.set(e,i),await this.core.relayer.subscribe(e),this.core.expirer.set(e,r),{topic:e,uri:o}},this.pair=async t=>{this.isInitialized(),this.isValidPair(t);const{topic:e,symKey:r,relay:n}=(0,s.he)(t.uri);if(this.pairings.keys.includes(e))throw new Error(`Pairing already exists: ${e}`);if(this.core.crypto.hasKeys(e))throw new Error(`Keychain already exists: ${e}`);const i=(0,s.gn)(O.FIVE_MINUTES),o={topic:e,relay:n,expiry:i,active:!1};return await this.pairings.set(e,o),await this.core.crypto.setSymKey(r,e),await this.core.relayer.subscribe(e,{relay:n}),this.core.expirer.set(e,i),t.activatePairing&&await this.activate({topic:e}),o},this.activate=async({topic:t})=>{this.isInitialized();const e=(0,s.gn)(O.THIRTY_DAYS);await this.pairings.update(t,{active:!0,expiry:e}),this.core.expirer.set(t,e)},this.ping=async t=>{this.isInitialized(),await this.isValidPing(t);const{topic:e}=t;if(this.pairings.keys.includes(e)){const t=await this.sendRequest(e,"wc_pairingPing",{}),{done:r,resolve:n,reject:i}=(0,s.H1)();this.events.once((0,s.E0)("pairing_ping",t),(({error:t})=>{t?i(t):n()})),await r()}},this.updateExpiry=async({topic:t,expiry:e})=>{this.isInitialized(),await this.pairings.update(t,{expiry:e})},this.updateMetadata=async({topic:t,metadata:e})=>{this.isInitialized(),await this.pairings.update(t,{peerMetadata:e})},this.getPairings=()=>(this.isInitialized(),this.pairings.values),this.disconnect=async t=>{this.isInitialized(),await this.isValidDisconnect(t);const{topic:e}=t;this.pairings.keys.includes(e)&&(await this.sendRequest(e,"wc_pairingDelete",(0,s.D6)("USER_DISCONNECTED")),await this.deletePairing(e))},this.sendRequest=async(t,e,r)=>{const n=Q(e,r),i=await this.core.crypto.encode(t,n),s=hr[e].req;return this.core.history.set(t,n),this.core.relayer.publish(t,i,s),n.id},this.sendResult=async(t,e,r)=>{const n=X(t,r),i=await this.core.crypto.encode(e,n),s=await this.core.history.get(e,t),o=hr[s.request.method].res;await this.core.relayer.publish(e,i,o),await this.core.history.resolve(n)},this.sendError=async(t,e,r)=>{const n=tt(t,r),i=await this.core.crypto.encode(e,n),s=await this.core.history.get(e,t),o=hr[s.request.method]?hr[s.request.method].res:hr.unregistered_method.res;await this.core.relayer.publish(e,i,o),await this.core.history.resolve(n)},this.deletePairing=async(t,e)=>{await this.core.relayer.unsubscribe(t),await Promise.all([this.pairings.delete(t,(0,s.D6)("USER_DISCONNECTED")),this.core.crypto.deleteSymKey(t),e?Promise.resolve():this.core.expirer.del(t)])},this.cleanup=async()=>{const t=this.pairings.getAll().filter((t=>(0,s.Bw)(t.expiry)));await Promise.all(t.map((t=>this.deletePairing(t.topic))))},this.onRelayEventRequest=t=>{const{topic:e,payload:r}=t;switch(r.method){case"wc_pairingPing":return this.onPairingPingRequest(e,r);case"wc_pairingDelete":return this.onPairingDeleteRequest(e,r);default:return this.onUnknownRpcMethodRequest(e,r)}},this.onRelayEventResponse=async t=>{const{topic:e,payload:r}=t,n=(await this.core.history.get(e,r.id)).request.method;return"wc_pairingPing"===n?this.onPairingPingResponse(e,r):this.onUnknownRpcMethodResponse(n)},this.onPairingPingRequest=async(t,e)=>{const{id:r}=e;try{this.isValidPing({topic:t}),await this.sendResult(r,t,!0),this.events.emit("pairing_ping",{id:r,topic:t})}catch(e){await this.sendError(r,t,e),this.logger.error(e)}},this.onPairingPingResponse=(t,e)=>{const{id:r}=e;setTimeout((()=>{pt(e)?this.events.emit((0,s.E0)("pairing_ping",r),{}):ft(e)&&this.events.emit((0,s.E0)("pairing_ping",r),{error:e.error})}),500)},this.onPairingDeleteRequest=async(t,e)=>{const{id:r}=e;try{this.isValidDisconnect({topic:t}),await this.deletePairing(t),this.events.emit("pairing_delete",{id:r,topic:t})}catch(e){await this.sendError(r,t,e),this.logger.error(e)}},this.onUnknownRpcMethodRequest=async(t,e)=>{const{id:r,method:n}=e;try{if(this.registeredMethods.includes(n))return;const e=(0,s.D6)("WC_METHOD_UNSUPPORTED",n);await this.sendError(r,t,e),this.logger.error(e)}catch(e){await this.sendError(r,t,e),this.logger.error(e)}},this.onUnknownRpcMethodResponse=t=>{this.registeredMethods.includes(t)||this.logger.error((0,s.D6)("WC_METHOD_UNSUPPORTED",t))},this.isValidPair=t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`pair() params: ${t}`);throw new Error(e)}if(!(0,s.jv)(t.uri)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`pair() uri: ${t.uri}`);throw new Error(e)}},this.isValidPing=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`ping() params: ${t}`);throw new Error(e)}const{topic:e}=t;await this.isValidPairingTopic(e)},this.isValidDisconnect=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`disconnect() params: ${t}`);throw new Error(e)}const{topic:e}=t;await this.isValidPairingTopic(e)},this.isValidPairingTopic=async t=>{if(!(0,s.M_)(t,!1)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`pairing topic should be a string: ${t}`);throw new Error(e)}if(!this.pairings.keys.includes(t)){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`pairing topic doesn't exist: ${t}`);throw new Error(e)}if((0,s.Bw)(this.pairings.get(t).expiry)){await this.deletePairing(t);const{message:e}=(0,s.Z7)("EXPIRED",`pairing topic: ${t}`);throw new Error(e)}},this.core=t,this.logger=(0,c.generateChildLogger)(e,this.name),this.pairings=new Zr(this.core,this.logger,this.name,this.storagePrefix)}get context(){return(0,c.getLoggerContext)(this.logger)}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}registerRelayerEvents(){this.core.relayer.on(Ye,(async t=>{const{topic:e,message:r}=t;if(!this.pairings.keys.includes(e)||this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(r)))return;const n=await this.core.crypto.decode(e,r);try{ht(n)?(this.core.history.set(e,n),this.onRelayEventRequest({topic:e,payload:n})):lt(n)&&(await this.core.history.resolve(n),await this.onRelayEventResponse({topic:e,payload:n}),this.core.history.delete(e,n.id))}catch(t){this.logger.error(t)}}))}registerExpirerEvents(){this.core.expirer.on(yr,(async t=>{const{topic:e}=(0,s.iP)(t.target);e&&this.pairings.keys.includes(e)&&(await this.deletePairing(e,!0),this.events.emit("pairing_expire",{topic:e}))}))}}class Wr extends l{constructor(t,e){super(t,e),this.core=t,this.logger=e,this.records=new Map,this.events=new n.EventEmitter,this.name="history",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=Ke,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((t=>this.records.set(t.id,t))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.set=(t,e,r)=>{if(this.isInitialized(),this.logger.debug("Setting JSON-RPC request history record"),this.logger.trace({type:"method",method:"set",topic:t,request:e,chainId:r}),this.records.has(e.id))return;const n={id:e.id,topic:t,request:{method:e.method,params:e.params||null},chainId:r,expiry:(0,s.gn)(O.THIRTY_DAYS)};this.records.set(n.id,n),this.events.emit(lr,n)},this.resolve=async t=>{if(this.isInitialized(),this.logger.debug("Updating JSON-RPC response history record"),this.logger.trace({type:"method",method:"update",response:t}),!this.records.has(t.id))return;const e=await this.getRecord(t.id);typeof e.response>"u"&&(e.response=ft(t)?{error:t.error}:{result:t.result},this.records.set(e.id,e),this.events.emit(pr,e))},this.get=async(t,e)=>(this.isInitialized(),this.logger.debug("Getting record"),this.logger.trace({type:"method",method:"get",topic:t,id:e}),await this.getRecord(e)),this.delete=(t,e)=>{this.isInitialized(),this.logger.debug("Deleting record"),this.logger.trace({type:"method",method:"delete",id:e}),this.values.forEach((r=>{if(r.topic===t){if(typeof e<"u"&&r.id!==e)return;this.records.delete(r.id),this.events.emit(fr,r)}}))},this.exists=async(t,e)=>(this.isInitialized(),!!this.records.has(e)&&(await this.getRecord(e)).topic===t),this.on=(t,e)=>{this.events.on(t,e)},this.once=(t,e)=>{this.events.once(t,e)},this.off=(t,e)=>{this.events.off(t,e)},this.removeListener=(t,e)=>{this.events.removeListener(t,e)},this.logger=(0,c.generateChildLogger)(e,this.name)}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get size(){return this.records.size}get keys(){return Array.from(this.records.keys())}get values(){return Array.from(this.records.values())}get pending(){const t=[];return this.values.forEach((e=>{if(typeof e.response<"u")return;const r={topic:e.topic,request:Q(e.request.method,e.request.params,e.id),chainId:e.chainId};return t.push(r)})),t}async setJsonRpcRecords(t){await this.core.storage.setItem(this.storageKey,t)}async getJsonRpcRecords(){return await this.core.storage.getItem(this.storageKey)}getRecord(t){this.isInitialized();const e=this.records.get(t);if(!e){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`${this.name}: ${t}`);throw new Error(e)}return e}async persist(){await this.setJsonRpcRecords(this.values),this.events.emit("history_sync")}async restore(){try{const t=await this.getJsonRpcRecords();if(typeof t>"u"||!t.length)return;if(this.records.size){const{message:t}=(0,s.Z7)("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=t,this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",records:this.values})}catch(t){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(t)}}registerEventListeners(){this.events.on(lr,(t=>{const e=lr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,record:t}),this.persist()})),this.events.on(pr,(t=>{const e=pr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,record:t}),this.persist()})),this.events.on(fr,(t=>{const e=fr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,record:t}),this.persist()})),this.core.heartbeat.on(a.HEARTBEAT_EVENTS.pulse,(()=>{this.cleanup()}))}cleanup(){try{this.records.forEach((t=>{(0,O.toMiliseconds)(t.expiry||0)-Date.now()<=0&&(this.logger.info(`Deleting expired history log: ${t.id}`),this.delete(t.topic,t.id))}))}catch(t){this.logger.warn(t)}}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class Gr extends v{constructor(t,e){super(t,e),this.core=t,this.logger=e,this.expirations=new Map,this.events=new n.EventEmitter,this.name="expirer",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=Ke,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((t=>this.expirations.set(t.target,t))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.has=t=>{try{const e=this.formatTarget(t);return typeof this.getExpiration(e)<"u"}catch{return!1}},this.set=(t,e)=>{this.isInitialized();const r=this.formatTarget(t),n={target:r,expiry:e};this.expirations.set(r,n),this.checkExpiry(r,n),this.events.emit(dr,{target:r,expiration:n})},this.get=t=>{this.isInitialized();const e=this.formatTarget(t);return this.getExpiration(e)},this.del=t=>{if(this.isInitialized(),this.has(t)){const e=this.formatTarget(t),r=this.getExpiration(e);this.expirations.delete(e),this.events.emit(gr,{target:e,expiration:r})}},this.on=(t,e)=>{this.events.on(t,e)},this.once=(t,e)=>{this.events.once(t,e)},this.off=(t,e)=>{this.events.off(t,e)},this.removeListener=(t,e)=>{this.events.removeListener(t,e)},this.logger=(0,c.generateChildLogger)(e,this.name)}get context(){return(0,c.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.expirations.size}get keys(){return Array.from(this.expirations.keys())}get values(){return Array.from(this.expirations.values())}formatTarget(t){if("string"==typeof t)return(0,s.Z4)(t);if("number"==typeof t)return(0,s.Gq)(t);const{message:e}=(0,s.Z7)("UNKNOWN_TYPE","Target type: "+typeof t);throw new Error(e)}async setExpirations(t){await this.core.storage.setItem(this.storageKey,t)}async getExpirations(){return await this.core.storage.getItem(this.storageKey)}async persist(){await this.setExpirations(this.values),this.events.emit("expirer_sync")}async restore(){try{const t=await this.getExpirations();if(typeof t>"u"||!t.length)return;if(this.expirations.size){const{message:t}=(0,s.Z7)("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=t,this.logger.debug(`Successfully Restored expirations for ${this.name}`),this.logger.trace({type:"method",method:"restore",expirations:this.values})}catch(t){this.logger.debug(`Failed to Restore expirations for ${this.name}`),this.logger.error(t)}}getExpiration(t){const e=this.expirations.get(t);if(!e){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`${this.name}: ${t}`);throw this.logger.error(e),new Error(e)}return e}checkExpiry(t,e){const{expiry:r}=e;(0,O.toMiliseconds)(r)-Date.now()<=0&&this.expire(t,e)}expire(t,e){this.expirations.delete(t),this.events.emit(yr,{target:t,expiration:e})}checkExpirations(){this.core.relayer.connected&&this.expirations.forEach(((t,e)=>this.checkExpiry(e,t)))}registerEventListeners(){this.core.heartbeat.on(a.HEARTBEAT_EVENTS.pulse,(()=>this.checkExpirations())),this.events.on(dr,(t=>{const e=dr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,data:t}),this.persist()})),this.events.on(yr,(t=>{const e=yr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,data:t}),this.persist()})),this.events.on(gr,(t=>{const e=gr;this.logger.info(`Emitting ${e}`),this.logger.debug({type:"event",event:e,data:t}),this.persist()}))}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}}class Jr extends m{constructor(t,e){super(t,e),this.projectId=t,this.logger=e,this.name=vr,this.initialized=!1,this.init=async t=>{(0,s.b$)()||!(0,s.jU)()||(this.verifyUrl=t?.verifyUrl||mr,await this.createIframe())},this.register=async t=>{var e;if(this.initialized||await this.init(),this.iframe)try{null==(e=this.iframe.contentWindow)||e.postMessage(t.attestationId,this.verifyUrl),this.logger.info(`postMessage sent: ${t.attestationId} ${this.verifyUrl}`)}catch{}},this.resolve=async t=>{var e;if(this.isDevEnv)return"";this.logger.info(`resolving attestation: ${t.attestationId}`);const r=this.startAbortTimer(O.FIVE_SECONDS),n=await fetch(`${this.verifyUrl}/attestation/${t.attestationId}`,{signal:this.abortController.signal});return clearTimeout(r),200===n.status?null==(e=await n.json())?void 0:e.origin:""},this.createIframe=async()=>{try{await Promise.race([new Promise(((t,e)=>{if(document.getElementById(vr))return t();const r=document.createElement("iframe");r.setAttribute("id",vr),r.setAttribute("src",`${this.verifyUrl}/${this.projectId}`),r.style.display="none",r.addEventListener("load",(()=>{this.initialized=!0,t()})),r.addEventListener("error",(t=>{e(t)})),document.body.append(r),this.iframe=r})),new Promise((t=>{setTimeout((()=>t("iframe load timeout")),(0,O.toMiliseconds)(O.ONE_SECOND/2))}))])}catch(t){this.logger.error(`Verify iframe failed to load: ${this.verifyUrl}`),this.logger.error(t)}},this.logger=(0,c.generateChildLogger)(e,this.name),this.verifyUrl=mr,this.abortController=new AbortController,this.isDevEnv=(0,s.UG)()&&process.env.IS_VITEST}get context(){return(0,c.getLoggerContext)(this.logger)}startAbortTimer(t){return setTimeout((()=>this.abortController.abort()),(0,O.toMiliseconds)(t))}}var Yr=Object.defineProperty,Qr=Object.getOwnPropertySymbols,Xr=Object.prototype.hasOwnProperty,tn=Object.prototype.propertyIsEnumerable,en=(t,e,r)=>e in t?Yr(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,rn=(t,e)=>{for(var r in e||(e={}))Xr.call(e,r)&&en(t,r,e[r]);if(Qr)for(var r of Qr(e))tn.call(e,r)&&en(t,r,e[r]);return t};class nn extends h{constructor(t){super(t),this.protocol="wc",this.version=2,this.name=Ve,this.events=new n.EventEmitter,this.initialized=!1,this.on=(t,e)=>this.events.on(t,e),this.once=(t,e)=>this.events.once(t,e),this.off=(t,e)=>this.events.off(t,e),this.removeListener=(t,e)=>this.events.removeListener(t,e),this.projectId=t?.projectId,this.relayUrl=t?.relayUrl||Ge;const e=typeof t?.logger<"u"&&"string"!=typeof t?.logger?t.logger:(0,c.pino)((0,c.getDefaultLoggerOptions)({level:t?.logger||"error"}));this.logger=(0,c.generateChildLogger)(e,this.name),this.heartbeat=new a.HeartBeat,this.crypto=new wr(this,this.logger,t?.keychain),this.history=new Wr(this,this.logger),this.expirer=new Gr(this,this.logger),this.storage=null!=t&&t.storage?t.storage:new o.ZP(rn(rn({},Be),t?.storageOptions)),this.relayer=new kr({core:this,logger:this.logger,relayUrl:this.relayUrl,projectId:this.projectId}),this.pairing=new Fr(this,this.logger),this.verify=new Jr(this.projectId||"",this.logger)}static async init(t){const e=new nn(t);await e.initialize();const r=await e.crypto.getClientId();return await e.storage.setItem("WALLETCONNECT_CLIENT_ID",r),e}get context(){return(0,c.getLoggerContext)(this.logger)}async start(){this.initialized||await this.initialize()}async initialize(){this.logger.trace("Initialized");try{await this.crypto.init(),await this.history.init(),await this.expirer.init(),await this.relayer.init(),await this.heartbeat.init(),await this.pairing.init(),this.initialized=!0,this.logger.info("Core Initialization Success")}catch(t){throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`,t),this.logger.error(t.message),t}}}const sn=nn,on="client",an=`wc@2:${on}:`,cn=on,un="WALLETCONNECT_DEEPLINK_CHOICE",hn="Proposal expired",ln=O.SEVEN_DAYS,pn={wc_sessionPropose:{req:{ttl:O.FIVE_MINUTES,prompt:!0,tag:1100},res:{ttl:O.FIVE_MINUTES,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:O.FIVE_MINUTES,prompt:!1,tag:1102},res:{ttl:O.FIVE_MINUTES,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:O.ONE_DAY,prompt:!1,tag:1104},res:{ttl:O.ONE_DAY,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:O.ONE_DAY,prompt:!1,tag:1106},res:{ttl:O.ONE_DAY,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:O.FIVE_MINUTES,prompt:!0,tag:1108},res:{ttl:O.FIVE_MINUTES,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:O.FIVE_MINUTES,prompt:!0,tag:1110},res:{ttl:O.FIVE_MINUTES,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:O.ONE_DAY,prompt:!1,tag:1112},res:{ttl:O.ONE_DAY,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:O.THIRTY_SECONDS,prompt:!1,tag:1114},res:{ttl:O.THIRTY_SECONDS,prompt:!1,tag:1115}}},fn={min:O.FIVE_MINUTES,max:O.SEVEN_DAYS},dn="idle",gn="active",yn=["wc_sessionPropose","wc_sessionRequest","wc_authRequest"];var vn=Object.defineProperty,mn=Object.defineProperties,_n=Object.getOwnPropertyDescriptors,wn=Object.getOwnPropertySymbols,bn=Object.prototype.hasOwnProperty,En=Object.prototype.propertyIsEnumerable,In=(t,e,r)=>e in t?vn(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Pn=(t,e)=>{for(var r in e||(e={}))bn.call(e,r)&&In(t,r,e[r]);if(wn)for(var r of wn(e))En.call(e,r)&&In(t,r,e[r]);return t},Sn=(t,e)=>mn(t,_n(e));class On extends w{constructor(t){super(t),this.name="engine",this.events=new(i()),this.initialized=!1,this.ignoredPayloadTypes=[s.rV],this.requestQueue={state:dn,requests:[]},this.requestQueueDelay=O.ONE_SECOND,this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(pn)}),this.initialized=!0,setTimeout((()=>{this.requestQueue.requests=this.getPendingSessionRequests(),this.processRequestQueue()}),(0,O.toMiliseconds)(this.requestQueueDelay)))},this.connect=async t=>{this.isInitialized();const e=Sn(Pn({},t),{requiredNamespaces:t.requiredNamespaces||{},optionalNamespaces:t.optionalNamespaces||{}});await this.isValidConnect(e);const{pairingTopic:r,requiredNamespaces:n,optionalNamespaces:i,sessionProperties:o,relays:a}=e;let c,u=r,h=!1;if(u&&(h=this.client.core.pairing.pairings.get(u).active),!u||!h){const{topic:t,uri:e}=await this.client.core.pairing.create();u=t,c=e}const l=await this.client.core.crypto.generateKeyPair(),p=Pn({requiredNamespaces:n,optionalNamespaces:i,relays:a??[{protocol:"irn"}],proposer:{publicKey:l,metadata:this.client.metadata}},o&&{sessionProperties:o}),{reject:f,resolve:d,done:g}=(0,s.H1)(O.FIVE_MINUTES,hn);if(this.events.once((0,s.E0)("session_connect"),(async({error:t,session:e})=>{if(t)f(t);else if(e){e.self.publicKey=l;const t=Sn(Pn({},e),{requiredNamespaces:e.requiredNamespaces,optionalNamespaces:e.optionalNamespaces});await this.client.session.set(e.topic,t),await this.setExpiry(e.topic,e.expiry),u&&await this.client.core.pairing.updateMetadata({topic:u,metadata:e.peer.metadata}),d(t)}})),!u){const{message:t}=(0,s.Z7)("NO_MATCHING_KEY",`connect() pairing topic: ${u}`);throw new Error(t)}const y=await this.sendRequest(u,"wc_sessionPropose",p),v=(0,s.gn)(O.FIVE_MINUTES);return await this.setProposal(y,Pn({id:y,expiry:v},p)),{uri:c,approval:g}},this.pair=async t=>(this.isInitialized(),await this.client.core.pairing.pair(t)),this.approve=async t=>{this.isInitialized(),await this.isValidApprove(t);const{id:e,relayProtocol:r,namespaces:n,sessionProperties:i}=t,o=this.client.proposal.get(e);let{pairingTopic:a,proposer:c,requiredNamespaces:u,optionalNamespaces:h}=o;a=a||"",(0,s.L5)(u)||(u=(0,s.fc)(n,"approve()"));const l=await this.client.core.crypto.generateKeyPair(),p=c.publicKey,f=await this.client.core.crypto.generateSharedKey(l,p);a&&e&&(await this.client.core.pairing.updateMetadata({topic:a,metadata:c.metadata}),await this.sendResult(e,a,{relay:{protocol:r??"irn"},responderPublicKey:l}),await this.client.proposal.delete(e,(0,s.D6)("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:a}));const d=Pn({relay:{protocol:r??"irn"},namespaces:n,requiredNamespaces:u,optionalNamespaces:h,pairingTopic:a,controller:{publicKey:l,metadata:this.client.metadata},expiry:(0,s.gn)(ln)},i&&{sessionProperties:i});await this.client.core.relayer.subscribe(f),await this.sendRequest(f,"wc_sessionSettle",d);const g=Sn(Pn({},d),{topic:f,pairingTopic:a,acknowledged:!1,self:d.controller,peer:{publicKey:c.publicKey,metadata:c.metadata},controller:l});return await this.client.session.set(f,g),await this.setExpiry(f,(0,s.gn)(ln)),{topic:f,acknowledged:()=>new Promise((t=>setTimeout((()=>t(this.client.session.get(f))),500)))}},this.reject=async t=>{this.isInitialized(),await this.isValidReject(t);const{id:e,reason:r}=t,{pairingTopic:n}=this.client.proposal.get(e);n&&(await this.sendError(e,n,r),await this.client.proposal.delete(e,(0,s.D6)("USER_DISCONNECTED")))},this.update=async t=>{this.isInitialized(),await this.isValidUpdate(t);const{topic:e,namespaces:r}=t,n=await this.sendRequest(e,"wc_sessionUpdate",{namespaces:r}),{done:i,resolve:o,reject:a}=(0,s.H1)();return this.events.once((0,s.E0)("session_update",n),(({error:t})=>{t?a(t):o()})),await this.client.session.update(e,{namespaces:r}),{acknowledged:i}},this.extend=async t=>{this.isInitialized(),await this.isValidExtend(t);const{topic:e}=t,r=await this.sendRequest(e,"wc_sessionExtend",{}),{done:n,resolve:i,reject:o}=(0,s.H1)();return this.events.once((0,s.E0)("session_extend",r),(({error:t})=>{t?o(t):i()})),await this.setExpiry(e,(0,s.gn)(ln)),{acknowledged:n}},this.request=async t=>{this.isInitialized(),await this.isValidRequest(t);const{chainId:e,request:r,topic:n,expiry:i}=t,o=await this.sendRequest(n,"wc_sessionRequest",{request:r,chainId:e},i),{done:a,resolve:c,reject:u}=(0,s.H1)(i);this.events.once((0,s.E0)("session_request",o),(({error:t,result:e})=>{t?u(t):c(e)})),this.client.events.emit("session_request_sent",{topic:n,request:r,chainId:e,id:o});const h=await this.client.core.storage.getItem(un);return(0,s.Hh)({id:o,topic:n,wcDeepLink:h}),await a()},this.respond=async t=>{this.isInitialized(),await this.isValidRespond(t);const{topic:e,response:r}=t,{id:n}=r;pt(r)?await this.sendResult(n,e,r.result):ft(r)&&await this.sendError(n,e,r.error),this.cleanupAfterResponse(t)},this.ping=async t=>{this.isInitialized(),await this.isValidPing(t);const{topic:e}=t;if(this.client.session.keys.includes(e)){const t=await this.sendRequest(e,"wc_sessionPing",{}),{done:r,resolve:n,reject:i}=(0,s.H1)();this.events.once((0,s.E0)("session_ping",t),(({error:t})=>{t?i(t):n()})),await r()}else this.client.core.pairing.pairings.keys.includes(e)&&await this.client.core.pairing.ping({topic:e})},this.emit=async t=>{this.isInitialized(),await this.isValidEmit(t);const{topic:e,event:r,chainId:n}=t;await this.sendRequest(e,"wc_sessionEvent",{event:r,chainId:n})},this.disconnect=async t=>{this.isInitialized(),await this.isValidDisconnect(t);const{topic:e}=t;if(this.client.session.keys.includes(e)){const t=Y().toString();let r;const n=e=>{e?.id.toString()===t&&(this.client.core.relayer.events.removeListener(Qe,n),r())};await Promise.all([new Promise((t=>{r=t,this.client.core.relayer.on(Qe,n)})),this.sendRequest(e,"wc_sessionDelete",(0,s.D6)("USER_DISCONNECTED"),void 0,t)]),await this.deleteSession(e)}else await this.client.core.pairing.disconnect({topic:e})},this.find=t=>(this.isInitialized(),this.client.session.getAll().filter((e=>(0,s.Ih)(e,t)))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.cleanupDuplicatePairings=async t=>{if(t.pairingTopic)try{const e=this.client.core.pairing.pairings.get(t.pairingTopic),r=this.client.core.pairing.pairings.getAll().filter((r=>{var n,i;return(null==(n=r.peerMetadata)?void 0:n.url)&&(null==(i=r.peerMetadata)?void 0:i.url)===t.peer.metadata.url&&r.topic&&r.topic!==e.topic}));if(0===r.length)return;this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`),await Promise.all(r.map((t=>this.client.core.pairing.disconnect({topic:t.topic})))),this.client.logger.info("Duplicate pairings clean up finished")}catch(t){this.client.logger.error(t)}},this.deleteSession=async(t,e)=>{const{self:r}=this.client.session.get(t);await this.client.core.relayer.unsubscribe(t),this.client.session.delete(t,(0,s.D6)("USER_DISCONNECTED")),this.client.core.crypto.keychain.has(r.publicKey)&&await this.client.core.crypto.deleteKeyPair(r.publicKey),this.client.core.crypto.keychain.has(t)&&await this.client.core.crypto.deleteSymKey(t),e||this.client.core.expirer.del(t),this.client.core.storage.removeItem(un).catch((t=>this.client.logger.warn(t)))},this.deleteProposal=async(t,e)=>{await Promise.all([this.client.proposal.delete(t,(0,s.D6)("USER_DISCONNECTED")),e?Promise.resolve():this.client.core.expirer.del(t)])},this.deletePendingSessionRequest=async(t,e,r=!1)=>{await Promise.all([this.client.pendingRequest.delete(t,e),r?Promise.resolve():this.client.core.expirer.del(t)]),this.requestQueue.requests=this.requestQueue.requests.filter((e=>e.id!==t)),r&&(this.requestQueue.state=dn)},this.setExpiry=async(t,e)=>{this.client.session.keys.includes(t)&&await this.client.session.update(t,{expiry:e}),this.client.core.expirer.set(t,e)},this.setProposal=async(t,e)=>{await this.client.proposal.set(t,e),this.client.core.expirer.set(t,e.expiry)},this.setPendingSessionRequest=async t=>{const e=pn.wc_sessionRequest.req.ttl,{id:r,topic:n,params:i}=t;await this.client.pendingRequest.set(r,{id:r,topic:n,params:i}),e&&this.client.core.expirer.set(r,(0,s.gn)(e))},this.sendRequest=async(t,e,r,n,i)=>{const o=Q(e,r);if((0,s.jU)()&&yn.includes(e)){const t=(0,s.rj)(JSON.stringify(o));await this.client.core.verify.register({attestationId:t})}const a=await this.client.core.crypto.encode(t,o),c=pn[e].req;return n&&(c.ttl=n),i&&(c.id=i),this.client.core.history.set(t,o),this.client.core.relayer.publish(t,a,c),o.id},this.sendResult=async(t,e,r)=>{const n=X(t,r),i=await this.client.core.crypto.encode(e,n),s=await this.client.core.history.get(e,t),o=pn[s.request.method].res;this.client.core.relayer.publish(e,i,o),await this.client.core.history.resolve(n)},this.sendError=async(t,e,r)=>{const n=tt(t,r),i=await this.client.core.crypto.encode(e,n),s=await this.client.core.history.get(e,t),o=pn[s.request.method].res;this.client.core.relayer.publish(e,i,o),await this.client.core.history.resolve(n)},this.cleanup=async()=>{const t=[],e=[];this.client.session.getAll().forEach((e=>{(0,s.Bw)(e.expiry)&&t.push(e.topic)})),this.client.proposal.getAll().forEach((t=>{(0,s.Bw)(t.expiry)&&e.push(t.id)})),await Promise.all([...t.map((t=>this.deleteSession(t))),...e.map((t=>this.deleteProposal(t)))])},this.onRelayEventRequest=t=>{const{topic:e,payload:r}=t,n=r.method;switch(n){case"wc_sessionPropose":return this.onSessionProposeRequest(e,r);case"wc_sessionSettle":return this.onSessionSettleRequest(e,r);case"wc_sessionUpdate":return this.onSessionUpdateRequest(e,r);case"wc_sessionExtend":return this.onSessionExtendRequest(e,r);case"wc_sessionPing":return this.onSessionPingRequest(e,r);case"wc_sessionDelete":return this.onSessionDeleteRequest(e,r);case"wc_sessionRequest":return this.onSessionRequest(e,r);case"wc_sessionEvent":return this.onSessionEventRequest(e,r);default:return this.client.logger.info(`Unsupported request method ${n}`)}},this.onRelayEventResponse=async t=>{const{topic:e,payload:r}=t,n=(await this.client.core.history.get(e,r.id)).request.method;switch(n){case"wc_sessionPropose":return this.onSessionProposeResponse(e,r);case"wc_sessionSettle":return this.onSessionSettleResponse(e,r);case"wc_sessionUpdate":return this.onSessionUpdateResponse(e,r);case"wc_sessionExtend":return this.onSessionExtendResponse(e,r);case"wc_sessionPing":return this.onSessionPingResponse(e,r);case"wc_sessionRequest":return this.onSessionRequestResponse(e,r);default:return this.client.logger.info(`Unsupported response method ${n}`)}},this.onRelayEventUnknownPayload=t=>{const{topic:e}=t,{message:r}=(0,s.Z7)("MISSING_OR_INVALID",`Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);throw new Error(r)},this.onSessionProposeRequest=async(t,e)=>{const{params:r,id:n}=e;try{this.isValidConnect(Pn({},e.params));const i=(0,s.gn)(O.FIVE_MINUTES),o=Pn({id:n,pairingTopic:t,expiry:i},r);await this.setProposal(n,o);const a=(0,s.rj)(JSON.stringify(e)),c=await this.getVerifyContext(a,o.proposer.metadata);this.client.events.emit("session_proposal",{id:n,params:o,verifyContext:c})}catch(e){await this.sendError(n,t,e),this.client.logger.error(e)}},this.onSessionProposeResponse=async(t,e)=>{const{id:r}=e;if(pt(e)){const{result:n}=e;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:n});const i=this.client.proposal.get(r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:i});const s=i.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:s});const o=n.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:o});const a=await this.client.core.crypto.generateSharedKey(s,o);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:a});const c=await this.client.core.relayer.subscribe(a);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:c}),await this.client.core.pairing.activate({topic:t})}else ft(e)&&(await this.client.proposal.delete(r,(0,s.D6)("USER_DISCONNECTED")),this.events.emit((0,s.E0)("session_connect"),{error:e.error}))},this.onSessionSettleRequest=async(t,e)=>{const{id:r,params:n}=e;try{this.isValidSessionSettleRequest(n);const{relay:r,controller:i,expiry:o,namespaces:a,requiredNamespaces:c,optionalNamespaces:u,sessionProperties:h,pairingTopic:l}=e.params,p=Pn({topic:t,relay:r,expiry:o,namespaces:a,acknowledged:!0,pairingTopic:l,requiredNamespaces:c,optionalNamespaces:u,controller:i.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:i.publicKey,metadata:i.metadata}},h&&{sessionProperties:h});await this.sendResult(e.id,t,!0),this.events.emit((0,s.E0)("session_connect"),{session:p}),this.cleanupDuplicatePairings(p)}catch(e){await this.sendError(r,t,e),this.client.logger.error(e)}},this.onSessionSettleResponse=async(t,e)=>{const{id:r}=e;pt(e)?(await this.client.session.update(t,{acknowledged:!0}),this.events.emit((0,s.E0)("session_approve",r),{})):ft(e)&&(await this.client.session.delete(t,(0,s.D6)("USER_DISCONNECTED")),this.events.emit((0,s.E0)("session_approve",r),{error:e.error}))},this.onSessionUpdateRequest=async(t,e)=>{const{params:r,id:n}=e;try{this.isValidUpdate(Pn({topic:t},r)),await this.client.session.update(t,{namespaces:r.namespaces}),await this.sendResult(n,t,!0),this.client.events.emit("session_update",{id:n,topic:t,params:r})}catch(e){await this.sendError(n,t,e),this.client.logger.error(e)}},this.onSessionUpdateResponse=(t,e)=>{const{id:r}=e;pt(e)?this.events.emit((0,s.E0)("session_update",r),{}):ft(e)&&this.events.emit((0,s.E0)("session_update",r),{error:e.error})},this.onSessionExtendRequest=async(t,e)=>{const{id:r}=e;try{this.isValidExtend({topic:t}),await this.setExpiry(t,(0,s.gn)(ln)),await this.sendResult(r,t,!0),this.client.events.emit("session_extend",{id:r,topic:t})}catch(e){await this.sendError(r,t,e),this.client.logger.error(e)}},this.onSessionExtendResponse=(t,e)=>{const{id:r}=e;pt(e)?this.events.emit((0,s.E0)("session_extend",r),{}):ft(e)&&this.events.emit((0,s.E0)("session_extend",r),{error:e.error})},this.onSessionPingRequest=async(t,e)=>{const{id:r}=e;try{this.isValidPing({topic:t}),await this.sendResult(r,t,!0),this.client.events.emit("session_ping",{id:r,topic:t})}catch(e){await this.sendError(r,t,e),this.client.logger.error(e)}},this.onSessionPingResponse=(t,e)=>{const{id:r}=e;setTimeout((()=>{pt(e)?this.events.emit((0,s.E0)("session_ping",r),{}):ft(e)&&this.events.emit((0,s.E0)("session_ping",r),{error:e.error})}),500)},this.onSessionDeleteRequest=async(t,e)=>{const{id:r}=e;try{this.isValidDisconnect({topic:t,reason:e.params}),await Promise.all([new Promise((e=>{this.client.core.relayer.once(nr,(async()=>{e(await this.deleteSession(t))}))})),this.sendResult(r,t,!0)]),this.client.events.emit("session_delete",{id:r,topic:t})}catch(t){this.client.logger.error(t)}},this.onSessionRequest=async(t,e)=>{const{id:r,params:n}=e;try{this.isValidRequest(Pn({topic:t},n)),await this.setPendingSessionRequest({id:r,topic:t,params:n}),this.addRequestToQueue({id:r,topic:t,params:n}),await this.processRequestQueue()}catch(e){await this.sendError(r,t,e),this.client.logger.error(e)}},this.onSessionRequestResponse=(t,e)=>{const{id:r}=e;pt(e)?this.events.emit((0,s.E0)("session_request",r),{result:e.result}):ft(e)&&this.events.emit((0,s.E0)("session_request",r),{error:e.error})},this.onSessionEventRequest=async(t,e)=>{const{id:r,params:n}=e;try{this.isValidEmit(Pn({topic:t},n)),this.client.events.emit("session_event",{id:r,topic:t,params:n})}catch(e){await this.sendError(r,t,e),this.client.logger.error(e)}},this.addRequestToQueue=t=>{this.requestQueue.requests.push(t)},this.cleanupAfterResponse=t=>{this.deletePendingSessionRequest(t.response.id,{message:"fulfilled",code:0}),setTimeout((()=>{this.requestQueue.state=dn,this.processRequestQueue()}),(0,O.toMiliseconds)(this.requestQueueDelay))},this.processRequestQueue=async()=>{if(this.requestQueue.state===gn)return void this.client.logger.info("session request queue is already active.");const t=this.requestQueue.requests[0];if(t)try{const{id:e,topic:r,params:n}=t,i=(0,s.rj)(JSON.stringify({id:e,params:n})),o=this.client.session.get(r),a=await this.getVerifyContext(i,o.peer.metadata);this.requestQueue.state=gn,this.client.events.emit("session_request",{id:e,topic:r,params:n,verifyContext:a})}catch(t){this.client.logger.error(t)}else this.client.logger.info("session request queue is empty.")},this.isValidConnect=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(t)}`);throw new Error(e)}const{pairingTopic:e,requiredNamespaces:r,optionalNamespaces:n,sessionProperties:i,relays:o}=t;if((0,s.o8)(e)||await this.isValidPairingTopic(e),!(0,s.PM)(o,!0)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`connect() relays: ${o}`);throw new Error(t)}!(0,s.o8)(r)&&0!==(0,s.L5)(r)&&this.validateNamespaces(r,"requiredNamespaces"),!(0,s.o8)(n)&&0!==(0,s.L5)(n)&&this.validateNamespaces(n,"optionalNamespaces"),(0,s.o8)(i)||this.validateSessionProps(i,"sessionProperties")},this.validateNamespaces=(t,e)=>{const r=(0,s.n)(t,"connect()",e);if(r)throw new Error(r.message)},this.isValidApprove=async t=>{if(!(0,s.EJ)(t))throw new Error((0,s.Z7)("MISSING_OR_INVALID",`approve() params: ${t}`).message);const{id:e,namespaces:r,relayProtocol:n,sessionProperties:i}=t;await this.isValidProposalId(e);const o=this.client.proposal.get(e),a=(0,s.in)(r,"approve()");if(a)throw new Error(a.message);const c=(0,s.rF)(o.requiredNamespaces,r,"approve()");if(c)throw new Error(c.message);if(!(0,s.M_)(n,!0)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`approve() relayProtocol: ${n}`);throw new Error(t)}(0,s.o8)(i)||this.validateSessionProps(i,"sessionProperties")},this.isValidReject=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`reject() params: ${t}`);throw new Error(e)}const{id:e,reason:r}=t;if(await this.isValidProposalId(e),!(0,s.$t)(r)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(r)}`);throw new Error(t)}},this.isValidSessionSettleRequest=t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${t}`);throw new Error(e)}const{relay:e,controller:r,namespaces:n,expiry:i}=t;if(!(0,s.Z2)(e)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(t)}const o=(0,s.Dd)(r,"onSessionSettleRequest()");if(o)throw new Error(o.message);const a=(0,s.in)(n,"onSessionSettleRequest()");if(a)throw new Error(a.message);if((0,s.Bw)(i)){const{message:t}=(0,s.Z7)("EXPIRED","onSessionSettleRequest()");throw new Error(t)}},this.isValidUpdate=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`update() params: ${t}`);throw new Error(e)}const{topic:e,namespaces:r}=t;await this.isValidSessionTopic(e);const n=this.client.session.get(e),i=(0,s.in)(r,"update()");if(i)throw new Error(i.message);const o=(0,s.rF)(n.requiredNamespaces,r,"update()");if(o)throw new Error(o.message)},this.isValidExtend=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`extend() params: ${t}`);throw new Error(e)}const{topic:e}=t;await this.isValidSessionTopic(e)},this.isValidRequest=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`request() params: ${t}`);throw new Error(e)}const{topic:e,request:r,chainId:n,expiry:i}=t;await this.isValidSessionTopic(e);const{namespaces:o}=this.client.session.get(e);if(!(0,s.p8)(o,n)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`request() chainId: ${n}`);throw new Error(t)}if(!(0,s.hH)(r)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`request() ${JSON.stringify(r)}`);throw new Error(t)}if(!(0,s.al)(o,n,r.method)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`request() method: ${r.method}`);throw new Error(t)}if(i&&!(0,s.ON)(i,fn)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`request() expiry: ${i}. Expiry must be a number (in seconds) between ${fn.min} and ${fn.max}`);throw new Error(t)}},this.isValidRespond=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`respond() params: ${t}`);throw new Error(e)}const{topic:e,response:r}=t;if(await this.isValidSessionTopic(e),!(0,s.JT)(r)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(r)}`);throw new Error(t)}},this.isValidPing=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`ping() params: ${t}`);throw new Error(e)}const{topic:e}=t;await this.isValidSessionOrPairingTopic(e)},this.isValidEmit=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`emit() params: ${t}`);throw new Error(e)}const{topic:e,event:r,chainId:n}=t;await this.isValidSessionTopic(e);const{namespaces:i}=this.client.session.get(e);if(!(0,s.p8)(i,n)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`emit() chainId: ${n}`);throw new Error(t)}if(!(0,s.nf)(r)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(t)}if(!(0,s.sI)(i,n,r.name)){const{message:t}=(0,s.Z7)("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(t)}},this.isValidDisconnect=async t=>{if(!(0,s.EJ)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`disconnect() params: ${t}`);throw new Error(e)}const{topic:e}=t;await this.isValidSessionOrPairingTopic(e)},this.getVerifyContext=async(t,e)=>{const r={verified:{verifyUrl:e.verifyUrl||"",validation:"UNKNOWN",origin:e.url||""}};try{const n=await this.client.core.verify.resolve({attestationId:t,verifyUrl:e.verifyUrl});n&&(r.verified.origin=n,r.verified.validation=n===e.url?"VALID":"INVALID")}catch(t){this.client.logger.error(t)}return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`),r},this.validateSessionProps=(t,e)=>{Object.values(t).forEach((t=>{if(!(0,s.M_)(t,!1)){const{message:r}=(0,s.Z7)("MISSING_OR_INVALID",`${e} must be in Record<string, string> format. Received: ${JSON.stringify(t)}`);throw new Error(r)}}))}}isInitialized(){if(!this.initialized){const{message:t}=(0,s.Z7)("NOT_INITIALIZED",this.name);throw new Error(t)}}registerRelayerEvents(){this.client.core.relayer.on(Ye,(async t=>{const{topic:e,message:r}=t;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(r)))return;const n=await this.client.core.crypto.decode(e,r);try{ht(n)?(this.client.core.history.set(e,n),this.onRelayEventRequest({topic:e,payload:n})):lt(n)?(await this.client.core.history.resolve(n),await this.onRelayEventResponse({topic:e,payload:n}),this.client.core.history.delete(e,n.id)):this.onRelayEventUnknownPayload({topic:e,payload:n})}catch(t){this.client.logger.error(t)}}))}registerExpirerEvents(){this.client.core.expirer.on(yr,(async t=>{const{topic:e,id:r}=(0,s.iP)(t.target);if(r&&this.client.pendingRequest.keys.includes(r))return await this.deletePendingSessionRequest(r,(0,s.Z7)("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession(e,!0),this.client.events.emit("session_expire",{topic:e})):r&&(await this.deleteProposal(r,!0),this.client.events.emit("proposal_expire",{id:r}))}))}isValidPairingTopic(t){if(!(0,s.M_)(t,!1)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`pairing topic should be a string: ${t}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(t)){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`pairing topic doesn't exist: ${t}`);throw new Error(e)}if((0,s.Bw)(this.client.core.pairing.pairings.get(t).expiry)){const{message:e}=(0,s.Z7)("EXPIRED",`pairing topic: ${t}`);throw new Error(e)}}async isValidSessionTopic(t){if(!(0,s.M_)(t,!1)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`session topic should be a string: ${t}`);throw new Error(e)}if(!this.client.session.keys.includes(t)){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`session topic doesn't exist: ${t}`);throw new Error(e)}if((0,s.Bw)(this.client.session.get(t).expiry)){await this.deleteSession(t);const{message:e}=(0,s.Z7)("EXPIRED",`session topic: ${t}`);throw new Error(e)}}async isValidSessionOrPairingTopic(t){if(this.client.session.keys.includes(t))await this.isValidSessionTopic(t);else{if(!this.client.core.pairing.pairings.keys.includes(t)){if((0,s.M_)(t,!1)){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${t}`);throw new Error(e)}{const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`session or pairing topic should be a string: ${t}`);throw new Error(e)}}this.isValidPairingTopic(t)}}async isValidProposalId(t){if(!(0,s.Q0)(t)){const{message:e}=(0,s.Z7)("MISSING_OR_INVALID",`proposal id should be a number: ${t}`);throw new Error(e)}if(!this.client.proposal.keys.includes(t)){const{message:e}=(0,s.Z7)("NO_MATCHING_KEY",`proposal id doesn't exist: ${t}`);throw new Error(e)}if((0,s.Bw)(this.client.proposal.get(t).expiry)){await this.deleteProposal(t);const{message:e}=(0,s.Z7)("EXPIRED",`proposal id: ${t}`);throw new Error(e)}}}class xn extends Zr{constructor(t,e){super(t,e,"proposal",an),this.core=t,this.logger=e}}class Cn extends Zr{constructor(t,e){super(t,e,"session",an),this.core=t,this.logger=e}}class Rn extends Zr{constructor(t,e){super(t,e,"request",an,(t=>t.id)),this.core=t,this.logger=e}}class jn extends _{constructor(t){super(t),this.protocol="wc",this.version=2,this.name=cn,this.events=new n.EventEmitter,this.on=(t,e)=>this.events.on(t,e),this.once=(t,e)=>this.events.once(t,e),this.off=(t,e)=>this.events.off(t,e),this.removeListener=(t,e)=>this.events.removeListener(t,e),this.removeAllListeners=t=>this.events.removeAllListeners(t),this.connect=async t=>{try{return await this.engine.connect(t)}catch(t){throw this.logger.error(t.message),t}},this.pair=async t=>{try{return await this.engine.pair(t)}catch(t){throw this.logger.error(t.message),t}},this.approve=async t=>{try{return await this.engine.approve(t)}catch(t){throw this.logger.error(t.message),t}},this.reject=async t=>{try{return await this.engine.reject(t)}catch(t){throw this.logger.error(t.message),t}},this.update=async t=>{try{return await this.engine.update(t)}catch(t){throw this.logger.error(t.message),t}},this.extend=async t=>{try{return await this.engine.extend(t)}catch(t){throw this.logger.error(t.message),t}},this.request=async t=>{try{return await this.engine.request(t)}catch(t){throw this.logger.error(t.message),t}},this.respond=async t=>{try{return await this.engine.respond(t)}catch(t){throw this.logger.error(t.message),t}},this.ping=async t=>{try{return await this.engine.ping(t)}catch(t){throw this.logger.error(t.message),t}},this.emit=async t=>{try{return await this.engine.emit(t)}catch(t){throw this.logger.error(t.message),t}},this.disconnect=async t=>{try{return await this.engine.disconnect(t)}catch(t){throw this.logger.error(t.message),t}},this.find=t=>{try{return this.engine.find(t)}catch(t){throw this.logger.error(t.message),t}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(t){throw this.logger.error(t.message),t}},this.name=t?.name||cn,this.metadata=t?.metadata||(0,s.D)();const e=typeof t?.logger<"u"&&"string"!=typeof t?.logger?t.logger:(0,c.pino)((0,c.getDefaultLoggerOptions)({level:t?.logger||"error"}));this.core=t?.core||new sn(t),this.logger=(0,c.generateChildLogger)(e,this.name),this.session=new Cn(this.core,this.logger),this.proposal=new xn(this.core,this.logger),this.pendingRequest=new Rn(this.core,this.logger),this.engine=new On(this)}static async init(t){const e=new jn(t);return await e.initialize(),e}get context(){return(0,c.getLoggerContext)(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.core.verify.init({verifyUrl:this.metadata.verifyUrl}),this.logger.info("SignClient Initialization Success")}catch(t){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(t.message),t}}}var An=r(4098),Nn=r.n(An);const Tn={headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"};class Ln{constructor(t,e=!1){if(this.url=t,this.disableProviderPing=e,this.events=new n.EventEmitter,this.isAvailable=!1,this.registering=!1,!ot(t))throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);this.url=t,this.disableProviderPing=e}get connected(){return this.isAvailable}get connecting(){return this.registering}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}async open(t=this.url){await this.register(t)}async close(){if(!this.isAvailable)throw new Error("Connection already closed");this.onClose()}async send(t,e){this.isAvailable||await this.register();try{const e=I(t),r=await Nn()(this.url,Object.assign(Object.assign({},Tn),{body:e})),n=await r.json();this.onPayload({data:n})}catch(e){this.onError(t.id,e)}}async register(t=this.url){if(!ot(t))throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);if(this.registering){const t=this.events.getMaxListeners();return(this.events.listenerCount("register_error")>=t||this.events.listenerCount("open")>=t)&&this.events.setMaxListeners(t+1),new Promise(((t,e)=>{this.events.once("register_error",(t=>{this.resetMaxListeners(),e(t)})),this.events.once("open",(()=>{if(this.resetMaxListeners(),void 0===this.isAvailable)return e(new Error("HTTP connection is missing or invalid"));t()}))}))}this.url=t,this.registering=!0;try{if(!this.disableProviderPing){const e=I({id:1,jsonrpc:"2.0",method:"test",params:[]});await Nn()(t,Object.assign(Object.assign({},Tn),{body:e}))}this.onOpen()}catch(t){const e=this.parseError(t);throw this.events.emit("register_error",e),this.onClose(),e}}onOpen(){this.isAvailable=!0,this.registering=!1,this.events.emit("open")}onClose(){this.isAvailable=!1,this.registering=!1,this.events.emit("close")}onPayload(t){if(void 0===t.data)return;const e="string"==typeof t.data?E(t.data):t.data;this.events.emit("payload",e)}onError(t,e){const r=this.parseError(e),n=tt(t,r.message||r.toString());this.events.emit("payload",n)}parseError(t,e=this.url){return W(t,e,"HTTP")}resetMaxListeners(){this.events.getMaxListeners()>10&&this.events.setMaxListeners(10)}}const Mn=Ln,zn="error",Dn="wc@2:universal_provider:",qn="default_chain_changed";var kn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof r.g<"u"?r.g:typeof self<"u"?self:{},$n={exports:{}};!function(t,e){(function(){var r,n="Expected a function",i="__lodash_hash_undefined__",s="__lodash_placeholder__",o=32,a=128,c=1/0,u=9007199254740991,h=NaN,l=4294967295,p=[["ary",a],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",o],["partialRight",64],["rearg",256]],f="[object Arguments]",d="[object Array]",g="[object Boolean]",y="[object Date]",v="[object Error]",m="[object Function]",_="[object GeneratorFunction]",w="[object Map]",b="[object Number]",E="[object Object]",I="[object Promise]",P="[object RegExp]",S="[object Set]",O="[object String]",x="[object Symbol]",C="[object WeakMap]",R="[object ArrayBuffer]",j="[object DataView]",A="[object Float32Array]",N="[object Float64Array]",T="[object Int8Array]",L="[object Int16Array]",M="[object Int32Array]",z="[object Uint8Array]",D="[object Uint8ClampedArray]",q="[object Uint16Array]",k="[object Uint32Array]",$=/\b__p \+= '';/g,U=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,V=/&(?:amp|lt|gt|quot|#39);/g,K=/[&<>"']/g,B=RegExp(V.source),Z=RegExp(K.source),F=/<%-([\s\S]+?)%>/g,W=/<%([\s\S]+?)%>/g,G=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Y=/^\w*$/,Q=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,X=/[\\^$.*+?()[\]{}|]/g,tt=RegExp(X.source),et=/^\s+/,rt=/\s/,nt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,it=/\{\n\/\* \[wrapped with (.+)\] \*/,st=/,? & /,ot=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,at=/[()=,{}\[\]\/\s]/,ct=/\\(\\)?/g,ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,lt=/^[-+]0x[0-9a-f]+$/i,pt=/^0b[01]+$/i,ft=/^\[object .+?Constructor\]$/,dt=/^0o[0-7]+$/i,gt=/^(?:0|[1-9]\d*)$/,yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vt=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,_t="\\ud800-\\udfff",wt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",bt="\\u2700-\\u27bf",Et="a-z\\xdf-\\xf6\\xf8-\\xff",It="A-Z\\xc0-\\xd6\\xd8-\\xde",Pt="\\ufe0e\\ufe0f",St="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ot="["+_t+"]",xt="["+St+"]",Ct="["+wt+"]",Rt="\\d+",jt="["+bt+"]",At="["+Et+"]",Nt="[^"+_t+St+Rt+bt+Et+It+"]",Tt="\\ud83c[\\udffb-\\udfff]",Lt="[^"+_t+"]",Mt="(?:\\ud83c[\\udde6-\\uddff]){2}",zt="[\\ud800-\\udbff][\\udc00-\\udfff]",Dt="["+It+"]",qt="\\u200d",kt="(?:"+At+"|"+Nt+")",$t="(?:"+Dt+"|"+Nt+")",Ut="(?:['’](?:d|ll|m|re|s|t|ve))?",Ht="(?:['’](?:D|LL|M|RE|S|T|VE))?",Vt="(?:"+Ct+"|"+Tt+")?",Kt="["+Pt+"]?",Bt=Kt+Vt+"(?:"+qt+"(?:"+[Lt,Mt,zt].join("|")+")"+Kt+Vt+")*",Zt="(?:"+[jt,Mt,zt].join("|")+")"+Bt,Ft="(?:"+[Lt+Ct+"?",Ct,Mt,zt,Ot].join("|")+")",Wt=RegExp("['’]","g"),Gt=RegExp(Ct,"g"),Jt=RegExp(Tt+"(?="+Tt+")|"+Ft+Bt,"g"),Yt=RegExp([Dt+"?"+At+"+"+Ut+"(?="+[xt,Dt,"$"].join("|")+")",$t+"+"+Ht+"(?="+[xt,Dt+kt,"$"].join("|")+")",Dt+"?"+kt+"+"+Ut,Dt+"+"+Ht,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Rt,Zt].join("|"),"g"),Qt=RegExp("["+qt+_t+wt+Pt+"]"),Xt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,te=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ee=-1,re={};re[A]=re[N]=re[T]=re[L]=re[M]=re[z]=re[D]=re[q]=re[k]=!0,re[f]=re[d]=re[R]=re[g]=re[j]=re[y]=re[v]=re[m]=re[w]=re[b]=re[E]=re[P]=re[S]=re[O]=re[C]=!1;var ne={};ne[f]=ne[d]=ne[R]=ne[j]=ne[g]=ne[y]=ne[A]=ne[N]=ne[T]=ne[L]=ne[M]=ne[w]=ne[b]=ne[E]=ne[P]=ne[S]=ne[O]=ne[x]=ne[z]=ne[D]=ne[q]=ne[k]=!0,ne[v]=ne[m]=ne[C]=!1;var ie={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},se=parseFloat,oe=parseInt,ae="object"==typeof kn&&kn&&kn.Object===Object&&kn,ce="object"==typeof self&&self&&self.Object===Object&&self,ue=ae||ce||Function("return this")(),he=e&&!e.nodeType&&e,le=he&&t&&!t.nodeType&&t,pe=le&&le.exports===he,fe=pe&&ae.process,de=function(){try{return le&&le.require&&le.require("util").types||fe&&fe.binding&&fe.binding("util")}catch{}}(),ge=de&&de.isArrayBuffer,ye=de&&de.isDate,ve=de&&de.isMap,me=de&&de.isRegExp,_e=de&&de.isSet,we=de&&de.isTypedArray;function be(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}function Ee(t,e,r,n){for(var i=-1,s=null==t?0:t.length;++i<s;){var o=t[i];e(n,o,r(o),t)}return n}function Ie(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}function Pe(t,e){for(var r=null==t?0:t.length;r--&&!1!==e(t[r],r,t););return t}function Se(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(!e(t[r],r,t))return!1;return!0}function Oe(t,e){for(var r=-1,n=null==t?0:t.length,i=0,s=[];++r<n;){var o=t[r];e(o,r,t)&&(s[i++]=o)}return s}function xe(t,e){return!(null==t||!t.length)&&De(t,e,0)>-1}function Ce(t,e,r){for(var n=-1,i=null==t?0:t.length;++n<i;)if(r(e,t[n]))return!0;return!1}function Re(t,e){for(var r=-1,n=null==t?0:t.length,i=Array(n);++r<n;)i[r]=e(t[r],r,t);return i}function je(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}function Ae(t,e,r,n){var i=-1,s=null==t?0:t.length;for(n&&s&&(r=t[++i]);++i<s;)r=e(r,t[i],i,t);return r}function Ne(t,e,r,n){var i=null==t?0:t.length;for(n&&i&&(r=t[--i]);i--;)r=e(r,t[i],i,t);return r}function Te(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}var Le=Ue("length");function Me(t,e,r){var n;return r(t,(function(t,r,i){if(e(t,r,i))return n=r,!1})),n}function ze(t,e,r,n){for(var i=t.length,s=r+(n?1:-1);n?s--:++s<i;)if(e(t[s],s,t))return s;return-1}function De(t,e,r){return e==e?function(t,e,r){for(var n=r-1,i=t.length;++n<i;)if(t[n]===e)return n;return-1}(t,e,r):ze(t,ke,r)}function qe(t,e,r,n){for(var i=r-1,s=t.length;++i<s;)if(n(t[i],e))return i;return-1}function ke(t){return t!=t}function $e(t,e){var r=null==t?0:t.length;return r?Ke(t,e)/r:h}function Ue(t){return function(e){return null==e?r:e[t]}}function He(t){return function(e){return null==t?r:t[e]}}function Ve(t,e,r,n,i){return i(t,(function(t,i,s){r=n?(n=!1,t):e(r,t,i,s)})),r}function Ke(t,e){for(var n,i=-1,s=t.length;++i<s;){var o=e(t[i]);o!==r&&(n=n===r?o:n+o)}return n}function Be(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}function Ze(t){return t&&t.slice(0,cr(t)+1).replace(et,"")}function Fe(t){return function(e){return t(e)}}function We(t,e){return Re(e,(function(e){return t[e]}))}function Ge(t,e){return t.has(e)}function Je(t,e){for(var r=-1,n=t.length;++r<n&&De(e,t[r],0)>-1;);return r}function Ye(t,e){for(var r=t.length;r--&&De(e,t[r],0)>-1;);return r}var Qe=He({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Xe=He({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function tr(t){return"\\"+ie[t]}function er(t){return Qt.test(t)}function rr(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function nr(t,e){return function(r){return t(e(r))}}function ir(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var a=t[r];(a===e||a===s)&&(t[r]=s,o[i++]=r)}return o}function sr(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}function or(t){return er(t)?function(t){for(var e=Jt.lastIndex=0;Jt.test(t);)++e;return e}(t):Le(t)}function ar(t){return er(t)?function(t){return t.match(Jt)||[]}(t):function(t){return t.split("")}(t)}function cr(t){for(var e=t.length;e--&&rt.test(t.charAt(e)););return e}var ur=He({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),hr=function t(e){var rt=(e=null==e?ue:hr.defaults(ue.Object(),e,hr.pick(ue,te))).Array,_t=e.Date,wt=e.Error,bt=e.Function,Et=e.Math,It=e.Object,Pt=e.RegExp,St=e.String,Ot=e.TypeError,xt=rt.prototype,Ct=bt.prototype,Rt=It.prototype,jt=e["__core-js_shared__"],At=Ct.toString,Nt=Rt.hasOwnProperty,Tt=0,Lt=function(){var t=/[^.]+$/.exec(jt&&jt.keys&&jt.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),Mt=Rt.toString,zt=At.call(It),Dt=ue._,qt=Pt("^"+At.call(Nt).replace(X,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),kt=pe?e.Buffer:r,$t=e.Symbol,Ut=e.Uint8Array,Ht=kt?kt.allocUnsafe:r,Vt=nr(It.getPrototypeOf,It),Kt=It.create,Bt=Rt.propertyIsEnumerable,Zt=xt.splice,Ft=$t?$t.isConcatSpreadable:r,Jt=$t?$t.iterator:r,Qt=$t?$t.toStringTag:r,ie=function(){try{var t=os(It,"defineProperty");return t({},"",{}),t}catch{}}(),ae=e.clearTimeout!==ue.clearTimeout&&e.clearTimeout,ce=_t&&_t.now!==ue.Date.now&&_t.now,he=e.setTimeout!==ue.setTimeout&&e.setTimeout,le=Et.ceil,fe=Et.floor,de=It.getOwnPropertySymbols,Le=kt?kt.isBuffer:r,He=e.isFinite,lr=xt.join,pr=nr(It.keys,It),fr=Et.max,dr=Et.min,gr=_t.now,yr=e.parseInt,vr=Et.random,mr=xt.reverse,_r=os(e,"DataView"),wr=os(e,"Map"),br=os(e,"Promise"),Er=os(e,"Set"),Ir=os(e,"WeakMap"),Pr=os(It,"create"),Sr=Ir&&new Ir,Or={},xr=Ls(_r),Cr=Ls(wr),Rr=Ls(br),jr=Ls(Er),Ar=Ls(Ir),Nr=$t?$t.prototype:r,Tr=Nr?Nr.valueOf:r,Lr=Nr?Nr.toString:r;function Mr(t){if(Qo(t)&&!Uo(t)&&!(t instanceof kr)){if(t instanceof qr)return t;if(Nt.call(t,"__wrapped__"))return Ms(t)}return new qr(t)}var zr=function(){function t(){}return function(e){if(!Yo(e))return{};if(Kt)return Kt(e);t.prototype=e;var n=new t;return t.prototype=r,n}}();function Dr(){}function qr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=r}function kr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=l,this.__views__=[]}function $r(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Ur(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Hr(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Vr(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new Hr;++e<r;)this.add(t[e])}function Kr(t){var e=this.__data__=new Ur(t);this.size=e.size}function Br(t,e){var r=Uo(t),n=!r&&$o(t),i=!r&&!n&&Bo(t),s=!r&&!n&&!i&&oa(t),o=r||n||i||s,a=o?Be(t.length,St):[],c=a.length;for(var u in t)(e||Nt.call(t,u))&&(!o||!("length"==u||i&&("offset"==u||"parent"==u)||s&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||fs(u,c)))&&a.push(u);return a}function Zr(t){var e=t.length;return e?t[Vn(0,e-1)]:r}function Fr(t,e){return Rs(Pi(t),rn(e,0,t.length))}function Wr(t){return Rs(Pi(t))}function Gr(t,e,n){(n!==r&&!Do(t[e],n)||n===r&&!(e in t))&&tn(t,e,n)}function Jr(t,e,n){var i=t[e];(!Nt.call(t,e)||!Do(i,n)||n===r&&!(e in t))&&tn(t,e,n)}function Yr(t,e){for(var r=t.length;r--;)if(Do(t[r][0],e))return r;return-1}function Qr(t,e,r,n){return cn(t,(function(t,i,s){e(n,t,r(t),s)})),n}function Xr(t,e){return t&&Si(e,Ca(e),t)}function tn(t,e,r){"__proto__"==e&&ie?ie(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function en(t,e){for(var n=-1,i=e.length,s=rt(i),o=null==t;++n<i;)s[n]=o?r:Ia(t,e[n]);return s}function rn(t,e,n){return t==t&&(n!==r&&(t=t<=n?t:n),e!==r&&(t=t>=e?t:e)),t}function nn(t,e,n,i,s,o){var a,c=1&e,u=2&e,h=4&e;if(n&&(a=s?n(t,i,s,o):n(t)),a!==r)return a;if(!Yo(t))return t;var l=Uo(t);if(l){if(a=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!c)return Pi(t,a)}else{var p=us(t),d=p==m||p==_;if(Bo(t))return mi(t,c);if(p==E||p==f||d&&!s){if(a=u||d?{}:ls(t),!c)return u?function(t,e){return Si(t,cs(t),e)}(t,function(t,e){return t&&Si(e,Ra(e),t)}(a,t)):function(t,e){return Si(t,as(t),e)}(t,Xr(a,t))}else{if(!ne[p])return s?t:{};a=function(t,e,r){var n=t.constructor;switch(e){case R:return _i(t);case g:case y:return new n(+t);case j:return function(t,e){var r=e?_i(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case A:case N:case T:case L:case M:case z:case D:case q:case k:return wi(t,r);case w:return new n;case b:case O:return new n(t);case P:return function(t){var e=new t.constructor(t.source,ht.exec(t));return e.lastIndex=t.lastIndex,e}(t);case S:return new n;case x:return function(t){return Tr?It(Tr.call(t)):{}}(t)}}(t,p,c)}}o||(o=new Kr);var v=o.get(t);if(v)return v;o.set(t,a),na(t)?t.forEach((function(r){a.add(nn(r,e,n,r,t,o))})):Xo(t)&&t.forEach((function(r,i){a.set(i,nn(r,e,n,i,t,o))}));var I=l?r:(h?u?Xi:Qi:u?Ra:Ca)(t);return Ie(I||t,(function(r,i){I&&(r=t[i=r]),Jr(a,i,nn(r,e,n,i,t,o))})),a}function sn(t,e,n){var i=n.length;if(null==t)return!i;for(t=It(t);i--;){var s=n[i],o=e[s],a=t[s];if(a===r&&!(s in t)||!o(a))return!1}return!0}function on(t,e,i){if("function"!=typeof t)throw new Ot(n);return Ss((function(){t.apply(r,i)}),e)}function an(t,e,r,n){var i=-1,s=xe,o=!0,a=t.length,c=[],u=e.length;if(!a)return c;r&&(e=Re(e,Fe(r))),n?(s=Ce,o=!1):e.length>=200&&(s=Ge,o=!1,e=new Vr(e));t:for(;++i<a;){var h=t[i],l=null==r?h:r(h);if(h=n||0!==h?h:0,o&&l==l){for(var p=u;p--;)if(e[p]===l)continue t;c.push(h)}else s(e,l,n)||c.push(h)}return c}Mr.templateSettings={escape:F,evaluate:W,interpolate:G,variable:"",imports:{_:Mr}},Mr.prototype=Dr.prototype,Mr.prototype.constructor=Mr,qr.prototype=zr(Dr.prototype),qr.prototype.constructor=qr,kr.prototype=zr(Dr.prototype),kr.prototype.constructor=kr,$r.prototype.clear=function(){this.__data__=Pr?Pr(null):{},this.size=0},$r.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},$r.prototype.get=function(t){var e=this.__data__;if(Pr){var n=e[t];return n===i?r:n}return Nt.call(e,t)?e[t]:r},$r.prototype.has=function(t){var e=this.__data__;return Pr?e[t]!==r:Nt.call(e,t)},$r.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Pr&&e===r?i:e,this},Ur.prototype.clear=function(){this.__data__=[],this.size=0},Ur.prototype.delete=function(t){var e=this.__data__,r=Yr(e,t);return!(r<0||(r==e.length-1?e.pop():Zt.call(e,r,1),--this.size,0))},Ur.prototype.get=function(t){var e=this.__data__,n=Yr(e,t);return n<0?r:e[n][1]},Ur.prototype.has=function(t){return Yr(this.__data__,t)>-1},Ur.prototype.set=function(t,e){var r=this.__data__,n=Yr(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},Hr.prototype.clear=function(){this.size=0,this.__data__={hash:new $r,map:new(wr||Ur),string:new $r}},Hr.prototype.delete=function(t){var e=is(this,t).delete(t);return this.size-=e?1:0,e},Hr.prototype.get=function(t){return is(this,t).get(t)},Hr.prototype.has=function(t){return is(this,t).has(t)},Hr.prototype.set=function(t,e){var r=is(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},Vr.prototype.add=Vr.prototype.push=function(t){return this.__data__.set(t,i),this},Vr.prototype.has=function(t){return this.__data__.has(t)},Kr.prototype.clear=function(){this.__data__=new Ur,this.size=0},Kr.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},Kr.prototype.get=function(t){return this.__data__.get(t)},Kr.prototype.has=function(t){return this.__data__.has(t)},Kr.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Ur){var n=r.__data__;if(!wr||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new Hr(n)}return r.set(t,e),this.size=r.size,this};var cn=Ci(yn),un=Ci(vn,!0);function hn(t,e){var r=!0;return cn(t,(function(t,n,i){return r=!!e(t,n,i)})),r}function ln(t,e,n){for(var i=-1,s=t.length;++i<s;){var o=t[i],a=e(o);if(null!=a&&(c===r?a==a&&!sa(a):n(a,c)))var c=a,u=o}return u}function pn(t,e){var r=[];return cn(t,(function(t,n,i){e(t,n,i)&&r.push(t)})),r}function fn(t,e,r,n,i){var s=-1,o=t.length;for(r||(r=ps),i||(i=[]);++s<o;){var a=t[s];e>0&&r(a)?e>1?fn(a,e-1,r,n,i):je(i,a):n||(i[i.length]=a)}return i}var dn=Ri(),gn=Ri(!0);function yn(t,e){return t&&dn(t,e,Ca)}function vn(t,e){return t&&gn(t,e,Ca)}function mn(t,e){return Oe(e,(function(e){return Wo(t[e])}))}function _n(t,e){for(var n=0,i=(e=di(e,t)).length;null!=t&&n<i;)t=t[Ts(e[n++])];return n&&n==i?t:r}function wn(t,e,r){var n=e(t);return Uo(t)?n:je(n,r(t))}function bn(t){return null==t?t===r?"[object Undefined]":"[object Null]":Qt&&Qt in It(t)?function(t){var e=Nt.call(t,Qt),n=t[Qt];try{t[Qt]=r;var i=!0}catch{}var s=Mt.call(t);return i&&(e?t[Qt]=n:delete t[Qt]),s}(t):function(t){return Mt.call(t)}(t)}function En(t,e){return t>e}function In(t,e){return null!=t&&Nt.call(t,e)}function Pn(t,e){return null!=t&&e in It(t)}function Sn(t,e,n){for(var i=n?Ce:xe,s=t[0].length,o=t.length,a=o,c=rt(o),u=1/0,h=[];a--;){var l=t[a];a&&e&&(l=Re(l,Fe(e))),u=dr(l.length,u),c[a]=!n&&(e||s>=120&&l.length>=120)?new Vr(a&&l):r}l=t[0];var p=-1,f=c[0];t:for(;++p<s&&h.length<u;){var d=l[p],g=e?e(d):d;if(d=n||0!==d?d:0,!(f?Ge(f,g):i(h,g,n))){for(a=o;--a;){var y=c[a];if(!(y?Ge(y,g):i(t[a],g,n)))continue t}f&&f.push(g),h.push(d)}}return h}function On(t,e,n){var i=null==(t=Es(t,e=di(e,t)))?t:t[Ts(Zs(e))];return null==i?r:be(i,t,n)}function xn(t){return Qo(t)&&bn(t)==f}function Cn(t,e,n,i,s){return t===e||(null==t||null==e||!Qo(t)&&!Qo(e)?t!=t&&e!=e:function(t,e,n,i,s,o){var a=Uo(t),c=Uo(e),u=a?d:us(t),h=c?d:us(e),l=(u=u==f?E:u)==E,p=(h=h==f?E:h)==E,m=u==h;if(m&&Bo(t)){if(!Bo(e))return!1;a=!0,l=!1}if(m&&!l)return o||(o=new Kr),a||oa(t)?Ji(t,e,n,i,s,o):function(t,e,r,n,i,s,o){switch(r){case j:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case R:return!(t.byteLength!=e.byteLength||!s(new Ut(t),new Ut(e)));case g:case y:case b:return Do(+t,+e);case v:return t.name==e.name&&t.message==e.message;case P:case O:return t==e+"";case w:var a=rr;case S:var c=1&n;if(a||(a=sr),t.size!=e.size&&!c)return!1;var u=o.get(t);if(u)return u==e;n|=2,o.set(t,e);var h=Ji(a(t),a(e),n,i,s,o);return o.delete(t),h;case x:if(Tr)return Tr.call(t)==Tr.call(e)}return!1}(t,e,u,n,i,s,o);if(!(1&n)){var _=l&&Nt.call(t,"__wrapped__"),I=p&&Nt.call(e,"__wrapped__");if(_||I){var C=_?t.value():t,A=I?e.value():e;return o||(o=new Kr),s(C,A,n,i,o)}}return!!m&&(o||(o=new Kr),function(t,e,n,i,s,o){var a=1&n,c=Qi(t),u=c.length;if(u!=Qi(e).length&&!a)return!1;for(var h=u;h--;){var l=c[h];if(!(a?l in e:Nt.call(e,l)))return!1}var p=o.get(t),f=o.get(e);if(p&&f)return p==e&&f==t;var d=!0;o.set(t,e),o.set(e,t);for(var g=a;++h<u;){var y=t[l=c[h]],v=e[l];if(i)var m=a?i(v,y,l,e,t,o):i(y,v,l,t,e,o);if(!(m===r?y===v||s(y,v,n,i,o):m)){d=!1;break}g||(g="constructor"==l)}if(d&&!g){var _=t.constructor,w=e.constructor;_!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(d=!1)}return o.delete(t),o.delete(e),d}(t,e,n,i,s,o))}(t,e,n,i,Cn,s))}function Rn(t,e,n,i){var s=n.length,o=s,a=!i;if(null==t)return!o;for(t=It(t);s--;){var c=n[s];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++s<o;){var u=(c=n[s])[0],h=t[u],l=c[1];if(a&&c[2]){if(h===r&&!(u in t))return!1}else{var p=new Kr;if(i)var f=i(h,l,u,t,e,p);if(!(f===r?Cn(l,h,3,i,p):f))return!1}}return!0}function jn(t){return!(!Yo(t)||function(t){return!!Lt&&Lt in t}(t))&&(Wo(t)?qt:ft).test(Ls(t))}function An(t){return"function"==typeof t?t:null==t?tc:"object"==typeof t?Uo(t)?zn(t[0],t[1]):Mn(t):uc(t)}function Nn(t){if(!ms(t))return pr(t);var e=[];for(var r in It(t))Nt.call(t,r)&&"constructor"!=r&&e.push(r);return e}function Tn(t,e){return t<e}function Ln(t,e){var r=-1,n=Vo(t)?rt(t.length):[];return cn(t,(function(t,i,s){n[++r]=e(t,i,s)})),n}function Mn(t){var e=ss(t);return 1==e.length&&e[0][2]?ws(e[0][0],e[0][1]):function(r){return r===t||Rn(r,t,e)}}function zn(t,e){return gs(t)&&_s(e)?ws(Ts(t),e):function(n){var i=Ia(n,t);return i===r&&i===e?Pa(n,t):Cn(e,i,3)}}function Dn(t,e,n,i,s){t!==e&&dn(e,(function(o,a){if(s||(s=new Kr),Yo(o))!function(t,e,n,i,s,o,a){var c=Is(t,n),u=Is(e,n),h=a.get(u);if(h)Gr(t,n,h);else{var l=o?o(c,u,n+"",t,e,a):r,p=l===r;if(p){var f=Uo(u),d=!f&&Bo(u),g=!f&&!d&&oa(u);l=u,f||d||g?Uo(c)?l=c:Ko(c)?l=Pi(c):d?(p=!1,l=mi(u,!0)):g?(p=!1,l=wi(u,!0)):l=[]:ea(u)||$o(u)?(l=c,$o(c)?l=da(c):(!Yo(c)||Wo(c))&&(l=ls(u))):p=!1}p&&(a.set(u,l),s(l,u,i,o,a),a.delete(u)),Gr(t,n,l)}}(t,e,a,n,Dn,i,s);else{var c=i?i(Is(t,a),o,a+"",t,e,s):r;c===r&&(c=o),Gr(t,a,c)}}),Ra)}function qn(t,e){var n=t.length;if(n)return fs(e+=e<0?n:0,n)?t[e]:r}function kn(t,e,r){e=e.length?Re(e,(function(t){return Uo(t)?function(e){return _n(e,1===t.length?t[0]:t)}:t})):[tc];var n=-1;return e=Re(e,Fe(ns())),function(t,e){var n=t.length;for(t.sort((function(t,e){return function(t,e,r){for(var n=-1,i=t.criteria,s=e.criteria,o=i.length,a=r.length;++n<o;){var c=bi(i[n],s[n]);if(c)return n>=a?c:c*("desc"==r[n]?-1:1)}return t.index-e.index}(t,e,r)}));n--;)t[n]=t[n].value;return t}(Ln(t,(function(t,r,i){return{criteria:Re(e,(function(e){return e(t)})),index:++n,value:t}})))}function $n(t,e,r){for(var n=-1,i=e.length,s={};++n<i;){var o=e[n],a=_n(t,o);r(a,o)&&Wn(s,di(o,t),a)}return s}function Un(t,e,r,n){var i=n?qe:De,s=-1,o=e.length,a=t;for(t===e&&(e=Pi(e)),r&&(a=Re(t,Fe(r)));++s<o;)for(var c=0,u=e[s],h=r?r(u):u;(c=i(a,h,c,n))>-1;)a!==t&&Zt.call(a,c,1),Zt.call(t,c,1);return t}function Hn(t,e){for(var r=t?e.length:0,n=r-1;r--;){var i=e[r];if(r==n||i!==s){var s=i;fs(i)?Zt.call(t,i,1):oi(t,i)}}return t}function Vn(t,e){return t+fe(vr()*(e-t+1))}function Kn(t,e){var r="";if(!t||e<1||e>u)return r;do{e%2&&(r+=t),(e=fe(e/2))&&(t+=t)}while(e);return r}function Bn(t,e){return Os(bs(t,e,tc),t+"")}function Zn(t){return Zr(Da(t))}function Fn(t,e){var r=Da(t);return Rs(r,rn(e,0,r.length))}function Wn(t,e,n,i){if(!Yo(t))return t;for(var s=-1,o=(e=di(e,t)).length,a=o-1,c=t;null!=c&&++s<o;){var u=Ts(e[s]),h=n;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(s!=a){var l=c[u];(h=i?i(l,u,c):r)===r&&(h=Yo(l)?l:fs(e[s+1])?[]:{})}Jr(c,u,h),c=c[u]}return t}var Gn=Sr?function(t,e){return Sr.set(t,e),t}:tc,Jn=ie?function(t,e){return ie(t,"toString",{configurable:!0,enumerable:!1,value:Ya(e),writable:!0})}:tc;function Yn(t){return Rs(Da(t))}function Qn(t,e,r){var n=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(r=r>i?i:r)<0&&(r+=i),i=e>r?0:r-e>>>0,e>>>=0;for(var s=rt(i);++n<i;)s[n]=t[n+e];return s}function Xn(t,e){var r;return cn(t,(function(t,n,i){return!(r=e(t,n,i))})),!!r}function ti(t,e,r){var n=0,i=null==t?n:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;n<i;){var s=n+i>>>1,o=t[s];null!==o&&!sa(o)&&(r?o<=e:o<e)?n=s+1:i=s}return i}return ei(t,e,tc,r)}function ei(t,e,n,i){var s=0,o=null==t?0:t.length;if(0===o)return 0;for(var a=(e=n(e))!=e,c=null===e,u=sa(e),h=e===r;s<o;){var l=fe((s+o)/2),p=n(t[l]),f=p!==r,d=null===p,g=p==p,y=sa(p);if(a)var v=i||g;else v=h?g&&(i||f):c?g&&f&&(i||!d):u?g&&f&&!d&&(i||!y):!d&&!y&&(i?p<=e:p<e);v?s=l+1:o=l}return dr(o,4294967294)}function ri(t,e){for(var r=-1,n=t.length,i=0,s=[];++r<n;){var o=t[r],a=e?e(o):o;if(!r||!Do(a,c)){var c=a;s[i++]=0===o?0:o}}return s}function ni(t){return"number"==typeof t?t:sa(t)?h:+t}function ii(t){if("string"==typeof t)return t;if(Uo(t))return Re(t,ii)+"";if(sa(t))return Lr?Lr.call(t):"";var e=t+"";return"0"==e&&1/t==-c?"-0":e}function si(t,e,r){var n=-1,i=xe,s=t.length,o=!0,a=[],c=a;if(r)o=!1,i=Ce;else if(s>=200){var u=e?null:Ki(t);if(u)return sr(u);o=!1,i=Ge,c=new Vr}else c=e?[]:a;t:for(;++n<s;){var h=t[n],l=e?e(h):h;if(h=r||0!==h?h:0,o&&l==l){for(var p=c.length;p--;)if(c[p]===l)continue t;e&&c.push(l),a.push(h)}else i(c,l,r)||(c!==a&&c.push(l),a.push(h))}return a}function oi(t,e){return null==(t=Es(t,e=di(e,t)))||delete t[Ts(Zs(e))]}function ai(t,e,r,n){return Wn(t,e,r(_n(t,e)),n)}function ci(t,e,r,n){for(var i=t.length,s=n?i:-1;(n?s--:++s<i)&&e(t[s],s,t););return r?Qn(t,n?0:s,n?s+1:i):Qn(t,n?s+1:0,n?i:s)}function ui(t,e){var r=t;return r instanceof kr&&(r=r.value()),Ae(e,(function(t,e){return e.func.apply(e.thisArg,je([t],e.args))}),r)}function hi(t,e,r){var n=t.length;if(n<2)return n?si(t[0]):[];for(var i=-1,s=rt(n);++i<n;)for(var o=t[i],a=-1;++a<n;)a!=i&&(s[i]=an(s[i]||o,t[a],e,r));return si(fn(s,1),e,r)}function li(t,e,n){for(var i=-1,s=t.length,o=e.length,a={};++i<s;){var c=i<o?e[i]:r;n(a,t[i],c)}return a}function pi(t){return Ko(t)?t:[]}function fi(t){return"function"==typeof t?t:tc}function di(t,e){return Uo(t)?t:gs(t,e)?[t]:Ns(ga(t))}var gi=Bn;function yi(t,e,n){var i=t.length;return n=n===r?i:n,!e&&n>=i?t:Qn(t,e,n)}var vi=ae||function(t){return ue.clearTimeout(t)};function mi(t,e){if(e)return t.slice();var r=t.length,n=Ht?Ht(r):new t.constructor(r);return t.copy(n),n}function _i(t){var e=new t.constructor(t.byteLength);return new Ut(e).set(new Ut(t)),e}function wi(t,e){var r=e?_i(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function bi(t,e){if(t!==e){var n=t!==r,i=null===t,s=t==t,o=sa(t),a=e!==r,c=null===e,u=e==e,h=sa(e);if(!c&&!h&&!o&&t>e||o&&a&&u&&!c&&!h||i&&a&&u||!n&&u||!s)return 1;if(!i&&!o&&!h&&t<e||h&&n&&s&&!i&&!o||c&&n&&s||!a&&s||!u)return-1}return 0}function Ei(t,e,r,n){for(var i=-1,s=t.length,o=r.length,a=-1,c=e.length,u=fr(s-o,0),h=rt(c+u),l=!n;++a<c;)h[a]=e[a];for(;++i<o;)(l||i<s)&&(h[r[i]]=t[i]);for(;u--;)h[a++]=t[i++];return h}function Ii(t,e,r,n){for(var i=-1,s=t.length,o=-1,a=r.length,c=-1,u=e.length,h=fr(s-a,0),l=rt(h+u),p=!n;++i<h;)l[i]=t[i];for(var f=i;++c<u;)l[f+c]=e[c];for(;++o<a;)(p||i<s)&&(l[f+r[o]]=t[i++]);return l}function Pi(t,e){var r=-1,n=t.length;for(e||(e=rt(n));++r<n;)e[r]=t[r];return e}function Si(t,e,n,i){var s=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var c=e[o],u=i?i(n[c],t[c],c,n,t):r;u===r&&(u=t[c]),s?tn(n,c,u):Jr(n,c,u)}return n}function Oi(t,e){return function(r,n){var i=Uo(r)?Ee:Qr,s=e?e():{};return i(r,t,ns(n,2),s)}}function xi(t){return Bn((function(e,n){var i=-1,s=n.length,o=s>1?n[s-1]:r,a=s>2?n[2]:r;for(o=t.length>3&&"function"==typeof o?(s--,o):r,a&&ds(n[0],n[1],a)&&(o=s<3?r:o,s=1),e=It(e);++i<s;){var c=n[i];c&&t(e,c,i,o)}return e}))}function Ci(t,e){return function(r,n){if(null==r)return r;if(!Vo(r))return t(r,n);for(var i=r.length,s=e?i:-1,o=It(r);(e?s--:++s<i)&&!1!==n(o[s],s,o););return r}}function Ri(t){return function(e,r,n){for(var i=-1,s=It(e),o=n(e),a=o.length;a--;){var c=o[t?a:++i];if(!1===r(s[c],c,s))break}return e}}function ji(t){return function(e){var n=er(e=ga(e))?ar(e):r,i=n?n[0]:e.charAt(0),s=n?yi(n,1).join(""):e.slice(1);return i[t]()+s}}function Ai(t){return function(e){return Ae(Wa($a(e).replace(Wt,"")),t,"")}}function Ni(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var r=zr(t.prototype),n=t.apply(r,e);return Yo(n)?n:r}}function Ti(t){return function(e,n,i){var s=It(e);if(!Vo(e)){var o=ns(n,3);e=Ca(e),n=function(t){return o(s[t],t,s)}}var a=t(e,n,i);return a>-1?s[o?e[a]:a]:r}}function Li(t){return Yi((function(e){var i=e.length,s=i,o=qr.prototype.thru;for(t&&e.reverse();s--;){var a=e[s];if("function"!=typeof a)throw new Ot(n);if(o&&!c&&"wrapper"==es(a))var c=new qr([],!0)}for(s=c?s:i;++s<i;){var u=es(a=e[s]),h="wrapper"==u?ts(a):r;c=h&&ys(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?c[es(h[0])].apply(c,h[3]):1==a.length&&ys(a)?c[u]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Uo(r))return c.plant(r).value();for(var n=0,s=i?e[n].apply(this,t):r;++n<i;)s=e[n].call(this,s);return s}}))}function Mi(t,e,n,i,s,o,c,u,h,l){var p=e&a,f=1&e,d=2&e,g=24&e,y=512&e,v=d?r:Ni(t);return function a(){for(var m=arguments.length,_=rt(m),w=m;w--;)_[w]=arguments[w];if(g)var b=rs(a),E=function(t,e){for(var r=t.length,n=0;r--;)t[r]===e&&++n;return n}(_,b);if(i&&(_=Ei(_,i,s,g)),o&&(_=Ii(_,o,c,g)),m-=E,g&&m<l){var I=ir(_,b);return Hi(t,e,Mi,a.placeholder,n,_,I,u,h,l-m)}var P=f?n:this,S=d?P[t]:t;return m=_.length,u?_=function(t,e){for(var n=t.length,i=dr(e.length,n),s=Pi(t);i--;){var o=e[i];t[i]=fs(o,n)?s[o]:r}return t}(_,u):y&&m>1&&_.reverse(),p&&h<m&&(_.length=h),this&&this!==ue&&this instanceof a&&(S=v||Ni(S)),S.apply(P,_)}}function zi(t,e){return function(r,n){return function(t,e,r,n){return yn(t,(function(t,i,s){e(n,r(t),i,s)})),n}(r,t,e(n),{})}}function Di(t,e){return function(n,i){var s;if(n===r&&i===r)return e;if(n!==r&&(s=n),i!==r){if(s===r)return i;"string"==typeof n||"string"==typeof i?(n=ii(n),i=ii(i)):(n=ni(n),i=ni(i)),s=t(n,i)}return s}}function qi(t){return Yi((function(e){return e=Re(e,Fe(ns())),Bn((function(r){var n=this;return t(e,(function(t){return be(t,n,r)}))}))}))}function ki(t,e){var n=(e=e===r?" ":ii(e)).length;if(n<2)return n?Kn(e,t):e;var i=Kn(e,le(t/or(e)));return er(e)?yi(ar(i),0,t).join(""):i.slice(0,t)}function $i(t){return function(e,n,i){return i&&"number"!=typeof i&&ds(e,n,i)&&(n=i=r),e=ha(e),n===r?(n=e,e=0):n=ha(n),function(t,e,r,n){for(var i=-1,s=fr(le((e-t)/(r||1)),0),o=rt(s);s--;)o[n?s:++i]=t,t+=r;return o}(e,n,i=i===r?e<n?1:-1:ha(i),t)}}function Ui(t){return function(e,r){return"string"==typeof e&&"string"==typeof r||(e=fa(e),r=fa(r)),t(e,r)}}function Hi(t,e,n,i,s,a,c,u,h,l){var p=8&e;e|=p?o:64,4&(e&=~(p?64:o))||(e&=-4);var f=[t,e,s,p?a:r,p?c:r,p?r:a,p?r:c,u,h,l],d=n.apply(r,f);return ys(t)&&Ps(d,f),d.placeholder=i,xs(d,t,e)}function Vi(t){var e=Et[t];return function(t,r){if(t=fa(t),(r=null==r?0:dr(la(r),292))&&He(t)){var n=(ga(t)+"e").split("e");return+((n=(ga(e(n[0]+"e"+(+n[1]+r)))+"e").split("e"))[0]+"e"+(+n[1]-r))}return e(t)}}var Ki=Er&&1/sr(new Er([,-0]))[1]==c?function(t){return new Er(t)}:sc;function Bi(t){return function(e){var r=us(e);return r==w?rr(e):r==S?function(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=[t,t]})),r}(e):function(t,e){return Re(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Zi(t,e,i,c,u,h,l,p){var f=2&e;if(!f&&"function"!=typeof t)throw new Ot(n);var d=c?c.length:0;if(d||(e&=-97,c=u=r),l=l===r?l:fr(la(l),0),p=p===r?p:la(p),d-=u?u.length:0,64&e){var g=c,y=u;c=u=r}var v=f?r:ts(t),m=[t,e,i,c,u,g,y,h,l,p];if(v&&function(t,e){var r=t[1],n=e[1],i=r|n,o=i<131,c=n==a&&8==r||n==a&&256==r&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==r;if(!o&&!c)return t;1&n&&(t[2]=e[2],i|=1&r?0:4);var u=e[3];if(u){var h=t[3];t[3]=h?Ei(h,u,e[4]):u,t[4]=h?ir(t[3],s):e[4]}(u=e[5])&&(h=t[5],t[5]=h?Ii(h,u,e[6]):u,t[6]=h?ir(t[5],s):e[6]),(u=e[7])&&(t[7]=u),n&a&&(t[8]=null==t[8]?e[8]:dr(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(m,v),t=m[0],e=m[1],i=m[2],c=m[3],u=m[4],!(p=m[9]=m[9]===r?f?0:t.length:fr(m[9]-d,0))&&24&e&&(e&=-25),e&&1!=e)_=8==e||16==e?function(t,e,n){var i=Ni(t);return function s(){for(var o=arguments.length,a=rt(o),c=o,u=rs(s);c--;)a[c]=arguments[c];var h=o<3&&a[0]!==u&&a[o-1]!==u?[]:ir(a,u);return(o-=h.length)<n?Hi(t,e,Mi,s.placeholder,r,a,h,r,r,n-o):be(this&&this!==ue&&this instanceof s?i:t,this,a)}}(t,e,p):e!=o&&33!=e||u.length?Mi.apply(r,m):function(t,e,r,n){var i=1&e,s=Ni(t);return function e(){for(var o=-1,a=arguments.length,c=-1,u=n.length,h=rt(u+a),l=this&&this!==ue&&this instanceof e?s:t;++c<u;)h[c]=n[c];for(;a--;)h[c++]=arguments[++o];return be(l,i?r:this,h)}}(t,e,i,c);else var _=function(t,e,r){var n=1&e,i=Ni(t);return function e(){return(this&&this!==ue&&this instanceof e?i:t).apply(n?r:this,arguments)}}(t,e,i);return xs((v?Gn:Ps)(_,m),t,e)}function Fi(t,e,n,i){return t===r||Do(t,Rt[n])&&!Nt.call(i,n)?e:t}function Wi(t,e,n,i,s,o){return Yo(t)&&Yo(e)&&(o.set(e,t),Dn(t,e,r,Wi,o),o.delete(e)),t}function Gi(t){return ea(t)?r:t}function Ji(t,e,n,i,s,o){var a=1&n,c=t.length,u=e.length;if(c!=u&&!(a&&u>c))return!1;var h=o.get(t),l=o.get(e);if(h&&l)return h==e&&l==t;var p=-1,f=!0,d=2&n?new Vr:r;for(o.set(t,e),o.set(e,t);++p<c;){var g=t[p],y=e[p];if(i)var v=a?i(y,g,p,e,t,o):i(g,y,p,t,e,o);if(v!==r){if(v)continue;f=!1;break}if(d){if(!Te(e,(function(t,e){if(!Ge(d,e)&&(g===t||s(g,t,n,i,o)))return d.push(e)}))){f=!1;break}}else if(g!==y&&!s(g,y,n,i,o)){f=!1;break}}return o.delete(t),o.delete(e),f}function Yi(t){return Os(bs(t,r,Us),t+"")}function Qi(t){return wn(t,Ca,as)}function Xi(t){return wn(t,Ra,cs)}var ts=Sr?function(t){return Sr.get(t)}:sc;function es(t){for(var e=t.name+"",r=Or[e],n=Nt.call(Or,e)?r.length:0;n--;){var i=r[n],s=i.func;if(null==s||s==t)return i.name}return e}function rs(t){return(Nt.call(Mr,"placeholder")?Mr:t).placeholder}function ns(){var t=Mr.iteratee||ec;return t=t===ec?An:t,arguments.length?t(arguments[0],arguments[1]):t}function is(t,e){var r=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?r["string"==typeof e?"string":"hash"]:r.map}function ss(t){for(var e=Ca(t),r=e.length;r--;){var n=e[r],i=t[n];e[r]=[n,i,_s(i)]}return e}function os(t,e){var n=function(t,e){return null==t?r:t[e]}(t,e);return jn(n)?n:r}var as=de?function(t){return null==t?[]:(t=It(t),Oe(de(t),(function(e){return Bt.call(t,e)})))}:pc,cs=de?function(t){for(var e=[];t;)je(e,as(t)),t=Vt(t);return e}:pc,us=bn;function hs(t,e,r){for(var n=-1,i=(e=di(e,t)).length,s=!1;++n<i;){var o=Ts(e[n]);if(!(s=null!=t&&r(t,o)))break;t=t[o]}return s||++n!=i?s:!!(i=null==t?0:t.length)&&Jo(i)&&fs(o,i)&&(Uo(t)||$o(t))}function ls(t){return"function"!=typeof t.constructor||ms(t)?{}:zr(Vt(t))}function ps(t){return Uo(t)||$o(t)||!!(Ft&&t&&t[Ft])}function fs(t,e){var r=typeof t;return!!(e=e??u)&&("number"==r||"symbol"!=r&&gt.test(t))&&t>-1&&t%1==0&&t<e}function ds(t,e,r){if(!Yo(r))return!1;var n=typeof e;return!!("number"==n?Vo(r)&&fs(e,r.length):"string"==n&&e in r)&&Do(r[e],t)}function gs(t,e){if(Uo(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!sa(t))||Y.test(t)||!J.test(t)||null!=e&&t in It(e)}function ys(t){var e=es(t),r=Mr[e];if("function"!=typeof r||!(e in kr.prototype))return!1;if(t===r)return!0;var n=ts(r);return!!n&&t===n[0]}(_r&&us(new _r(new ArrayBuffer(1)))!=j||wr&&us(new wr)!=w||br&&us(br.resolve())!=I||Er&&us(new Er)!=S||Ir&&us(new Ir)!=C)&&(us=function(t){var e=bn(t),n=e==E?t.constructor:r,i=n?Ls(n):"";if(i)switch(i){case xr:return j;case Cr:return w;case Rr:return I;case jr:return S;case Ar:return C}return e});var vs=jt?Wo:fc;function ms(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Rt)}function _s(t){return t==t&&!Yo(t)}function ws(t,e){return function(n){return null!=n&&n[t]===e&&(e!==r||t in It(n))}}function bs(t,e,n){return e=fr(e===r?t.length-1:e,0),function(){for(var r=arguments,i=-1,s=fr(r.length-e,0),o=rt(s);++i<s;)o[i]=r[e+i];i=-1;for(var a=rt(e+1);++i<e;)a[i]=r[i];return a[e]=n(o),be(t,this,a)}}function Es(t,e){return e.length<2?t:_n(t,Qn(e,0,-1))}function Is(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Ps=Cs(Gn),Ss=he||function(t,e){return ue.setTimeout(t,e)},Os=Cs(Jn);function xs(t,e,r){var n=e+"";return Os(t,function(t,e){var r=e.length;if(!r)return t;var n=r-1;return e[n]=(r>1?"& ":"")+e[n],e=e.join(r>2?", ":" "),t.replace(nt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return Ie(p,(function(r){var n="_."+r[0];e&r[1]&&!xe(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(it);return e?e[1].split(st):[]}(n),r)))}function Cs(t){var e=0,n=0;return function(){var i=gr(),s=16-(i-n);if(n=i,s>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(r,arguments)}}function Rs(t,e){var n=-1,i=t.length,s=i-1;for(e=e===r?i:e;++n<e;){var o=Vn(n,s),a=t[o];t[o]=t[n],t[n]=a}return t.length=e,t}var js,As,Ns=(js=Ao((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Q,(function(t,r,n,i){e.push(n?i.replace(ct,"$1"):r||t)})),e}),(function(t){return 500===As.size&&As.clear(),t})),As=js.cache,js);function Ts(t){if("string"==typeof t||sa(t))return t;var e=t+"";return"0"==e&&1/t==-c?"-0":e}function Ls(t){if(null!=t){try{return At.call(t)}catch{}try{return t+""}catch{}}return""}function Ms(t){if(t instanceof kr)return t.clone();var e=new qr(t.__wrapped__,t.__chain__);return e.__actions__=Pi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var zs=Bn((function(t,e){return Ko(t)?an(t,fn(e,1,Ko,!0)):[]})),Ds=Bn((function(t,e){var n=Zs(e);return Ko(n)&&(n=r),Ko(t)?an(t,fn(e,1,Ko,!0),ns(n,2)):[]})),qs=Bn((function(t,e){var n=Zs(e);return Ko(n)&&(n=r),Ko(t)?an(t,fn(e,1,Ko,!0),r,n):[]}));function ks(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:la(r);return i<0&&(i=fr(n+i,0)),ze(t,ns(e,3),i)}function $s(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var s=i-1;return n!==r&&(s=la(n),s=n<0?fr(i+s,0):dr(s,i-1)),ze(t,ns(e,3),s,!0)}function Us(t){return null!=t&&t.length?fn(t,1):[]}function Hs(t){return t&&t.length?t[0]:r}var Vs=Bn((function(t){var e=Re(t,pi);return e.length&&e[0]===t[0]?Sn(e):[]})),Ks=Bn((function(t){var e=Zs(t),n=Re(t,pi);return e===Zs(n)?e=r:n.pop(),n.length&&n[0]===t[0]?Sn(n,ns(e,2)):[]})),Bs=Bn((function(t){var e=Zs(t),n=Re(t,pi);return(e="function"==typeof e?e:r)&&n.pop(),n.length&&n[0]===t[0]?Sn(n,r,e):[]}));function Zs(t){var e=null==t?0:t.length;return e?t[e-1]:r}var Fs=Bn(Ws);function Ws(t,e){return t&&t.length&&e&&e.length?Un(t,e):t}var Gs=Yi((function(t,e){var r=null==t?0:t.length,n=en(t,e);return Hn(t,Re(e,(function(t){return fs(t,r)?+t:t})).sort(bi)),n}));function Js(t){return null==t?t:mr.call(t)}var Ys=Bn((function(t){return si(fn(t,1,Ko,!0))})),Qs=Bn((function(t){var e=Zs(t);return Ko(e)&&(e=r),si(fn(t,1,Ko,!0),ns(e,2))})),Xs=Bn((function(t){var e=Zs(t);return e="function"==typeof e?e:r,si(fn(t,1,Ko,!0),r,e)}));function to(t){if(!t||!t.length)return[];var e=0;return t=Oe(t,(function(t){if(Ko(t))return e=fr(t.length,e),!0})),Be(e,(function(e){return Re(t,Ue(e))}))}function eo(t,e){if(!t||!t.length)return[];var n=to(t);return null==e?n:Re(n,(function(t){return be(e,r,t)}))}var ro=Bn((function(t,e){return Ko(t)?an(t,e):[]})),no=Bn((function(t){return hi(Oe(t,Ko))})),io=Bn((function(t){var e=Zs(t);return Ko(e)&&(e=r),hi(Oe(t,Ko),ns(e,2))})),so=Bn((function(t){var e=Zs(t);return e="function"==typeof e?e:r,hi(Oe(t,Ko),r,e)})),oo=Bn(to),ao=Bn((function(t){var e=t.length,n=e>1?t[e-1]:r;return n="function"==typeof n?(t.pop(),n):r,eo(t,n)}));function co(t){var e=Mr(t);return e.__chain__=!0,e}function uo(t,e){return e(t)}var ho=Yi((function(t){var e=t.length,n=e?t[0]:0,i=this.__wrapped__,s=function(e){return en(e,t)};return!(e>1||this.__actions__.length)&&i instanceof kr&&fs(n)?((i=i.slice(n,+n+(e?1:0))).__actions__.push({func:uo,args:[s],thisArg:r}),new qr(i,this.__chain__).thru((function(t){return e&&!t.length&&t.push(r),t}))):this.thru(s)})),lo=Oi((function(t,e,r){Nt.call(t,r)?++t[r]:tn(t,r,1)})),po=Ti(ks),fo=Ti($s);function go(t,e){return(Uo(t)?Ie:cn)(t,ns(e,3))}function yo(t,e){return(Uo(t)?Pe:un)(t,ns(e,3))}var vo=Oi((function(t,e,r){Nt.call(t,r)?t[r].push(e):tn(t,r,[e])})),mo=Bn((function(t,e,r){var n=-1,i="function"==typeof e,s=Vo(t)?rt(t.length):[];return cn(t,(function(t){s[++n]=i?be(e,t,r):On(t,e,r)})),s})),_o=Oi((function(t,e,r){tn(t,r,e)}));function wo(t,e){return(Uo(t)?Re:Ln)(t,ns(e,3))}var bo=Oi((function(t,e,r){t[r?0:1].push(e)}),(function(){return[[],[]]})),Eo=Bn((function(t,e){if(null==t)return[];var r=e.length;return r>1&&ds(t,e[0],e[1])?e=[]:r>2&&ds(e[0],e[1],e[2])&&(e=[e[0]]),kn(t,fn(e,1),[])})),Io=ce||function(){return ue.Date.now()};function Po(t,e,n){return e=n?r:e,e=t&&null==e?t.length:e,Zi(t,a,r,r,r,r,e)}function So(t,e){var i;if("function"!=typeof e)throw new Ot(n);return t=la(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=r),i}}var Oo=Bn((function(t,e,r){var n=1;if(r.length){var i=ir(r,rs(Oo));n|=o}return Zi(t,n,e,r,i)})),xo=Bn((function(t,e,r){var n=3;if(r.length){var i=ir(r,rs(xo));n|=o}return Zi(e,n,t,r,i)}));function Co(t,e,i){var s,o,a,c,u,h,l=0,p=!1,f=!1,d=!0;if("function"!=typeof t)throw new Ot(n);function g(e){var n=s,i=o;return s=o=r,l=e,c=t.apply(i,n)}function y(t){var n=t-h;return h===r||n>=e||n<0||f&&t-l>=a}function v(){var t=Io();if(y(t))return m(t);u=Ss(v,function(t){var r=e-(t-h);return f?dr(r,a-(t-l)):r}(t))}function m(t){return u=r,d&&s?g(t):(s=o=r,c)}function _(){var t=Io(),n=y(t);if(s=arguments,o=this,h=t,n){if(u===r)return function(t){return l=t,u=Ss(v,e),p?g(t):c}(h);if(f)return vi(u),u=Ss(v,e),g(h)}return u===r&&(u=Ss(v,e)),c}return e=fa(e)||0,Yo(i)&&(p=!!i.leading,a=(f="maxWait"in i)?fr(fa(i.maxWait)||0,e):a,d="trailing"in i?!!i.trailing:d),_.cancel=function(){u!==r&&vi(u),l=0,s=h=o=u=r},_.flush=function(){return u===r?c:m(Io())},_}var Ro=Bn((function(t,e){return on(t,1,e)})),jo=Bn((function(t,e,r){return on(t,fa(e)||0,r)}));function Ao(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Ot(n);var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],s=r.cache;if(s.has(i))return s.get(i);var o=t.apply(this,n);return r.cache=s.set(i,o)||s,o};return r.cache=new(Ao.Cache||Hr),r}function No(t){if("function"!=typeof t)throw new Ot(n);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ao.Cache=Hr;var To=gi((function(t,e){var r=(e=1==e.length&&Uo(e[0])?Re(e[0],Fe(ns())):Re(fn(e,1),Fe(ns()))).length;return Bn((function(n){for(var i=-1,s=dr(n.length,r);++i<s;)n[i]=e[i].call(this,n[i]);return be(t,this,n)}))})),Lo=Bn((function(t,e){var n=ir(e,rs(Lo));return Zi(t,o,r,e,n)})),Mo=Bn((function(t,e){var n=ir(e,rs(Mo));return Zi(t,64,r,e,n)})),zo=Yi((function(t,e){return Zi(t,256,r,r,r,e)}));function Do(t,e){return t===e||t!=t&&e!=e}var qo=Ui(En),ko=Ui((function(t,e){return t>=e})),$o=xn(function(){return arguments}())?xn:function(t){return Qo(t)&&Nt.call(t,"callee")&&!Bt.call(t,"callee")},Uo=rt.isArray,Ho=ge?Fe(ge):function(t){return Qo(t)&&bn(t)==R};function Vo(t){return null!=t&&Jo(t.length)&&!Wo(t)}function Ko(t){return Qo(t)&&Vo(t)}var Bo=Le||fc,Zo=ye?Fe(ye):function(t){return Qo(t)&&bn(t)==y};function Fo(t){if(!Qo(t))return!1;var e=bn(t);return e==v||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!ea(t)}function Wo(t){if(!Yo(t))return!1;var e=bn(t);return e==m||e==_||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Go(t){return"number"==typeof t&&t==la(t)}function Jo(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=u}function Yo(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Qo(t){return null!=t&&"object"==typeof t}var Xo=ve?Fe(ve):function(t){return Qo(t)&&us(t)==w};function ta(t){return"number"==typeof t||Qo(t)&&bn(t)==b}function ea(t){if(!Qo(t)||bn(t)!=E)return!1;var e=Vt(t);if(null===e)return!0;var r=Nt.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&At.call(r)==zt}var ra=me?Fe(me):function(t){return Qo(t)&&bn(t)==P},na=_e?Fe(_e):function(t){return Qo(t)&&us(t)==S};function ia(t){return"string"==typeof t||!Uo(t)&&Qo(t)&&bn(t)==O}function sa(t){return"symbol"==typeof t||Qo(t)&&bn(t)==x}var oa=we?Fe(we):function(t){return Qo(t)&&Jo(t.length)&&!!re[bn(t)]},aa=Ui(Tn),ca=Ui((function(t,e){return t<=e}));function ua(t){if(!t)return[];if(Vo(t))return ia(t)?ar(t):Pi(t);if(Jt&&t[Jt])return function(t){for(var e,r=[];!(e=t.next()).done;)r.push(e.value);return r}(t[Jt]());var e=us(t);return(e==w?rr:e==S?sr:Da)(t)}function ha(t){return t?(t=fa(t))===c||t===-c?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function la(t){var e=ha(t),r=e%1;return e==e?r?e-r:e:0}function pa(t){return t?rn(la(t),0,l):0}function fa(t){if("number"==typeof t)return t;if(sa(t))return h;if(Yo(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Yo(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Ze(t);var r=pt.test(t);return r||dt.test(t)?oe(t.slice(2),r?2:8):lt.test(t)?h:+t}function da(t){return Si(t,Ra(t))}function ga(t){return null==t?"":ii(t)}var ya=xi((function(t,e){if(ms(e)||Vo(e))Si(e,Ca(e),t);else for(var r in e)Nt.call(e,r)&&Jr(t,r,e[r])})),va=xi((function(t,e){Si(e,Ra(e),t)})),ma=xi((function(t,e,r,n){Si(e,Ra(e),t,n)})),_a=xi((function(t,e,r,n){Si(e,Ca(e),t,n)})),wa=Yi(en),ba=Bn((function(t,e){t=It(t);var n=-1,i=e.length,s=i>2?e[2]:r;for(s&&ds(e[0],e[1],s)&&(i=1);++n<i;)for(var o=e[n],a=Ra(o),c=-1,u=a.length;++c<u;){var h=a[c],l=t[h];(l===r||Do(l,Rt[h])&&!Nt.call(t,h))&&(t[h]=o[h])}return t})),Ea=Bn((function(t){return t.push(r,Wi),be(Aa,r,t)}));function Ia(t,e,n){var i=null==t?r:_n(t,e);return i===r?n:i}function Pa(t,e){return null!=t&&hs(t,e,Pn)}var Sa=zi((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=Mt.call(e)),t[e]=r}),Ya(tc)),Oa=zi((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=Mt.call(e)),Nt.call(t,e)?t[e].push(r):t[e]=[r]}),ns),xa=Bn(On);function Ca(t){return Vo(t)?Br(t):Nn(t)}function Ra(t){return Vo(t)?Br(t,!0):function(t){if(!Yo(t))return function(t){var e=[];if(null!=t)for(var r in It(t))e.push(r);return e}(t);var e=ms(t),r=[];for(var n in t)"constructor"==n&&(e||!Nt.call(t,n))||r.push(n);return r}(t)}var ja=xi((function(t,e,r){Dn(t,e,r)})),Aa=xi((function(t,e,r,n){Dn(t,e,r,n)})),Na=Yi((function(t,e){var r={};if(null==t)return r;var n=!1;e=Re(e,(function(e){return e=di(e,t),n||(n=e.length>1),e})),Si(t,Xi(t),r),n&&(r=nn(r,7,Gi));for(var i=e.length;i--;)oi(r,e[i]);return r})),Ta=Yi((function(t,e){return null==t?{}:function(t,e){return $n(t,e,(function(e,r){return Pa(t,r)}))}(t,e)}));function La(t,e){if(null==t)return{};var r=Re(Xi(t),(function(t){return[t]}));return e=ns(e),$n(t,r,(function(t,r){return e(t,r[0])}))}var Ma=Bi(Ca),za=Bi(Ra);function Da(t){return null==t?[]:We(t,Ca(t))}var qa=Ai((function(t,e,r){return e=e.toLowerCase(),t+(r?ka(e):e)}));function ka(t){return Fa(ga(t).toLowerCase())}function $a(t){return(t=ga(t))&&t.replace(yt,Qe).replace(Gt,"")}var Ua=Ai((function(t,e,r){return t+(r?"-":"")+e.toLowerCase()})),Ha=Ai((function(t,e,r){return t+(r?" ":"")+e.toLowerCase()})),Va=ji("toLowerCase"),Ka=Ai((function(t,e,r){return t+(r?"_":"")+e.toLowerCase()})),Ba=Ai((function(t,e,r){return t+(r?" ":"")+Fa(e)})),Za=Ai((function(t,e,r){return t+(r?" ":"")+e.toUpperCase()})),Fa=ji("toUpperCase");function Wa(t,e,n){return t=ga(t),(e=n?r:e)===r?function(t){return Xt.test(t)}(t)?function(t){return t.match(Yt)||[]}(t):function(t){return t.match(ot)||[]}(t):t.match(e)||[]}var Ga=Bn((function(t,e){try{return be(t,r,e)}catch(t){return Fo(t)?t:new wt(t)}})),Ja=Yi((function(t,e){return Ie(e,(function(e){e=Ts(e),tn(t,e,Oo(t[e],t))})),t}));function Ya(t){return function(){return t}}var Qa=Li(),Xa=Li(!0);function tc(t){return t}function ec(t){return An("function"==typeof t?t:nn(t,1))}var rc=Bn((function(t,e){return function(r){return On(r,t,e)}})),nc=Bn((function(t,e){return function(r){return On(t,r,e)}}));function ic(t,e,r){var n=Ca(e),i=mn(e,n);null==r&&(!Yo(e)||!i.length&&n.length)&&(r=e,e=t,t=this,i=mn(e,Ca(e)));var s=!(Yo(r)&&"chain"in r&&!r.chain),o=Wo(t);return Ie(i,(function(r){var n=e[r];t[r]=n,o&&(t.prototype[r]=function(){var e=this.__chain__;if(s||e){var r=t(this.__wrapped__);return(r.__actions__=Pi(this.__actions__)).push({func:n,args:arguments,thisArg:t}),r.__chain__=e,r}return n.apply(t,je([this.value()],arguments))})})),t}function sc(){}var oc=qi(Re),ac=qi(Se),cc=qi(Te);function uc(t){return gs(t)?Ue(Ts(t)):function(t){return function(e){return _n(e,t)}}(t)}var hc=$i(),lc=$i(!0);function pc(){return[]}function fc(){return!1}var dc=Di((function(t,e){return t+e}),0),gc=Vi("ceil"),yc=Di((function(t,e){return t/e}),1),vc=Vi("floor"),mc=Di((function(t,e){return t*e}),1),_c=Vi("round"),wc=Di((function(t,e){return t-e}),0);return Mr.after=function(t,e){if("function"!=typeof e)throw new Ot(n);return t=la(t),function(){if(--t<1)return e.apply(this,arguments)}},Mr.ary=Po,Mr.assign=ya,Mr.assignIn=va,Mr.assignInWith=ma,Mr.assignWith=_a,Mr.at=wa,Mr.before=So,Mr.bind=Oo,Mr.bindAll=Ja,Mr.bindKey=xo,Mr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Uo(t)?t:[t]},Mr.chain=co,Mr.chunk=function(t,e,n){e=(n?ds(t,e,n):e===r)?1:fr(la(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var s=0,o=0,a=rt(le(i/e));s<i;)a[o++]=Qn(t,s,s+=e);return a},Mr.compact=function(t){for(var e=-1,r=null==t?0:t.length,n=0,i=[];++e<r;){var s=t[e];s&&(i[n++]=s)}return i},Mr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=rt(t-1),r=arguments[0],n=t;n--;)e[n-1]=arguments[n];return je(Uo(r)?Pi(r):[r],fn(e,1))},Mr.cond=function(t){var e=null==t?0:t.length,r=ns();return t=e?Re(t,(function(t){if("function"!=typeof t[1])throw new Ot(n);return[r(t[0]),t[1]]})):[],Bn((function(r){for(var n=-1;++n<e;){var i=t[n];if(be(i[0],this,r))return be(i[1],this,r)}}))},Mr.conforms=function(t){return function(t){var e=Ca(t);return function(r){return sn(r,t,e)}}(nn(t,1))},Mr.constant=Ya,Mr.countBy=lo,Mr.create=function(t,e){var r=zr(t);return null==e?r:Xr(r,e)},Mr.curry=function t(e,n,i){var s=Zi(e,8,r,r,r,r,r,n=i?r:n);return s.placeholder=t.placeholder,s},Mr.curryRight=function t(e,n,i){var s=Zi(e,16,r,r,r,r,r,n=i?r:n);return s.placeholder=t.placeholder,s},Mr.debounce=Co,Mr.defaults=ba,Mr.defaultsDeep=Ea,Mr.defer=Ro,Mr.delay=jo,Mr.difference=zs,Mr.differenceBy=Ds,Mr.differenceWith=qs,Mr.drop=function(t,e,n){var i=null==t?0:t.length;return i?Qn(t,(e=n||e===r?1:la(e))<0?0:e,i):[]},Mr.dropRight=function(t,e,n){var i=null==t?0:t.length;return i?Qn(t,0,(e=i-(e=n||e===r?1:la(e)))<0?0:e):[]},Mr.dropRightWhile=function(t,e){return t&&t.length?ci(t,ns(e,3),!0,!0):[]},Mr.dropWhile=function(t,e){return t&&t.length?ci(t,ns(e,3),!0):[]},Mr.fill=function(t,e,n,i){var s=null==t?0:t.length;return s?(n&&"number"!=typeof n&&ds(t,e,n)&&(n=0,i=s),function(t,e,n,i){var s=t.length;for((n=la(n))<0&&(n=-n>s?0:s+n),(i=i===r||i>s?s:la(i))<0&&(i+=s),i=n>i?0:pa(i);n<i;)t[n++]=e;return t}(t,e,n,i)):[]},Mr.filter=function(t,e){return(Uo(t)?Oe:pn)(t,ns(e,3))},Mr.flatMap=function(t,e){return fn(wo(t,e),1)},Mr.flatMapDeep=function(t,e){return fn(wo(t,e),c)},Mr.flatMapDepth=function(t,e,n){return n=n===r?1:la(n),fn(wo(t,e),n)},Mr.flatten=Us,Mr.flattenDeep=function(t){return null!=t&&t.length?fn(t,c):[]},Mr.flattenDepth=function(t,e){return null!=t&&t.length?fn(t,e=e===r?1:la(e)):[]},Mr.flip=function(t){return Zi(t,512)},Mr.flow=Qa,Mr.flowRight=Xa,Mr.fromPairs=function(t){for(var e=-1,r=null==t?0:t.length,n={};++e<r;){var i=t[e];n[i[0]]=i[1]}return n},Mr.functions=function(t){return null==t?[]:mn(t,Ca(t))},Mr.functionsIn=function(t){return null==t?[]:mn(t,Ra(t))},Mr.groupBy=vo,Mr.initial=function(t){return null!=t&&t.length?Qn(t,0,-1):[]},Mr.intersection=Vs,Mr.intersectionBy=Ks,Mr.intersectionWith=Bs,Mr.invert=Sa,Mr.invertBy=Oa,Mr.invokeMap=mo,Mr.iteratee=ec,Mr.keyBy=_o,Mr.keys=Ca,Mr.keysIn=Ra,Mr.map=wo,Mr.mapKeys=function(t,e){var r={};return e=ns(e,3),yn(t,(function(t,n,i){tn(r,e(t,n,i),t)})),r},Mr.mapValues=function(t,e){var r={};return e=ns(e,3),yn(t,(function(t,n,i){tn(r,n,e(t,n,i))})),r},Mr.matches=function(t){return Mn(nn(t,1))},Mr.matchesProperty=function(t,e){return zn(t,nn(e,1))},Mr.memoize=Ao,Mr.merge=ja,Mr.mergeWith=Aa,Mr.method=rc,Mr.methodOf=nc,Mr.mixin=ic,Mr.negate=No,Mr.nthArg=function(t){return t=la(t),Bn((function(e){return qn(e,t)}))},Mr.omit=Na,Mr.omitBy=function(t,e){return La(t,No(ns(e)))},Mr.once=function(t){return So(2,t)},Mr.orderBy=function(t,e,n,i){return null==t?[]:(Uo(e)||(e=null==e?[]:[e]),Uo(n=i?r:n)||(n=null==n?[]:[n]),kn(t,e,n))},Mr.over=oc,Mr.overArgs=To,Mr.overEvery=ac,Mr.overSome=cc,Mr.partial=Lo,Mr.partialRight=Mo,Mr.partition=bo,Mr.pick=Ta,Mr.pickBy=La,Mr.property=uc,Mr.propertyOf=function(t){return function(e){return null==t?r:_n(t,e)}},Mr.pull=Fs,Mr.pullAll=Ws,Mr.pullAllBy=function(t,e,r){return t&&t.length&&e&&e.length?Un(t,e,ns(r,2)):t},Mr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Un(t,e,r,n):t},Mr.pullAt=Gs,Mr.range=hc,Mr.rangeRight=lc,Mr.rearg=zo,Mr.reject=function(t,e){return(Uo(t)?Oe:pn)(t,No(ns(e,3)))},Mr.remove=function(t,e){var r=[];if(!t||!t.length)return r;var n=-1,i=[],s=t.length;for(e=ns(e,3);++n<s;){var o=t[n];e(o,n,t)&&(r.push(o),i.push(n))}return Hn(t,i),r},Mr.rest=function(t,e){if("function"!=typeof t)throw new Ot(n);return Bn(t,e=e===r?e:la(e))},Mr.reverse=Js,Mr.sampleSize=function(t,e,n){return e=(n?ds(t,e,n):e===r)?1:la(e),(Uo(t)?Fr:Fn)(t,e)},Mr.set=function(t,e,r){return null==t?t:Wn(t,e,r)},Mr.setWith=function(t,e,n,i){return i="function"==typeof i?i:r,null==t?t:Wn(t,e,n,i)},Mr.shuffle=function(t){return(Uo(t)?Wr:Yn)(t)},Mr.slice=function(t,e,n){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&ds(t,e,n)?(e=0,n=i):(e=null==e?0:la(e),n=n===r?i:la(n)),Qn(t,e,n)):[]},Mr.sortBy=Eo,Mr.sortedUniq=function(t){return t&&t.length?ri(t):[]},Mr.sortedUniqBy=function(t,e){return t&&t.length?ri(t,ns(e,2)):[]},Mr.split=function(t,e,n){return n&&"number"!=typeof n&&ds(t,e,n)&&(e=n=r),(n=n===r?l:n>>>0)?(t=ga(t))&&("string"==typeof e||null!=e&&!ra(e))&&!(e=ii(e))&&er(t)?yi(ar(t),0,n):t.split(e,n):[]},Mr.spread=function(t,e){if("function"!=typeof t)throw new Ot(n);return e=null==e?0:fr(la(e),0),Bn((function(r){var n=r[e],i=yi(r,0,e);return n&&je(i,n),be(t,this,i)}))},Mr.tail=function(t){var e=null==t?0:t.length;return e?Qn(t,1,e):[]},Mr.take=function(t,e,n){return t&&t.length?Qn(t,0,(e=n||e===r?1:la(e))<0?0:e):[]},Mr.takeRight=function(t,e,n){var i=null==t?0:t.length;return i?Qn(t,(e=i-(e=n||e===r?1:la(e)))<0?0:e,i):[]},Mr.takeRightWhile=function(t,e){return t&&t.length?ci(t,ns(e,3),!1,!0):[]},Mr.takeWhile=function(t,e){return t&&t.length?ci(t,ns(e,3)):[]},Mr.tap=function(t,e){return e(t),t},Mr.throttle=function(t,e,r){var i=!0,s=!0;if("function"!=typeof t)throw new Ot(n);return Yo(r)&&(i="leading"in r?!!r.leading:i,s="trailing"in r?!!r.trailing:s),Co(t,e,{leading:i,maxWait:e,trailing:s})},Mr.thru=uo,Mr.toArray=ua,Mr.toPairs=Ma,Mr.toPairsIn=za,Mr.toPath=function(t){return Uo(t)?Re(t,Ts):sa(t)?[t]:Pi(Ns(ga(t)))},Mr.toPlainObject=da,Mr.transform=function(t,e,r){var n=Uo(t),i=n||Bo(t)||oa(t);if(e=ns(e,4),null==r){var s=t&&t.constructor;r=i?n?new s:[]:Yo(t)&&Wo(s)?zr(Vt(t)):{}}return(i?Ie:yn)(t,(function(t,n,i){return e(r,t,n,i)})),r},Mr.unary=function(t){return Po(t,1)},Mr.union=Ys,Mr.unionBy=Qs,Mr.unionWith=Xs,Mr.uniq=function(t){return t&&t.length?si(t):[]},Mr.uniqBy=function(t,e){return t&&t.length?si(t,ns(e,2)):[]},Mr.uniqWith=function(t,e){return e="function"==typeof e?e:r,t&&t.length?si(t,r,e):[]},Mr.unset=function(t,e){return null==t||oi(t,e)},Mr.unzip=to,Mr.unzipWith=eo,Mr.update=function(t,e,r){return null==t?t:ai(t,e,fi(r))},Mr.updateWith=function(t,e,n,i){return i="function"==typeof i?i:r,null==t?t:ai(t,e,fi(n),i)},Mr.values=Da,Mr.valuesIn=function(t){return null==t?[]:We(t,Ra(t))},Mr.without=ro,Mr.words=Wa,Mr.wrap=function(t,e){return Lo(fi(e),t)},Mr.xor=no,Mr.xorBy=io,Mr.xorWith=so,Mr.zip=oo,Mr.zipObject=function(t,e){return li(t||[],e||[],Jr)},Mr.zipObjectDeep=function(t,e){return li(t||[],e||[],Wn)},Mr.zipWith=ao,Mr.entries=Ma,Mr.entriesIn=za,Mr.extend=va,Mr.extendWith=ma,ic(Mr,Mr),Mr.add=dc,Mr.attempt=Ga,Mr.camelCase=qa,Mr.capitalize=ka,Mr.ceil=gc,Mr.clamp=function(t,e,n){return n===r&&(n=e,e=r),n!==r&&(n=(n=fa(n))==n?n:0),e!==r&&(e=(e=fa(e))==e?e:0),rn(fa(t),e,n)},Mr.clone=function(t){return nn(t,4)},Mr.cloneDeep=function(t){return nn(t,5)},Mr.cloneDeepWith=function(t,e){return nn(t,5,e="function"==typeof e?e:r)},Mr.cloneWith=function(t,e){return nn(t,4,e="function"==typeof e?e:r)},Mr.conformsTo=function(t,e){return null==e||sn(t,e,Ca(e))},Mr.deburr=$a,Mr.defaultTo=function(t,e){return null==t||t!=t?e:t},Mr.divide=yc,Mr.endsWith=function(t,e,n){t=ga(t),e=ii(e);var i=t.length,s=n=n===r?i:rn(la(n),0,i);return(n-=e.length)>=0&&t.slice(n,s)==e},Mr.eq=Do,Mr.escape=function(t){return(t=ga(t))&&Z.test(t)?t.replace(K,Xe):t},Mr.escapeRegExp=function(t){return(t=ga(t))&&tt.test(t)?t.replace(X,"\\$&"):t},Mr.every=function(t,e,n){var i=Uo(t)?Se:hn;return n&&ds(t,e,n)&&(e=r),i(t,ns(e,3))},Mr.find=po,Mr.findIndex=ks,Mr.findKey=function(t,e){return Me(t,ns(e,3),yn)},Mr.findLast=fo,Mr.findLastIndex=$s,Mr.findLastKey=function(t,e){return Me(t,ns(e,3),vn)},Mr.floor=vc,Mr.forEach=go,Mr.forEachRight=yo,Mr.forIn=function(t,e){return null==t?t:dn(t,ns(e,3),Ra)},Mr.forInRight=function(t,e){return null==t?t:gn(t,ns(e,3),Ra)},Mr.forOwn=function(t,e){return t&&yn(t,ns(e,3))},Mr.forOwnRight=function(t,e){return t&&vn(t,ns(e,3))},Mr.get=Ia,Mr.gt=qo,Mr.gte=ko,Mr.has=function(t,e){return null!=t&&hs(t,e,In)},Mr.hasIn=Pa,Mr.head=Hs,Mr.identity=tc,Mr.includes=function(t,e,r,n){t=Vo(t)?t:Da(t),r=r&&!n?la(r):0;var i=t.length;return r<0&&(r=fr(i+r,0)),ia(t)?r<=i&&t.indexOf(e,r)>-1:!!i&&De(t,e,r)>-1},Mr.indexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:la(r);return i<0&&(i=fr(n+i,0)),De(t,e,i)},Mr.inRange=function(t,e,n){return e=ha(e),n===r?(n=e,e=0):n=ha(n),function(t,e,r){return t>=dr(e,r)&&t<fr(e,r)}(t=fa(t),e,n)},Mr.invoke=xa,Mr.isArguments=$o,Mr.isArray=Uo,Mr.isArrayBuffer=Ho,Mr.isArrayLike=Vo,Mr.isArrayLikeObject=Ko,Mr.isBoolean=function(t){return!0===t||!1===t||Qo(t)&&bn(t)==g},Mr.isBuffer=Bo,Mr.isDate=Zo,Mr.isElement=function(t){return Qo(t)&&1===t.nodeType&&!ea(t)},Mr.isEmpty=function(t){if(null==t)return!0;if(Vo(t)&&(Uo(t)||"string"==typeof t||"function"==typeof t.splice||Bo(t)||oa(t)||$o(t)))return!t.length;var e=us(t);if(e==w||e==S)return!t.size;if(ms(t))return!Nn(t).length;for(var r in t)if(Nt.call(t,r))return!1;return!0},Mr.isEqual=function(t,e){return Cn(t,e)},Mr.isEqualWith=function(t,e,n){var i=(n="function"==typeof n?n:r)?n(t,e):r;return i===r?Cn(t,e,r,n):!!i},Mr.isError=Fo,Mr.isFinite=function(t){return"number"==typeof t&&He(t)},Mr.isFunction=Wo,Mr.isInteger=Go,Mr.isLength=Jo,Mr.isMap=Xo,Mr.isMatch=function(t,e){return t===e||Rn(t,e,ss(e))},Mr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:r,Rn(t,e,ss(e),n)},Mr.isNaN=function(t){return ta(t)&&t!=+t},Mr.isNative=function(t){if(vs(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jn(t)},Mr.isNil=function(t){return null==t},Mr.isNull=function(t){return null===t},Mr.isNumber=ta,Mr.isObject=Yo,Mr.isObjectLike=Qo,Mr.isPlainObject=ea,Mr.isRegExp=ra,Mr.isSafeInteger=function(t){return Go(t)&&t>=-u&&t<=u},Mr.isSet=na,Mr.isString=ia,Mr.isSymbol=sa,Mr.isTypedArray=oa,Mr.isUndefined=function(t){return t===r},Mr.isWeakMap=function(t){return Qo(t)&&us(t)==C},Mr.isWeakSet=function(t){return Qo(t)&&"[object WeakSet]"==bn(t)},Mr.join=function(t,e){return null==t?"":lr.call(t,e)},Mr.kebabCase=Ua,Mr.last=Zs,Mr.lastIndexOf=function(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var s=i;return n!==r&&(s=(s=la(n))<0?fr(i+s,0):dr(s,i-1)),e==e?function(t,e,r){for(var n=r+1;n--;)if(t[n]===e)return n;return n}(t,e,s):ze(t,ke,s,!0)},Mr.lowerCase=Ha,Mr.lowerFirst=Va,Mr.lt=aa,Mr.lte=ca,Mr.max=function(t){return t&&t.length?ln(t,tc,En):r},Mr.maxBy=function(t,e){return t&&t.length?ln(t,ns(e,2),En):r},Mr.mean=function(t){return $e(t,tc)},Mr.meanBy=function(t,e){return $e(t,ns(e,2))},Mr.min=function(t){return t&&t.length?ln(t,tc,Tn):r},Mr.minBy=function(t,e){return t&&t.length?ln(t,ns(e,2),Tn):r},Mr.stubArray=pc,Mr.stubFalse=fc,Mr.stubObject=function(){return{}},Mr.stubString=function(){return""},Mr.stubTrue=function(){return!0},Mr.multiply=mc,Mr.nth=function(t,e){return t&&t.length?qn(t,la(e)):r},Mr.noConflict=function(){return ue._===this&&(ue._=Dt),this},Mr.noop=sc,Mr.now=Io,Mr.pad=function(t,e,r){t=ga(t);var n=(e=la(e))?or(t):0;if(!e||n>=e)return t;var i=(e-n)/2;return ki(fe(i),r)+t+ki(le(i),r)},Mr.padEnd=function(t,e,r){t=ga(t);var n=(e=la(e))?or(t):0;return e&&n<e?t+ki(e-n,r):t},Mr.padStart=function(t,e,r){t=ga(t);var n=(e=la(e))?or(t):0;return e&&n<e?ki(e-n,r)+t:t},Mr.parseInt=function(t,e,r){return r||null==e?e=0:e&&(e=+e),yr(ga(t).replace(et,""),e||0)},Mr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&ds(t,e,n)&&(e=n=r),n===r&&("boolean"==typeof e?(n=e,e=r):"boolean"==typeof t&&(n=t,t=r)),t===r&&e===r?(t=0,e=1):(t=ha(t),e===r?(e=t,t=0):e=ha(e)),t>e){var i=t;t=e,e=i}if(n||t%1||e%1){var s=vr();return dr(t+s*(e-t+se("1e-"+((s+"").length-1))),e)}return Vn(t,e)},Mr.reduce=function(t,e,r){var n=Uo(t)?Ae:Ve,i=arguments.length<3;return n(t,ns(e,4),r,i,cn)},Mr.reduceRight=function(t,e,r){var n=Uo(t)?Ne:Ve,i=arguments.length<3;return n(t,ns(e,4),r,i,un)},Mr.repeat=function(t,e,n){return e=(n?ds(t,e,n):e===r)?1:la(e),Kn(ga(t),e)},Mr.replace=function(){var t=arguments,e=ga(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Mr.result=function(t,e,n){var i=-1,s=(e=di(e,t)).length;for(s||(s=1,t=r);++i<s;){var o=null==t?r:t[Ts(e[i])];o===r&&(i=s,o=n),t=Wo(o)?o.call(t):o}return t},Mr.round=_c,Mr.runInContext=t,Mr.sample=function(t){return(Uo(t)?Zr:Zn)(t)},Mr.size=function(t){if(null==t)return 0;if(Vo(t))return ia(t)?or(t):t.length;var e=us(t);return e==w||e==S?t.size:Nn(t).length},Mr.snakeCase=Ka,Mr.some=function(t,e,n){var i=Uo(t)?Te:Xn;return n&&ds(t,e,n)&&(e=r),i(t,ns(e,3))},Mr.sortedIndex=function(t,e){return ti(t,e)},Mr.sortedIndexBy=function(t,e,r){return ei(t,e,ns(r,2))},Mr.sortedIndexOf=function(t,e){var r=null==t?0:t.length;if(r){var n=ti(t,e);if(n<r&&Do(t[n],e))return n}return-1},Mr.sortedLastIndex=function(t,e){return ti(t,e,!0)},Mr.sortedLastIndexBy=function(t,e,r){return ei(t,e,ns(r,2),!0)},Mr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var r=ti(t,e,!0)-1;if(Do(t[r],e))return r}return-1},Mr.startCase=Ba,Mr.startsWith=function(t,e,r){return t=ga(t),r=null==r?0:rn(la(r),0,t.length),e=ii(e),t.slice(r,r+e.length)==e},Mr.subtract=wc,Mr.sum=function(t){return t&&t.length?Ke(t,tc):0},Mr.sumBy=function(t,e){return t&&t.length?Ke(t,ns(e,2)):0},Mr.template=function(t,e,n){var i=Mr.templateSettings;n&&ds(t,e,n)&&(e=r),t=ga(t),e=ma({},e,i,Fi);var s,o,a=ma({},e.imports,i.imports,Fi),c=Ca(a),u=We(a,c),h=0,l=e.interpolate||vt,p="__p += '",f=Pt((e.escape||vt).source+"|"+l.source+"|"+(l===G?ut:vt).source+"|"+(e.evaluate||vt).source+"|$","g"),d="//# sourceURL="+(Nt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ee+"]")+"\n";t.replace(f,(function(e,r,n,i,a,c){return n||(n=i),p+=t.slice(h,c).replace(mt,tr),r&&(s=!0,p+="' +\n__e("+r+") +\n'"),a&&(o=!0,p+="';\n"+a+";\n__p += '"),n&&(p+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),h=c+e.length,e})),p+="';\n";var g=Nt.call(e,"variable")&&e.variable;if(g){if(at.test(g))throw new wt("Invalid `variable` option passed into `_.template`")}else p="with (obj) {\n"+p+"\n}\n";p=(o?p.replace($,""):p).replace(U,"$1").replace(H,"$1;"),p="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(s?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var y=Ga((function(){return bt(c,d+"return "+p).apply(r,u)}));if(y.source=p,Fo(y))throw y;return y},Mr.times=function(t,e){if((t=la(t))<1||t>u)return[];var r=l,n=dr(t,l);e=ns(e),t-=l;for(var i=Be(n,e);++r<t;)e(r);return i},Mr.toFinite=ha,Mr.toInteger=la,Mr.toLength=pa,Mr.toLower=function(t){return ga(t).toLowerCase()},Mr.toNumber=fa,Mr.toSafeInteger=function(t){return t?rn(la(t),-u,u):0===t?t:0},Mr.toString=ga,Mr.toUpper=function(t){return ga(t).toUpperCase()},Mr.trim=function(t,e,n){if((t=ga(t))&&(n||e===r))return Ze(t);if(!t||!(e=ii(e)))return t;var i=ar(t),s=ar(e);return yi(i,Je(i,s),Ye(i,s)+1).join("")},Mr.trimEnd=function(t,e,n){if((t=ga(t))&&(n||e===r))return t.slice(0,cr(t)+1);if(!t||!(e=ii(e)))return t;var i=ar(t);return yi(i,0,Ye(i,ar(e))+1).join("")},Mr.trimStart=function(t,e,n){if((t=ga(t))&&(n||e===r))return t.replace(et,"");if(!t||!(e=ii(e)))return t;var i=ar(t);return yi(i,Je(i,ar(e))).join("")},Mr.truncate=function(t,e){var n=30,i="...";if(Yo(e)){var s="separator"in e?e.separator:s;n="length"in e?la(e.length):n,i="omission"in e?ii(e.omission):i}var o=(t=ga(t)).length;if(er(t)){var a=ar(t);o=a.length}if(n>=o)return t;var c=n-or(i);if(c<1)return i;var u=a?yi(a,0,c).join(""):t.slice(0,c);if(s===r)return u+i;if(a&&(c+=u.length-c),ra(s)){if(t.slice(c).search(s)){var h,l=u;for(s.global||(s=Pt(s.source,ga(ht.exec(s))+"g")),s.lastIndex=0;h=s.exec(l);)var p=h.index;u=u.slice(0,p===r?c:p)}}else if(t.indexOf(ii(s),c)!=c){var f=u.lastIndexOf(s);f>-1&&(u=u.slice(0,f))}return u+i},Mr.unescape=function(t){return(t=ga(t))&&B.test(t)?t.replace(V,ur):t},Mr.uniqueId=function(t){var e=++Tt;return ga(t)+e},Mr.upperCase=Za,Mr.upperFirst=Fa,Mr.each=go,Mr.eachRight=yo,Mr.first=Hs,ic(Mr,function(){var t={};return yn(Mr,(function(e,r){Nt.call(Mr.prototype,r)||(t[r]=e)})),t}(),{chain:!1}),Mr.VERSION="4.17.21",Ie(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Mr[t].placeholder=Mr})),Ie(["drop","take"],(function(t,e){kr.prototype[t]=function(n){n=n===r?1:fr(la(n),0);var i=this.__filtered__&&!e?new kr(this):this.clone();return i.__filtered__?i.__takeCount__=dr(n,i.__takeCount__):i.__views__.push({size:dr(n,l),type:t+(i.__dir__<0?"Right":"")}),i},kr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Ie(["filter","map","takeWhile"],(function(t,e){var r=e+1,n=1==r||3==r;kr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ns(t,3),type:r}),e.__filtered__=e.__filtered__||n,e}})),Ie(["head","last"],(function(t,e){var r="take"+(e?"Right":"");kr.prototype[t]=function(){return this[r](1).value()[0]}})),Ie(["initial","tail"],(function(t,e){var r="drop"+(e?"":"Right");kr.prototype[t]=function(){return this.__filtered__?new kr(this):this[r](1)}})),kr.prototype.compact=function(){return this.filter(tc)},kr.prototype.find=function(t){return this.filter(t).head()},kr.prototype.findLast=function(t){return this.reverse().find(t)},kr.prototype.invokeMap=Bn((function(t,e){return"function"==typeof t?new kr(this):this.map((function(r){return On(r,t,e)}))})),kr.prototype.reject=function(t){return this.filter(No(ns(t)))},kr.prototype.slice=function(t,e){t=la(t);var n=this;return n.__filtered__&&(t>0||e<0)?new kr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==r&&(n=(e=la(e))<0?n.dropRight(-e):n.take(e-t)),n)},kr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},kr.prototype.toArray=function(){return this.take(l)},yn(kr.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),i=/^(?:head|last)$/.test(e),s=Mr[i?"take"+("last"==e?"Right":""):e],o=i||/^find/.test(e);s&&(Mr.prototype[e]=function(){var e=this.__wrapped__,a=i?[1]:arguments,c=e instanceof kr,u=a[0],h=c||Uo(e),l=function(t){var e=s.apply(Mr,je([t],a));return i&&p?e[0]:e};h&&n&&"function"==typeof u&&1!=u.length&&(c=h=!1);var p=this.__chain__,f=!!this.__actions__.length,d=o&&!p,g=c&&!f;if(!o&&h){e=g?e:new kr(this);var y=t.apply(e,a);return y.__actions__.push({func:uo,args:[l],thisArg:r}),new qr(y,p)}return d&&g?t.apply(this,a):(y=this.thru(l),d?i?y.value()[0]:y.value():y)})})),Ie(["pop","push","shift","sort","splice","unshift"],(function(t){var e=xt[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);Mr.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var i=this.value();return e.apply(Uo(i)?i:[],t)}return this[r]((function(r){return e.apply(Uo(r)?r:[],t)}))}})),yn(kr.prototype,(function(t,e){var r=Mr[e];if(r){var n=r.name+"";Nt.call(Or,n)||(Or[n]=[]),Or[n].push({name:e,func:r})}})),Or[Mi(r,2).name]=[{name:"wrapper",func:r}],kr.prototype.clone=function(){var t=new kr(this.__wrapped__);return t.__actions__=Pi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Pi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Pi(this.__views__),t},kr.prototype.reverse=function(){if(this.__filtered__){var t=new kr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},kr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,r=Uo(t),n=e<0,i=r?t.length:0,s=function(t,e,r){for(var n=-1,i=r.length;++n<i;){var s=r[n],o=s.size;switch(s.type){case"drop":t+=o;break;case"dropRight":e-=o;break;case"take":e=dr(e,t+o);break;case"takeRight":t=fr(t,e-o)}}return{start:t,end:e}}(0,i,this.__views__),o=s.start,a=s.end,c=a-o,u=n?a:o-1,h=this.__iteratees__,l=h.length,p=0,f=dr(c,this.__takeCount__);if(!r||!n&&i==c&&f==c)return ui(t,this.__actions__);var d=[];t:for(;c--&&p<f;){for(var g=-1,y=t[u+=e];++g<l;){var v=h[g],m=v.iteratee,_=v.type,w=m(y);if(2==_)y=w;else if(!w){if(1==_)continue t;break t}}d[p++]=y}return d},Mr.prototype.at=ho,Mr.prototype.chain=function(){return co(this)},Mr.prototype.commit=function(){return new qr(this.value(),this.__chain__)},Mr.prototype.next=function(){this.__values__===r&&(this.__values__=ua(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},Mr.prototype.plant=function(t){for(var e,n=this;n instanceof Dr;){var i=Ms(n);i.__index__=0,i.__values__=r,e?s.__wrapped__=i:e=i;var s=i;n=n.__wrapped__}return s.__wrapped__=t,e},Mr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof kr){var e=t;return this.__actions__.length&&(e=new kr(this)),(e=e.reverse()).__actions__.push({func:uo,args:[Js],thisArg:r}),new qr(e,this.__chain__)}return this.thru(Js)},Mr.prototype.toJSON=Mr.prototype.valueOf=Mr.prototype.value=function(){return ui(this.__wrapped__,this.__actions__)},Mr.prototype.first=Mr.prototype.head,Jt&&(Mr.prototype[Jt]=function(){return this}),Mr}();le?((le.exports=hr)._=hr,he._=hr):ue._=hr}).call(kn)}($n,$n.exports);var Un=Object.defineProperty,Hn=Object.defineProperties,Vn=Object.getOwnPropertyDescriptors,Kn=Object.getOwnPropertySymbols,Bn=Object.prototype.hasOwnProperty,Zn=Object.prototype.propertyIsEnumerable,Fn=(t,e,r)=>e in t?Un(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Wn=(t,e)=>{for(var r in e||(e={}))Bn.call(e,r)&&Fn(t,r,e[r]);if(Kn)for(var r of Kn(e))Zn.call(e,r)&&Fn(t,r,e[r]);return t},Gn=(t,e)=>Hn(t,Vn(e));function Jn(t,e,r){let n;const i=Yn(t);return e.rpcMap&&(n=e.rpcMap[i]),n||(n=`https://rpc.walletconnect.com/v1?chainId=eip155:${i}&projectId=${r}`),n}function Yn(t){return t.includes("eip155")?Number(t.split(":")[1]):Number(t)}function Qn(t){return t.map((t=>`${t.split(":")[0]}:${t.split(":")[1]}`))}function Xn(t){var e,r,n,i;const o={};if(!(0,s.L5)(t))return o;for(const[a,c]of Object.entries(t)){const t=(0,s.gp)(a)?[a]:c.chains,u=c.methods||[],h=c.events||[],l=c.rpcMap||{},p=(0,s.M)(a);o[p]=Gn(Wn(Wn({},o[p]),c),{chains:(0,s.eG)(t,null==(e=o[p])?void 0:e.chains),methods:(0,s.eG)(u,null==(r=o[p])?void 0:r.methods),events:(0,s.eG)(h,null==(n=o[p])?void 0:n.events),rpcMap:Wn(Wn({},l),null==(i=o[p])?void 0:i.rpcMap)})}return o}function ti(t){return t.includes(":")?t.split(":")[2]:t}function ei(t){const e={};for(const[r,n]of Object.entries(t)){const t=n.methods||[],i=n.events||[],o=n.accounts||[],a=(0,s.gp)(r)?[r]:n.chains?n.chains:Qn(n.accounts);e[r]={chains:a,methods:t,events:i,accounts:o}}return e}const ri={},ni=t=>ri[t],ii=(t,e)=>{ri[t]=e};class si{constructor(t){this.name="polkadot",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(this.chainId=t,!this.httpProviders[t]){const r=e||Jn(`${this.name}:${t}`,this.namespace);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.events.emit(qn,`${this.name}:${this.chainId}`)}getAccounts(){const t=this.namespace.accounts;return t&&t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2]))||[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;t[e]=this.createHttpProvider(e,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||Jn(t,this.namespace);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}class oi{constructor(t){this.name="eip155",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.httpProviders=this.createHttpProviders(),this.chainId=parseInt(this.getDefaultChain())}async request(t){switch(t.request.method){case"eth_requestAccounts":case"eth_accounts":return this.getAccounts();case"wallet_switchEthereumChain":return await this.handleSwitchChain(t);case"eth_chainId":return parseInt(this.getDefaultChain())}return this.namespace.methods.includes(t.request.method)?await this.client.request(t):this.getHttpProvider().request(t.request)}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}setDefaultChain(t,e){const r=Yn(t);if(!this.httpProviders[r]){const t=e||Jn(`${this.name}:${r}`,this.namespace,this.client.core.projectId);if(!t)throw new Error(`No RPC url provided for chainId: ${r}`);this.setHttpProvider(r,t)}this.chainId=r,this.events.emit(qn,`${this.name}:${r}`)}requestAccounts(){return this.getAccounts()}getDefaultChain(){if(this.chainId)return this.chainId.toString();if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}createHttpProvider(t,e){const r=e||Jn(`${this.name}:${t}`,this.namespace,this.client.core.projectId);return typeof r>"u"?void 0:new dt(new Ln(r,ni("disableProviderPing")))}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;const n=Yn(e);t[n]=this.createHttpProvider(n,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}getHttpProvider(){const t=this.chainId,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}async handleSwitchChain(t){var e,r;let n=t.request.params?null==(e=t.request.params[0])?void 0:e.chainId:"0x0";n=n.startsWith("0x")?n:`0x${n}`;const i=parseInt(n,16);if(this.isChainApproved(i))this.setDefaultChain(`${i}`);else{if(!this.namespace.methods.includes("wallet_switchEthereumChain"))throw new Error(`Failed to switch to chain 'eip155:${i}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);await this.client.request({topic:t.topic,request:{method:t.request.method,params:[{chainId:n}]},chainId:null==(r=this.namespace.chains)?void 0:r[0]}),this.setDefaultChain(`${i}`)}return null}isChainApproved(t){return this.namespace.chains.includes(`${this.name}:${t}`)}}class ai{constructor(t){this.name="solana",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(!this.httpProviders[t]){const r=e||Jn(`${this.name}:${t}`,this.namespace,this.client.core.projectId);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.chainId=t,this.events.emit(qn,`${this.name}:${this.chainId}`)}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;t[e]=this.createHttpProvider(e,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||Jn(t,this.namespace,this.client.core.projectId);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}class ci{constructor(t){this.name="cosmos",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(this.chainId=t,!this.httpProviders[t]){const r=e||Jn(`${this.name}:${t}`,this.namespace,this.client.core.projectId);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.events.emit(qn,`${this.name}:${this.chainId}`)}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;t[e]=this.createHttpProvider(e,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||Jn(t,this.namespace,this.client.core.projectId);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}class ui{constructor(t){this.name="cip34",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(this.chainId=t,!this.httpProviders[t]){const r=e||this.getCardanoRPCUrl(t);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.events.emit(qn,`${this.name}:${this.chainId}`)}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{const r=this.getCardanoRPCUrl(e);t[e]=this.createHttpProvider(e,r)})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}getCardanoRPCUrl(t){const e=this.namespace.rpcMap;if(e)return e[t]}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||this.getCardanoRPCUrl(t);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}class hi{constructor(t){this.name="elrond",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(!this.httpProviders[t]){const r=e||Jn(`${this.name}:${t}`,this.namespace,this.client.core.projectId);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.chainId=t,this.events.emit(qn,`${this.name}:${this.chainId}`)}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;t[e]=this.createHttpProvider(e,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||Jn(t,this.namespace,this.client.core.projectId);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}class li{constructor(t){this.name="multiversx",this.namespace=t.namespace,this.events=ni("events"),this.client=ni("client"),this.chainId=this.getDefaultChain(),this.httpProviders=this.createHttpProviders()}updateNamespace(t){this.namespace=Object.assign(this.namespace,t)}requestAccounts(){return this.getAccounts()}request(t){return this.namespace.methods.includes(t.request.method)?this.client.request(t):this.getHttpProvider().request(t.request)}setDefaultChain(t,e){if(!this.httpProviders[t]){const r=e||Jn(`${this.name}:${t}`,this.namespace,this.client.core.projectId);if(!r)throw new Error(`No RPC url provided for chainId: ${t}`);this.setHttpProvider(t,r)}this.chainId=t,this.events.emit(qn,`${this.name}:${this.chainId}`)}getDefaultChain(){if(this.chainId)return this.chainId;if(this.namespace.defaultChain)return this.namespace.defaultChain;const t=this.namespace.chains[0];if(!t)throw new Error("ChainId not found");return t.split(":")[1]}getAccounts(){const t=this.namespace.accounts;return t?[...new Set(t.filter((t=>t.split(":")[1]===this.chainId.toString())).map((t=>t.split(":")[2])))]:[]}createHttpProviders(){const t={};return this.namespace.chains.forEach((e=>{var r;t[e]=this.createHttpProvider(e,null==(r=this.namespace.rpcMap)?void 0:r[e])})),t}getHttpProvider(){const t=`${this.name}:${this.chainId}`,e=this.httpProviders[t];if(typeof e>"u")throw new Error(`JSON-RPC provider for ${t} not found`);return e}setHttpProvider(t,e){const r=this.createHttpProvider(t,e);r&&(this.httpProviders[t]=r)}createHttpProvider(t,e){const r=e||Jn(t,this.namespace,this.client.core.projectId);return typeof r>"u"?void 0:new dt(new Mn(r,ni("disableProviderPing")))}}var pi=Object.defineProperty,fi=Object.defineProperties,di=Object.getOwnPropertyDescriptors,gi=Object.getOwnPropertySymbols,yi=Object.prototype.hasOwnProperty,vi=Object.prototype.propertyIsEnumerable,mi=(t,e,r)=>e in t?pi(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,_i=(t,e)=>{for(var r in e||(e={}))yi.call(e,r)&&mi(t,r,e[r]);if(gi)for(var r of gi(e))vi.call(e,r)&&mi(t,r,e[r]);return t},wi=(t,e)=>fi(t,di(e));class bi{constructor(t){this.events=new(i()),this.rpcProviders={},this.shouldAbortPairingAttempt=!1,this.maxPairingAttempts=10,this.disableProviderPing=!1,this.providerOpts=t,this.logger=typeof t?.logger<"u"&&"string"!=typeof t?.logger?t.logger:(0,c.pino)((0,c.getDefaultLoggerOptions)({level:t?.logger||zn})),this.disableProviderPing=t?.disableProviderPing||!1}static async init(t){const e=new bi(t);return await e.initialize(),e}async request(t,e){const[r,n]=this.validateChain(e);if(!this.session)throw new Error("Please call connect() before request()");return await this.getProvider(r).request({request:_i({},t),chainId:`${r}:${n}`,topic:this.session.topic})}sendAsync(t,e,r){this.request(t,r).then((t=>e(null,t))).catch((t=>e(t,void 0)))}async enable(){if(!this.client)throw new Error("Sign Client not initialized");return this.session||await this.connect({namespaces:this.namespaces,optionalNamespaces:this.optionalNamespaces,sessionProperties:this.sessionProperties}),await this.requestAccounts()}async disconnect(){var t;if(!this.session)throw new Error("Please call connect() before enable()");await this.client.disconnect({topic:null==(t=this.session)?void 0:t.topic,reason:(0,s.D6)("USER_DISCONNECTED")}),await this.cleanup()}async connect(t){if(!this.client)throw new Error("Sign Client not initialized");if(this.setNamespaces(t),await this.cleanupPendingPairings(),!t.skipPairing)return await this.pair(t.pairingTopic)}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}removeListener(t,e){this.events.removeListener(t,e)}off(t,e){this.events.off(t,e)}get isWalletConnect(){return!0}async pair(t){this.shouldAbortPairingAttempt=!1;let e=0;do{if(this.shouldAbortPairingAttempt)throw new Error("Pairing aborted");if(e>=this.maxPairingAttempts)throw new Error("Max auto pairing attempts reached");const{uri:r,approval:n}=await this.client.connect({pairingTopic:t,requiredNamespaces:this.namespaces,optionalNamespaces:this.optionalNamespaces,sessionProperties:this.sessionProperties});r&&(this.uri=r,this.events.emit("display_uri",r)),await n().then((t=>{this.session=t,this.namespaces||(this.namespaces=ei(t.namespaces),this.persist("namespaces",this.namespaces))})).catch((t=>{if(t.message!==hn)throw t;e++}))}while(!this.session);return this.onConnect(),this.session}setDefaultChain(t,e){try{if(!this.session)return;const[r,n]=this.validateChain(t);this.getProvider(r).setDefaultChain(n,e)}catch(t){if(!/Please call connect/.test(t.message))throw t}}async cleanupPendingPairings(t={}){this.logger.info("Cleaning up inactive pairings...");const e=this.client.pairing.getAll();if((0,s.qt)(e)){for(const r of e)t.deletePairings?this.client.core.expirer.set(r.topic,0):await this.client.core.relayer.subscriber.unsubscribe(r.topic);this.logger.info(`Inactive pairings cleared: ${e.length}`)}}abortPairingAttempt(){this.shouldAbortPairingAttempt=!0}async checkStorage(){if(this.namespaces=await this.getFromStore("namespaces"),this.optionalNamespaces=await this.getFromStore("optionalNamespaces")||{},this.client.session.length){const t=this.client.session.keys.length-1;this.session=this.client.session.get(this.client.session.keys[t]),this.createProviders()}}async initialize(){this.logger.trace("Initialized"),await this.createClient(),await this.checkStorage(),this.registerEventListeners()}async createClient(){this.client=this.providerOpts.client||await jn.init({logger:this.providerOpts.logger||zn,relayUrl:this.providerOpts.relayUrl||"wss://relay.walletconnect.com",projectId:this.providerOpts.projectId,metadata:this.providerOpts.metadata,storageOptions:this.providerOpts.storageOptions,storage:this.providerOpts.storage,name:this.providerOpts.name}),this.logger.trace("SignClient Initialized")}createProviders(){if(!this.client)throw new Error("Sign Client not initialized");if(!this.session)throw new Error("Session not initialized. Please call connect() before enable()");const t=[...new Set(Object.keys(this.session.namespaces).map((t=>(0,s.M)(t))))];ii("client",this.client),ii("events",this.events),ii("disableProviderPing",this.disableProviderPing),t.forEach((t=>{if(!this.session)return;const e=function(t,e){const r=Object.keys(e.namespaces).filter((e=>e.includes(t)));if(!r.length)return[];const n=[];return r.forEach((t=>{const r=e.namespaces[t].accounts;n.push(...r)})),n}(t,this.session),r=Qn(e),n=function(t={},e={}){const r=Xn(t),n=Xn(e);return $n.exports.merge(r,n)}(this.namespaces,this.optionalNamespaces),i=wi(_i({},n[t]),{accounts:e,chains:r});switch(t){case"eip155":this.rpcProviders[t]=new oi({namespace:i});break;case"solana":this.rpcProviders[t]=new ai({namespace:i});break;case"cosmos":this.rpcProviders[t]=new ci({namespace:i});break;case"polkadot":this.rpcProviders[t]=new si({namespace:i});break;case"cip34":this.rpcProviders[t]=new ui({namespace:i});break;case"elrond":this.rpcProviders[t]=new hi({namespace:i});break;case"multiversx":this.rpcProviders[t]=new li({namespace:i})}}))}registerEventListeners(){if(typeof this.client>"u")throw new Error("Sign Client is not initialized");this.client.on("session_ping",(t=>{this.events.emit("session_ping",t)})),this.client.on("session_event",(t=>{const{params:e}=t,{event:r}=e;if("accountsChanged"===r.name){const t=r.data;t&&(0,s.qt)(t)&&this.events.emit("accountsChanged",t.map(ti))}else"chainChanged"===r.name?this.onChainChanged(e.chainId):this.events.emit(r.name,r.data);this.events.emit("session_event",t)})),this.client.on("session_update",(({topic:t,params:e})=>{var r;const{namespaces:n}=e,i=null==(r=this.client)?void 0:r.session.get(t);this.session=wi(_i({},i),{namespaces:n}),this.onSessionUpdate(),this.events.emit("session_update",{topic:t,params:e})})),this.client.on("session_delete",(async t=>{await this.cleanup(),this.events.emit("session_delete",t),this.events.emit("disconnect",wi(_i({},(0,s.D6)("USER_DISCONNECTED")),{data:t.topic}))})),this.on(qn,(t=>{this.onChainChanged(t,!0)}))}getProvider(t){if(!this.rpcProviders[t])throw new Error(`Provider not found: ${t}`);return this.rpcProviders[t]}onSessionUpdate(){Object.keys(this.rpcProviders).forEach((t=>{var e;this.getProvider(t).updateNamespace(null==(e=this.session)?void 0:e.namespaces[t])}))}setNamespaces(t){const{namespaces:e,optionalNamespaces:r,sessionProperties:n}=t;e&&Object.keys(e).length&&(this.namespaces=e),r&&Object.keys(r).length&&(this.optionalNamespaces=r),this.sessionProperties=n,this.persist("namespaces",e),this.persist("optionalNamespaces",r)}validateChain(t){const[e,r]=t?.split(":")||["",""];if(!this.namespaces||!Object.keys(this.namespaces).length)return[e,r];if(e&&!Object.keys(this.namespaces||{}).map((t=>(0,s.M)(t))).includes(e))throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);if(e&&r)return[e,r];const n=(0,s.M)(Object.keys(this.namespaces)[0]);return[n,this.rpcProviders[n].getDefaultChain()]}async requestAccounts(){const[t]=this.validateChain();return await this.getProvider(t).requestAccounts()}onChainChanged(t,e=!1){var r;if(!this.namespaces)return;const[n,i]=this.validateChain(t);e||this.getProvider(n).setDefaultChain(i),(null!=(r=this.namespaces[n])?r:this.namespaces[`${n}:${i}`]).defaultChain=i,this.persist("namespaces",this.namespaces),this.events.emit("chainChanged",i)}onConnect(){this.createProviders(),this.events.emit("connect",{session:this.session})}async cleanup(){this.session=void 0,this.namespaces=void 0,this.optionalNamespaces=void 0,this.sessionProperties=void 0,this.persist("namespaces",void 0),this.persist("optionalNamespaces",void 0),this.persist("sessionProperties",void 0),await this.cleanupPendingPairings({deletePairings:!0})}persist(t,e){this.client.core.storage.setItem(`${Dn}/${t}`,e)}async getFromStore(t){return await this.client.core.storage.getItem(`${Dn}/${t}`)}}const Ei=bi,Ii=["eth_sendTransaction","personal_sign"],Pi=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode"],Si=["chainChanged","accountsChanged"],Oi=["message","disconnect","connect"];var xi=Object.defineProperty,Ci=Object.defineProperties,Ri=Object.getOwnPropertyDescriptors,ji=Object.getOwnPropertySymbols,Ai=Object.prototype.hasOwnProperty,Ni=Object.prototype.propertyIsEnumerable,Ti=(t,e,r)=>e in t?xi(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Li=(t,e)=>{for(var r in e||(e={}))Ai.call(e,r)&&Ti(t,r,e[r]);if(ji)for(var r of ji(e))Ni.call(e,r)&&Ti(t,r,e[r]);return t},Mi=(t,e)=>Ci(t,Ri(e));function zi(t){return Number(t[0].split(":")[1])}function Di(t){return`0x${t.toString(16)}`}class qi{constructor(){this.events=new n.EventEmitter,this.namespace="eip155",this.accounts=[],this.chainId=1,this.STORAGE_KEY="wc@2:ethereum_provider:",this.on=(t,e)=>(this.events.on(t,e),this),this.once=(t,e)=>(this.events.once(t,e),this),this.removeListener=(t,e)=>(this.events.removeListener(t,e),this),this.off=(t,e)=>(this.events.off(t,e),this),this.parseAccount=t=>this.isCompatibleChainId(t)?this.parseAccountId(t).address:t,this.signer={},this.rpc={}}static async init(t){const e=new qi;return await e.initialize(t),e}async request(t){return await this.signer.request(t,this.formatChainId(this.chainId))}sendAsync(t,e){this.signer.sendAsync(t,e,this.formatChainId(this.chainId))}get connected(){return!!this.signer.client&&this.signer.client.core.relayer.connected}get connecting(){return!!this.signer.client&&this.signer.client.core.relayer.connecting}async enable(){return this.session||await this.connect(),await this.request({method:"eth_requestAccounts"})}async connect(t){if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts(t);const{required:e,optional:r}=function(t){const{chains:e,optionalChains:r,methods:n,optionalMethods:i,events:o,optionalEvents:a,rpcMap:c}=t;if(!(0,s.qt)(e))throw new Error("Invalid chains");const u={chains:e,methods:n||Ii,events:o||Si,rpcMap:Li({},e.length?{[zi(e)]:c[zi(e)]}:{})},h=o?.filter((t=>!Si.includes(t))),l=n?.filter((t=>!Ii.includes(t)));if(!(r||a||i||null!=h&&h.length||null!=l&&l.length))return{required:e.length?u:void 0};const p={chains:[...new Set(h?.length&&l?.length||!r?u.chains.concat(r||[]):r)],methods:[...new Set(u.methods.concat(null!=i&&i.length?i:Pi))],events:[...new Set(u.events.concat(a||Oi))],rpcMap:c};return{required:e.length?u:void 0,optional:r.length?p:void 0}}(this.rpc);try{const n=await new Promise((async(n,i)=>{var s;this.rpc.showQrModal&&(null==(s=this.modal)||s.subscribeModal((t=>{!t.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),i(new Error("Connection request reset. Please try again.")))}))),await this.signer.connect(Mi(Li({namespaces:Li({},e&&{[this.namespace]:e})},r&&{optionalNamespaces:{[this.namespace]:r}}),{pairingTopic:t?.pairingTopic})).then((t=>{n(t)})).catch((t=>{i(new Error(t.message))}))}));if(!n)return;this.setChainIds(this.rpc.chains);const i=(0,s.gu)(n.namespaces,[this.namespace]);this.setAccounts(i),this.events.emit("connect",{chainId:Di(this.chainId)})}catch(t){throw this.signer.logger.error(t),t}finally{this.modal&&this.modal.closeModal()}}async disconnect(){this.session&&await this.signer.disconnect(),this.reset()}get isWalletConnect(){return!0}get session(){return this.signer.session}registerEventListeners(){this.signer.on("session_event",(t=>{const{params:e}=t,{event:r}=e;"accountsChanged"===r.name?(this.accounts=this.parseAccounts(r.data),this.events.emit("accountsChanged",this.accounts)):"chainChanged"===r.name?this.setChainId(this.formatChainId(r.data)):this.events.emit(r.name,r.data),this.events.emit("session_event",t)})),this.signer.on("chainChanged",(t=>{const e=parseInt(t);this.chainId=e,this.events.emit("chainChanged",Di(this.chainId)),this.persist()})),this.signer.on("session_update",(t=>{this.events.emit("session_update",t)})),this.signer.on("session_delete",(t=>{this.reset(),this.events.emit("session_delete",t),this.events.emit("disconnect",Mi(Li({},(0,s.D6)("USER_DISCONNECTED")),{data:t.topic,name:"USER_DISCONNECTED"}))})),this.signer.on("display_uri",(t=>{var e,r;this.rpc.showQrModal&&(null==(e=this.modal)||e.closeModal(),null==(r=this.modal)||r.openModal({uri:t})),this.events.emit("display_uri",t)}))}switchEthereumChain(t){this.request({method:"wallet_switchEthereumChain",params:[{chainId:t.toString(16)}]})}isCompatibleChainId(t){return"string"==typeof t&&t.startsWith(`${this.namespace}:`)}formatChainId(t){return`${this.namespace}:${t}`}parseChainId(t){return Number(t.split(":")[1])}setChainIds(t){const e=t.filter((t=>this.isCompatibleChainId(t))).map((t=>this.parseChainId(t)));e.length&&(this.chainId=e[0],this.events.emit("chainChanged",Di(this.chainId)),this.persist())}setChainId(t){if(this.isCompatibleChainId(t)){const e=this.parseChainId(t);this.chainId=e,this.switchEthereumChain(e)}}parseAccountId(t){const[e,r,n]=t.split(":");return{chainId:`${e}:${r}`,address:n}}setAccounts(t){this.accounts=t.filter((t=>this.parseChainId(this.parseAccountId(t).chainId)===this.chainId)).map((t=>this.parseAccountId(t).address)),this.events.emit("accountsChanged",this.accounts)}getRpcConfig(t){var e,r;const n=null!=(e=t?.chains)?e:[],i=null!=(r=t?.optionalChains)?r:[],s=n.concat(i);if(!s.length)throw new Error("No chains specified in either `chains` or `optionalChains`");const o=n.length?t?.methods||Ii:[],a=n.length?t?.events||Si:[],c=t?.optionalMethods||[],u=t?.optionalEvents||[],h=t?.rpcMap||this.buildRpcMap(s,t.projectId),l=t?.qrModalOptions||void 0;return{chains:n?.map((t=>this.formatChainId(t))),optionalChains:i.map((t=>this.formatChainId(t))),methods:o,events:a,optionalMethods:c,optionalEvents:u,rpcMap:h,showQrModal:!(null==t||!t.showQrModal),qrModalOptions:l,projectId:t.projectId,metadata:t.metadata}}buildRpcMap(t,e){const r={};return t.forEach((t=>{r[t]=this.getRpcUrl(t,e)})),r}async initialize(t){if(this.rpc=this.getRpcConfig(t),this.chainId=this.rpc.chains.length?zi(this.rpc.chains):zi(this.rpc.optionalChains),this.signer=await Ei.init({projectId:this.rpc.projectId,metadata:this.rpc.metadata,disableProviderPing:t.disableProviderPing,relayUrl:t.relayUrl,storageOptions:t.storageOptions}),this.registerEventListeners(),await this.loadPersistedSession(),this.rpc.showQrModal){let t;try{const{WalletConnectModal:e}=await r.e(343).then(r.bind(r,9343));t=e}catch{throw new Error("To use QR modal, please install @walletconnect/modal package")}if(t)try{this.modal=new t(Li({walletConnectVersion:2,projectId:this.rpc.projectId,standaloneChains:this.rpc.chains},this.rpc.qrModalOptions))}catch(t){throw this.signer.logger.error(t),new Error("Could not generate WalletConnectModal Instance")}}}loadConnectOpts(t){if(!t)return;const{chains:e,optionalChains:r,rpcMap:n}=t;e&&(0,s.qt)(e)&&(this.rpc.chains=e.map((t=>this.formatChainId(t))),e.forEach((t=>{this.rpc.rpcMap[t]=n?.[t]||this.getRpcUrl(t)}))),r&&(0,s.qt)(r)&&(this.rpc.optionalChains=[],this.rpc.optionalChains=r?.map((t=>this.formatChainId(t))),r.forEach((t=>{this.rpc.rpcMap[t]=n?.[t]||this.getRpcUrl(t)})))}getRpcUrl(t,e){var r;return(null==(r=this.rpc.rpcMap)?void 0:r[t])||`https://rpc.walletconnect.com/v1/?chainId=eip155:${t}&projectId=${e||this.rpc.projectId}`}async loadPersistedSession(){if(!this.session)return;const t=await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`),e=this.session.namespaces[`${this.namespace}:${t}`]?this.session.namespaces[`${this.namespace}:${t}`]:this.session.namespaces[this.namespace];this.setChainIds(t?[this.formatChainId(t)]:e?.accounts),this.setAccounts(e?.accounts)}reset(){this.chainId=1,this.accounts=[]}persist(){this.session&&this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`,this.chainId)}parseAccounts(t){return"string"==typeof t||t instanceof String?[this.parseAccount(t)]:t.map((t=>this.parseAccount(t)))}}const ki=qi},8200:(t,e,r)=>{"use strict";r.d(e,{q:()=>n});class n{}},997:(t,e,r)=>{"use strict";r.r(e),r.d(e,{IEvents:()=>n.q});var n=r(8200)},2568:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HEARTBEAT_EVENTS=e.HEARTBEAT_INTERVAL=void 0;const n=r(6736);e.HEARTBEAT_INTERVAL=n.FIVE_SECONDS,e.HEARTBEAT_EVENTS={pulse:"heartbeat_pulse"}},3401:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(9653).__exportStar(r(2568),e)},8969:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HeartBeat=void 0;const n=r(9653),i=r(7187),s=r(6736),o=r(1614),a=r(3401);class c extends o.IHeartBeat{constructor(t){super(t),this.events=new i.EventEmitter,this.interval=a.HEARTBEAT_INTERVAL,this.interval=(null==t?void 0:t.interval)||a.HEARTBEAT_INTERVAL}static init(t){return n.__awaiter(this,void 0,void 0,(function*(){const e=new c(t);return yield e.init(),e}))}init(){return n.__awaiter(this,void 0,void 0,(function*(){yield this.initialize()}))}stop(){clearInterval(this.intervalRef)}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}initialize(){return n.__awaiter(this,void 0,void 0,(function*(){this.intervalRef=setInterval((()=>this.pulse()),s.toMiliseconds(this.interval))}))}pulse(){this.events.emit(a.HEARTBEAT_EVENTS.pulse)}}e.HeartBeat=c},159:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(9653);n.__exportStar(r(8969),e),n.__exportStar(r(1614),e),n.__exportStar(r(3401),e)},4174:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IHeartBeat=void 0;const n=r(997);class i extends n.IEvents{constructor(t){super()}}e.IHeartBeat=i},1614:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(9653).__exportStar(r(4174),e)},9653:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__assign:()=>s,__asyncDelegator:()=>w,__asyncGenerator:()=>_,__asyncValues:()=>b,__await:()=>m,__awaiter:()=>h,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>O,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>f,__extends:()=>i,__generator:()=>l,__importDefault:()=>P,__importStar:()=>I,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>g,__rest:()=>o,__spread:()=>y,__spreadArrays:()=>v,__values:()=>d});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var s=function(){return s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};function o(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function a(t,e,r,n){var i,s=arguments.length,o=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,r,o):i(e,r))||o);return s>3&&o&&Object.defineProperty(e,r,o),o}function c(t,e){return function(r,n){e(r,n,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,r,n){return new(r||(r=Promise))((function(i,s){function o(t){try{c(n.next(t))}catch(t){s(t)}}function a(t){try{c(n.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}c((n=n.apply(t,e||[])).next())}))}function l(t,e){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function p(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function f(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(g(arguments[e]));return t}function v(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function _(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){s.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=i[t](e)).value instanceof m?Promise.resolve(r.value.v).then(c,u):h(s[0][2],r)}catch(t){h(s[0][3],t)}var r}function c(t){a("next",t)}function u(t){a("throw",t)}function h(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function w(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,i){e[n]=t[n]?function(e){return(r=!r)?{value:m(t[n](e)),done:"return"===n}:i?i(e):e}:i}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=d(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function I(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function P(t){return t&&t.__esModule?t:{default:t}}function S(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function O(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}},2030:t=>{"use strict";t.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}},5150:(t,e,r)=>{"use strict";const n=r(3893),i=r(3954),s=n.__importDefault(r(653)),o=r(9728);e.ZP=class{constructor(){this.localStorage=s.default}getKeys(){return n.__awaiter(this,void 0,void 0,(function*(){return Object.keys(this.localStorage)}))}getEntries(){return n.__awaiter(this,void 0,void 0,(function*(){return Object.entries(this.localStorage).map(o.parseEntry)}))}getItem(t){return n.__awaiter(this,void 0,void 0,(function*(){const e=this.localStorage.getItem(t);if(null!==e)return i.safeJsonParse(e)}))}setItem(t,e){return n.__awaiter(this,void 0,void 0,(function*(){this.localStorage.setItem(t,i.safeJsonStringify(e))}))}removeItem(t){return n.__awaiter(this,void 0,void 0,(function*(){this.localStorage.removeItem(t)}))}}},653:(t,e,r)=>{"use strict";!function(){let e;function n(){}e=n,e.prototype.getItem=function(t){return this.hasOwnProperty(t)?String(this[t]):null},e.prototype.setItem=function(t,e){this[t]=String(e)},e.prototype.removeItem=function(t){delete this[t]},e.prototype.clear=function(){const t=this;Object.keys(t).forEach((function(e){t[e]=void 0,delete t[e]}))},e.prototype.key=function(t){return t=t||0,Object.keys(this)[t]},e.prototype.__defineGetter__("length",(function(){return Object.keys(this).length})),void 0!==r.g&&r.g.localStorage?t.exports=r.g.localStorage:"undefined"!=typeof window&&window.localStorage?t.exports=window.localStorage:t.exports=new n}()},9728:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3893);n.__exportStar(r(9076),e),n.__exportStar(r(496),e)},9076:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IKeyValueStorage=void 0,e.IKeyValueStorage=class{}},496:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.parseEntry=void 0;const n=r(3954);e.parseEntry=function(t){var e;return[t[0],n.safeJsonParse(null!==(e=t[1])&&void 0!==e?e:"")]}},3893:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__assign:()=>s,__asyncDelegator:()=>w,__asyncGenerator:()=>_,__asyncValues:()=>b,__await:()=>m,__awaiter:()=>h,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>O,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>f,__extends:()=>i,__generator:()=>l,__importDefault:()=>P,__importStar:()=>I,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>g,__rest:()=>o,__spread:()=>y,__spreadArrays:()=>v,__values:()=>d});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var s=function(){return s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};function o(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function a(t,e,r,n){var i,s=arguments.length,o=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,r,o):i(e,r))||o);return s>3&&o&&Object.defineProperty(e,r,o),o}function c(t,e){return function(r,n){e(r,n,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,r,n){return new(r||(r=Promise))((function(i,s){function o(t){try{c(n.next(t))}catch(t){s(t)}}function a(t){try{c(n.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}c((n=n.apply(t,e||[])).next())}))}function l(t,e){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function p(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function f(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(g(arguments[e]));return t}function v(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function _(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){s.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=i[t](e)).value instanceof m?Promise.resolve(r.value.v).then(c,u):h(s[0][2],r)}catch(t){h(s[0][3],t)}var r}function c(t){a("next",t)}function u(t){a("throw",t)}function h(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function w(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,i){e[n]=t[n]?function(e){return(r=!r)?{value:m(t[n](e)),done:"return"===n}:i?i(e):e}:i}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=d(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function I(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function P(t){return t&&t.__esModule?t:{default:t}}function S(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function O(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}},5727:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PINO_CUSTOM_CONTEXT_KEY=e.PINO_LOGGER_DEFAULTS=void 0,e.PINO_LOGGER_DEFAULTS={level:"info"},e.PINO_CUSTOM_CONTEXT_KEY="custom_context"},9107:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.pino=void 0;const n=r(7121),i=n.__importDefault(r(6559));Object.defineProperty(e,"pino",{enumerable:!0,get:function(){return i.default}}),n.__exportStar(r(5727),e),n.__exportStar(r(8048),e)},8048:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateChildLogger=e.formatChildLoggerContext=e.getLoggerContext=e.setBrowserLoggerContext=e.getBrowserLoggerContext=e.getDefaultLoggerOptions=void 0;const n=r(5727);function i(t,e=n.PINO_CUSTOM_CONTEXT_KEY){return t[e]||""}function s(t,e,r=n.PINO_CUSTOM_CONTEXT_KEY){return t[r]=e,t}function o(t,e=n.PINO_CUSTOM_CONTEXT_KEY){let r="";return r=void 0===t.bindings?i(t,e):t.bindings().context||"",r}function a(t,e,r=n.PINO_CUSTOM_CONTEXT_KEY){const i=o(t,r);return i.trim()?`${i}/${e}`:e}e.getDefaultLoggerOptions=function(t){return Object.assign(Object.assign({},t),{level:(null==t?void 0:t.level)||n.PINO_LOGGER_DEFAULTS.level})},e.getBrowserLoggerContext=i,e.setBrowserLoggerContext=s,e.getLoggerContext=o,e.formatChildLoggerContext=a,e.generateChildLogger=function(t,e,r=n.PINO_CUSTOM_CONTEXT_KEY){const i=a(t,e,r);return s(t.child({context:i}),i,r)}},7121:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__assign:()=>s,__asyncDelegator:()=>w,__asyncGenerator:()=>_,__asyncValues:()=>b,__await:()=>m,__awaiter:()=>h,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>O,__createBinding:()=>p,__decorate:()=>a,__exportStar:()=>f,__extends:()=>i,__generator:()=>l,__importDefault:()=>P,__importStar:()=>I,__makeTemplateObject:()=>E,__metadata:()=>u,__param:()=>c,__read:()=>g,__rest:()=>o,__spread:()=>y,__spreadArrays:()=>v,__values:()=>d});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var s=function(){return s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};function o(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function a(t,e,r,n){var i,s=arguments.length,o=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(s<3?i(o):s>3?i(e,r,o):i(e,r))||o);return s>3&&o&&Object.defineProperty(e,r,o),o}function c(t,e){return function(r,n){e(r,n,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,r,n){return new(r||(r=Promise))((function(i,s){function o(t){try{c(n.next(t))}catch(t){s(t)}}function a(t){try{c(n.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}c((n=n.apply(t,e||[])).next())}))}function l(t,e){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function p(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function f(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(g(arguments[e]));return t}function v(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function _(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){s.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=i[t](e)).value instanceof m?Promise.resolve(r.value.v).then(c,u):h(s[0][2],r)}catch(t){h(s[0][3],t)}var r}function c(t){a("next",t)}function u(t){a("throw",t)}function h(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function w(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,i){e[n]=t[n]?function(e){return(r=!r)?{value:m(t[n](e)),done:"return"===n}:i?i(e):e}:i}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=d(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}function E(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function I(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function P(t){return t&&t.__esModule?t:{default:t}}function S(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function O(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}},3014:()=>{},2307:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",i=1,s=2,o=9007199254740991,a="[object Arguments]",c="[object Array]",u="[object AsyncFunction]",h="[object Boolean]",l="[object Date]",p="[object Error]",f="[object Function]",d="[object GeneratorFunction]",g="[object Map]",y="[object Number]",v="[object Null]",m="[object Object]",_="[object Promise]",w="[object Proxy]",b="[object RegExp]",E="[object Set]",I="[object String]",P="[object Undefined]",S="[object WeakMap]",O="[object ArrayBuffer]",x="[object DataView]",C=/^\[object .+?Constructor\]$/,R=/^(?:0|[1-9]\d*)$/,j={};j["[object Float32Array]"]=j["[object Float64Array]"]=j["[object Int8Array]"]=j["[object Int16Array]"]=j["[object Int32Array]"]=j["[object Uint8Array]"]=j["[object Uint8ClampedArray]"]=j["[object Uint16Array]"]=j["[object Uint32Array]"]=!0,j[a]=j[c]=j[O]=j[h]=j[x]=j[l]=j[p]=j[f]=j[g]=j[y]=j[m]=j[b]=j[E]=j[I]=j[S]=!1;var A="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,N="object"==typeof self&&self&&self.Object===Object&&self,T=A||N||Function("return this")(),L=e&&!e.nodeType&&e,M=L&&t&&!t.nodeType&&t,z=M&&M.exports===L,D=z&&A.process,q=function(){try{return D&&D.binding&&D.binding("util")}catch(t){}}(),k=q&&q.isTypedArray;function $(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function U(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function H(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var V,K,B,Z=Array.prototype,F=Function.prototype,W=Object.prototype,G=T["__core-js_shared__"],J=F.toString,Y=W.hasOwnProperty,Q=(V=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||""))?"Symbol(src)_1."+V:"",X=W.toString,tt=RegExp("^"+J.call(Y).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),et=z?T.Buffer:void 0,rt=T.Symbol,nt=T.Uint8Array,it=W.propertyIsEnumerable,st=Z.splice,ot=rt?rt.toStringTag:void 0,at=Object.getOwnPropertySymbols,ct=et?et.isBuffer:void 0,ut=(K=Object.keys,B=Object,function(t){return K(B(t))}),ht=Mt(T,"DataView"),lt=Mt(T,"Map"),pt=Mt(T,"Promise"),ft=Mt(T,"Set"),dt=Mt(T,"WeakMap"),gt=Mt(Object,"create"),yt=kt(ht),vt=kt(lt),mt=kt(pt),_t=kt(ft),wt=kt(dt),bt=rt?rt.prototype:void 0,Et=bt?bt.valueOf:void 0;function It(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Pt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function St(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Ot(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new St;++e<r;)this.add(t[e])}function xt(t){var e=this.__data__=new Pt(t);this.size=e.size}function Ct(t,e){for(var r=t.length;r--;)if($t(t[r][0],e))return r;return-1}function Rt(t){return null==t?void 0===t?P:v:ot&&ot in Object(t)?function(t){var e=Y.call(t,ot),r=t[ot];try{t[ot]=void 0;var n=!0}catch(t){}var i=X.call(t);return n&&(e?t[ot]=r:delete t[ot]),i}(t):function(t){return X.call(t)}(t)}function jt(t){return Ft(t)&&Rt(t)==a}function At(t,e,r,n,o){return t===e||(null==t||null==e||!Ft(t)&&!Ft(e)?t!=t&&e!=e:function(t,e,r,n,o,u){var f=Ht(t),d=Ht(e),v=f?c:Dt(t),_=d?c:Dt(e),w=(v=v==a?m:v)==m,P=(_=_==a?m:_)==m,S=v==_;if(S&&Vt(t)){if(!Vt(e))return!1;f=!0,w=!1}if(S&&!w)return u||(u=new xt),f||Wt(t)?Nt(t,e,r,n,o,u):function(t,e,r,n,o,a,c){switch(r){case x:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case O:return!(t.byteLength!=e.byteLength||!a(new nt(t),new nt(e)));case h:case l:case y:return $t(+t,+e);case p:return t.name==e.name&&t.message==e.message;case b:case I:return t==e+"";case g:var u=U;case E:var f=n&i;if(u||(u=H),t.size!=e.size&&!f)return!1;var d=c.get(t);if(d)return d==e;n|=s,c.set(t,e);var v=Nt(u(t),u(e),n,o,a,c);return c.delete(t),v;case"[object Symbol]":if(Et)return Et.call(t)==Et.call(e)}return!1}(t,e,v,r,n,o,u);if(!(r&i)){var C=w&&Y.call(t,"__wrapped__"),R=P&&Y.call(e,"__wrapped__");if(C||R){var j=C?t.value():t,A=R?e.value():e;return u||(u=new xt),o(j,A,r,n,u)}}return!!S&&(u||(u=new xt),function(t,e,r,n,s,o){var a=r&i,c=Tt(t),u=c.length;if(u!=Tt(e).length&&!a)return!1;for(var h=u;h--;){var l=c[h];if(!(a?l in e:Y.call(e,l)))return!1}var p=o.get(t);if(p&&o.get(e))return p==e;var f=!0;o.set(t,e),o.set(e,t);for(var d=a;++h<u;){var g=t[l=c[h]],y=e[l];if(n)var v=a?n(y,g,l,e,t,o):n(g,y,l,t,e,o);if(!(void 0===v?g===y||s(g,y,r,n,o):v)){f=!1;break}d||(d="constructor"==l)}if(f&&!d){var m=t.constructor,_=e.constructor;m==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof _&&_ instanceof _||(f=!1)}return o.delete(t),o.delete(e),f}(t,e,r,n,o,u))}(t,e,r,n,At,o))}function Nt(t,e,r,n,o,a){var c=r&i,u=t.length,h=e.length;if(u!=h&&!(c&&h>u))return!1;var l=a.get(t);if(l&&a.get(e))return l==e;var p=-1,f=!0,d=r&s?new Ot:void 0;for(a.set(t,e),a.set(e,t);++p<u;){var g=t[p],y=e[p];if(n)var v=c?n(y,g,p,e,t,a):n(g,y,p,t,e,a);if(void 0!==v){if(v)continue;f=!1;break}if(d){if(!$(e,(function(t,e){if(i=e,!d.has(i)&&(g===t||o(g,t,r,n,a)))return d.push(e);var i}))){f=!1;break}}else if(g!==y&&!o(g,y,r,n,a)){f=!1;break}}return a.delete(t),a.delete(e),f}function Tt(t){return function(t,e,r){var n=e(t);return Ht(t)?n:function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}(n,r(t))}(t,Gt,zt)}function Lt(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function Mt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Zt(t)||function(t){return!!Q&&Q in t}(t))&&(Kt(t)?tt:C).test(kt(t))}(r)?r:void 0}It.prototype.clear=function(){this.__data__=gt?gt(null):{},this.size=0},It.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},It.prototype.get=function(t){var e=this.__data__;if(gt){var r=e[t];return r===n?void 0:r}return Y.call(e,t)?e[t]:void 0},It.prototype.has=function(t){var e=this.__data__;return gt?void 0!==e[t]:Y.call(e,t)},It.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=gt&&void 0===e?n:e,this},Pt.prototype.clear=function(){this.__data__=[],this.size=0},Pt.prototype.delete=function(t){var e=this.__data__,r=Ct(e,t);return!(r<0||(r==e.length-1?e.pop():st.call(e,r,1),--this.size,0))},Pt.prototype.get=function(t){var e=this.__data__,r=Ct(e,t);return r<0?void 0:e[r][1]},Pt.prototype.has=function(t){return Ct(this.__data__,t)>-1},Pt.prototype.set=function(t,e){var r=this.__data__,n=Ct(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},St.prototype.clear=function(){this.size=0,this.__data__={hash:new It,map:new(lt||Pt),string:new It}},St.prototype.delete=function(t){var e=Lt(this,t).delete(t);return this.size-=e?1:0,e},St.prototype.get=function(t){return Lt(this,t).get(t)},St.prototype.has=function(t){return Lt(this,t).has(t)},St.prototype.set=function(t,e){var r=Lt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},Ot.prototype.add=Ot.prototype.push=function(t){return this.__data__.set(t,n),this},Ot.prototype.has=function(t){return this.__data__.has(t)},xt.prototype.clear=function(){this.__data__=new Pt,this.size=0},xt.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},xt.prototype.get=function(t){return this.__data__.get(t)},xt.prototype.has=function(t){return this.__data__.has(t)},xt.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Pt){var n=r.__data__;if(!lt||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new St(n)}return r.set(t,e),this.size=r.size,this};var zt=at?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,i=null==e?0:e.length,s=0,o=[];++n<i;){var a=e[n];c=a,it.call(t,c)&&(o[s++]=a)}var c;return o}(at(t)))}:function(){return[]},Dt=Rt;function qt(t,e){return!!(e=null==e?o:e)&&("number"==typeof t||R.test(t))&&t>-1&&t%1==0&&t<e}function kt(t){if(null!=t){try{return J.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function $t(t,e){return t===e||t!=t&&e!=e}(ht&&Dt(new ht(new ArrayBuffer(1)))!=x||lt&&Dt(new lt)!=g||pt&&Dt(pt.resolve())!=_||ft&&Dt(new ft)!=E||dt&&Dt(new dt)!=S)&&(Dt=function(t){var e=Rt(t),r=e==m?t.constructor:void 0,n=r?kt(r):"";if(n)switch(n){case yt:return x;case vt:return g;case mt:return _;case _t:return E;case wt:return S}return e});var Ut=jt(function(){return arguments}())?jt:function(t){return Ft(t)&&Y.call(t,"callee")&&!it.call(t,"callee")},Ht=Array.isArray,Vt=ct||function(){return!1};function Kt(t){if(!Zt(t))return!1;var e=Rt(t);return e==f||e==d||e==u||e==w}function Bt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=o}function Zt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ft(t){return null!=t&&"object"==typeof t}var Wt=k?function(t){return function(e){return t(e)}}(k):function(t){return Ft(t)&&Bt(t.length)&&!!j[Rt(t)]};function Gt(t){return null!=(e=t)&&Bt(e.length)&&!Kt(e)?function(t,e){var r=Ht(t),n=!r&&Ut(t),i=!r&&!n&&Vt(t),s=!r&&!n&&!i&&Wt(t),o=r||n||i||s,a=o?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],c=a.length;for(var u in t)!e&&!Y.call(t,u)||o&&("length"==u||i&&("offset"==u||"parent"==u)||s&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||qt(u,c))||a.push(u);return a}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||W))return ut(t);var e,r,n=[];for(var i in Object(t))Y.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t);var e}t.exports=function(t,e){return At(t,e)}},5346:t=>{"use strict";function e(t){try{return JSON.stringify(t)}catch(t){return'"[Circular]"'}}t.exports=function(t,r,n){var i=n&&n.stringify||e;if("object"==typeof t&&null!==t){var s=r.length+1;if(1===s)return t;var o=new Array(s);o[0]=i(t);for(var a=1;a<s;a++)o[a]=i(r[a]);return o.join(" ")}if("string"!=typeof t)return t;var c=r.length;if(0===c)return t;for(var u="",h=0,l=-1,p=t&&t.length||0,f=0;f<p;){if(37===t.charCodeAt(f)&&f+1<p){switch(l=l>-1?l:0,t.charCodeAt(f+1)){case 100:case 102:if(h>=c)break;if(null==r[h])break;l<f&&(u+=t.slice(l,f)),u+=Number(r[h]),l=f+2,f++;break;case 105:if(h>=c)break;if(null==r[h])break;l<f&&(u+=t.slice(l,f)),u+=Math.floor(Number(r[h])),l=f+2,f++;break;case 79:case 111:case 106:if(h>=c)break;if(void 0===r[h])break;l<f&&(u+=t.slice(l,f));var d=typeof r[h];if("string"===d){u+="'"+r[h]+"'",l=f+2,f++;break}if("function"===d){u+=r[h].name||"<anonymous>",l=f+2,f++;break}u+=i(r[h]),l=f+2,f++;break;case 115:if(h>=c)break;l<f&&(u+=t.slice(l,f)),u+=String(r[h]),l=f+2,f++;break;case 37:l<f&&(u+=t.slice(l,f)),u+="%",l=f+2,f++,h--}++h}++f}return-1===l?t:(l<p&&(u+=t.slice(l)),u)}},3954:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.safeJsonParse=function(t){if("string"!=typeof t)throw new Error("Cannot safe json parse value of type "+typeof t);try{return JSON.parse(t)}catch(e){return t}},e.safeJsonStringify=function(t){return"string"==typeof t?t:JSON.stringify(t,((t,e)=>void 0===e?null:e))}},6559:(t,e,r)=>{"use strict";const n=r(5346);t.exports=o;const i=function(){function t(t){return void 0!==t&&t}try{return"undefined"!=typeof globalThis||Object.defineProperty(Object.prototype,"globalThis",{get:function(){return delete Object.prototype.globalThis,this.globalThis=this},configurable:!0}),globalThis}catch(e){return t(self)||t(window)||t(this)||{}}}().console||{},s={mapHttpRequest:p,mapHttpResponse:p,wrapRequestSerializer:f,wrapResponseSerializer:f,wrapErrorSerializer:f,req:p,res:p,err:function(t){const e={type:t.constructor.name,msg:t.message,stack:t.stack};for(const r in t)void 0===e[r]&&(e[r]=t[r]);return e}};function o(t){(t=t||{}).browser=t.browser||{};const e=t.browser.transmit;if(e&&"function"!=typeof e.send)throw Error("pino: transmit option must have a send function");const r=t.browser.write||i;t.browser.write&&(t.browser.asObject=!0);const n=t.serializers||{},s=function(t,e){return Array.isArray(t)?t.filter((function(t){return"!stdSerializers.err"!==t})):!0===t&&Object.keys(e)}(t.browser.serialize,n);let p=t.browser.serialize;Array.isArray(t.browser.serialize)&&t.browser.serialize.indexOf("!stdSerializers.err")>-1&&(p=!1),"function"==typeof r&&(r.error=r.fatal=r.warn=r.info=r.debug=r.trace=r),!1===t.enabled&&(t.level="silent");const f=t.level||"info",g=Object.create(r);g.log||(g.log=d),Object.defineProperty(g,"levelVal",{get:function(){return"silent"===this.level?1/0:this.levels.values[this.level]}}),Object.defineProperty(g,"level",{get:function(){return this._level},set:function(t){if("silent"!==t&&!this.levels.values[t])throw Error("unknown level "+t);this._level=t,a(y,g,"error","log"),a(y,g,"fatal","error"),a(y,g,"warn","error"),a(y,g,"info","log"),a(y,g,"debug","log"),a(y,g,"trace","log")}});const y={transmit:e,serialize:s,asObject:t.browser.asObject,levels:["error","fatal","warn","info","debug","trace"],timestamp:l(t)};return g.levels=o.levels,g.level=f,g.setMaxListeners=g.getMaxListeners=g.emit=g.addListener=g.on=g.prependListener=g.once=g.prependOnceListener=g.removeListener=g.removeAllListeners=g.listeners=g.listenerCount=g.eventNames=g.write=g.flush=d,g.serializers=n,g._serialize=s,g._stdErrSerialize=p,g.child=function(r,i){if(!r)throw new Error("missing bindings for child Pino");i=i||{},s&&r.serializers&&(i.serializers=r.serializers);const o=i.serializers;if(s&&o){var a=Object.assign({},n,o),l=!0===t.browser.serialize?Object.keys(a):s;delete r.serializers,c([r],l,a,this._stdErrSerialize)}function p(t){this._childLevel=1+(0|t._childLevel),this.error=u(t,r,"error"),this.fatal=u(t,r,"fatal"),this.warn=u(t,r,"warn"),this.info=u(t,r,"info"),this.debug=u(t,r,"debug"),this.trace=u(t,r,"trace"),a&&(this.serializers=a,this._serialize=l),e&&(this._logEvent=h([].concat(t._logEvent.bindings,r)))}return p.prototype=this,new p(this)},e&&(g._logEvent=h()),g}function a(t,e,r,s){const a=Object.getPrototypeOf(e);e[r]=e.levelVal>e.levels.values[r]?d:a[r]?a[r]:i[r]||i[s]||d,function(t,e,r){var s;(t.transmit||e[r]!==d)&&(e[r]=(s=e[r],function(){const a=t.timestamp(),u=new Array(arguments.length),l=Object.getPrototypeOf&&Object.getPrototypeOf(this)===i?i:this;for(var p=0;p<u.length;p++)u[p]=arguments[p];if(t.serialize&&!t.asObject&&c(u,this._serialize,this.serializers,this._stdErrSerialize),t.asObject?s.call(l,function(t,e,r,i){t._serialize&&c(r,t._serialize,t.serializers,t._stdErrSerialize);const s=r.slice();let a=s[0];const u={};i&&(u.time=i),u.level=o.levels.values[e];let h=1+(0|t._childLevel);if(h<1&&(h=1),null!==a&&"object"==typeof a){for(;h--&&"object"==typeof s[0];)Object.assign(u,s.shift());a=s.length?n(s.shift(),s):void 0}else"string"==typeof a&&(a=n(s.shift(),s));return void 0!==a&&(u.msg=a),u}(this,r,u,a)):s.apply(l,u),t.transmit){const n=t.transmit.level||e.level,i=o.levels.values[n],s=o.levels.values[r];if(s<i)return;!function(t,e,r){const n=e.send,i=e.ts,s=e.methodLevel,o=e.methodValue,a=e.val,u=t._logEvent.bindings;c(r,t._serialize||Object.keys(t.serializers),t.serializers,void 0===t._stdErrSerialize||t._stdErrSerialize),t._logEvent.ts=i,t._logEvent.messages=r.filter((function(t){return-1===u.indexOf(t)})),t._logEvent.level.label=s,t._logEvent.level.value=o,n(s,t._logEvent,a),t._logEvent=h(u)}(this,{ts:a,methodLevel:r,methodValue:s,transmitLevel:n,transmitValue:o.levels.values[t.transmit.level||e.level],send:t.transmit.send,val:e.levelVal},u)}}))}(t,e,r)}function c(t,e,r,n){for(const i in t)if(n&&t[i]instanceof Error)t[i]=o.stdSerializers.err(t[i]);else if("object"==typeof t[i]&&!Array.isArray(t[i]))for(const n in t[i])e&&e.indexOf(n)>-1&&n in r&&(t[i][n]=r[n](t[i][n]))}function u(t,e,r){return function(){const n=new Array(1+arguments.length);n[0]=e;for(var i=1;i<n.length;i++)n[i]=arguments[i-1];return t[r].apply(this,n)}}function h(t){return{ts:0,messages:[],bindings:t||[],level:{label:"",value:0}}}function l(t){return"function"==typeof t.timestamp?t.timestamp:!1===t.timestamp?g:y}function p(){return{}}function f(t){return t}function d(){}function g(){return!1}function y(){return Date.now()}o.levels={values:{fatal:60,error:50,warn:40,info:30,debug:20,trace:10},labels:{10:"trace",20:"debug",30:"info",40:"warn",50:"error",60:"fatal"}},o.stdSerializers=s,o.stdTimeFunctions=Object.assign({},{nullTime:g,epochTime:y,unixTime:function(){return Math.round(Date.now()/1e3)},isoTime:function(){return new Date(Date.now()).toISOString()}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,